Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DOSPTS

Grammar

Rule 0     S' -> program
Rule 1     program -> PRO r_register_gotomain ID r_register_global PTOCOM opvars opfunciones MAIN r_switch_to_global PARIZQ PARDER bloque
Rule 2     opvars -> vars
Rule 3     opvars -> empty
Rule 4     opfunciones -> funciones opfunciones
Rule 5     opfunciones -> empty
Rule 6     vars -> VARTOKEN tipo ID r_register_variable_name arr_uno arr_dos r_verify_array varciclo PTOCOM tipociclo
Rule 7     varciclo -> COMA ID r_register_variable_name arr_uno arr_dos r_verify_array varciclo
Rule 8     varciclo -> empty
Rule 9     arr -> CORIZQ CTEI r_register_const CORDER
Rule 10    arr -> empty
Rule 11    arr_uno -> CORIZQ CTEI r_arr_dim_uno CORDER
Rule 12    arr_uno -> empty
Rule 13    arr_dos -> CORIZQ CTEI r_arr_dim_dos CORDER
Rule 14    arr_dos -> empty
Rule 15    tipociclo -> tipo opciontipo
Rule 16    tipociclo -> empty
Rule 17    opciontipo -> ID r_register_variable_name arr_uno arr_dos r_verify_array varciclo PTOCOM tipociclo
Rule 18    opciontipo -> MODULE ID r_update_func_type r_update_curr_function_name_especial PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return
Rule 19    tipo -> INT r_register_variable_type
Rule 20    tipo -> FLT r_register_variable_type
Rule 21    tipo -> CHAR r_register_variable_type
Rule 22    tipo_func -> INT r_register_function
Rule 23    tipo_func -> FLT r_register_function
Rule 24    tipo_func -> CHAR r_register_function
Rule 25    varsimple -> tipo ident
Rule 26    funciones -> funcionvoid
Rule 27    funciones -> funcion
Rule 28    funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloque r_endfunc
Rule 29    opcionvarsimple -> varsimple ciclovarsimple
Rule 30    opcionvarsimple -> empty
Rule 31    ciclovarsimple -> COMA varsimple ciclovarsimple
Rule 32    ciclovarsimple -> empty
Rule 33    funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return
Rule 34    ident -> ID r_register_variable_name arrini arrini
Rule 35    arrini -> CORIZQ CORDER
Rule 36    arrini -> empty
Rule 37    bloque -> KEYIZQ bloqueopcion KEYDER
Rule 38    bloqueopcion -> estatuto bloqueopcion
Rule 39    bloqueopcion -> empty
Rule 40    bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER
Rule 41    bloqueopcionfunc -> estatutofunc bloqueopcionfunc
Rule 42    bloqueopcionfunc -> empty
Rule 43    estatuto -> asignacion
Rule 44    estatuto -> decision
Rule 45    estatuto -> escritura
Rule 46    estatuto -> llamadafunc
Rule 47    estatuto -> repeticion
Rule 48    estatuto -> lectura
Rule 49    estatutofunc -> asignacion
Rule 50    estatutofunc -> decisionfunc
Rule 51    estatutofunc -> escritura
Rule 52    estatutofunc -> llamadafunc
Rule 53    estatutofunc -> repeticionfunc
Rule 54    estatutofunc -> lectura
Rule 55    estatutofunc -> RETURN PARIZQ expresion r_return_func PARDER PTOCOM
Rule 56    asignacion -> ID r_verifica_variable_existe r_guardar_variable arrexp_uno arrexp_dos r_pila_operandos_push_id IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM
Rule 57    expresion -> exp r_pop_comp expresionsig
Rule 58    expresionsig -> MAY r_pila_operadores_push_may expresionsigequal expresion
Rule 59    expresionsig -> MEN r_pila_operadores_push_men expresionsigequal expresion
Rule 60    expresionsig -> DIF r_pila_operadores_push_dif expresion
Rule 61    expresionsig -> IGUIGU r_pila_operadores_push_iguigu expresion
Rule 62    expresionsig -> AND r_pila_operadores_push_and expresion
Rule 63    expresionsig -> OR r_pila_operadores_push_or expresion
Rule 64    expresionsig -> MAYIGU r_pila_operadores_push_mayigu expresionsigequal expresion
Rule 65    expresionsig -> MENIGU r_pila_operadores_push_menigu expresionsigequal expresion
Rule 66    expresionsig -> empty
Rule 67    expresionsigequal -> IGU
Rule 68    expresionsigequal -> empty
Rule 69    exp -> termino r_pop_mas expciclo
Rule 70    expciclo -> MAS r_pila_operadores_push_mas exp
Rule 71    expciclo -> MENOS r_pila_operadores_push_menos exp
Rule 72    expciclo -> empty
Rule 73    termino -> factor r_pop_mult factorciclo
Rule 74    factorciclo -> MULT r_pila_operadores_push_mult termino
Rule 75    factorciclo -> DIV r_pila_operadores_push_div termino
Rule 76    factorciclo -> empty
Rule 77    factor -> PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
Rule 78    factor -> masomenos varcte
Rule 79    factor -> ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
Rule 80    masomenos -> MAS
Rule 81    masomenos -> MENOS
Rule 82    masomenos -> empty
Rule 83    opcionid -> PARIZQ r_era_funcion_retorno parametros r_terminar_parametro PARDER
Rule 84    opcionid -> arrexp_uno arrexp_dos
Rule 85    arrexp_uno -> CORIZQ r_push_arr expresion r_verifica_arrexp_uno CORDER
Rule 86    arrexp_uno -> empty
Rule 87    arrexp_dos -> CORIZQ r_push_arr expresion r_verifica_arrexp_dos CORDER
Rule 88    arrexp_dos -> empty
Rule 89    varcte -> iddim
Rule 90    varcte -> CTEI r_pila_operandos_push_cte_int
Rule 91    varcte -> CTEF r_pila_operandos_push_cte_flt
Rule 92    parametros -> expresion r_extraer_parametro cicloparametros
Rule 93    parametros -> empty
Rule 94    cicloparametros -> COMA expresion r_extraer_parametro cicloparametros
Rule 95    cicloparametros -> empty
Rule 96    llamadafunc -> ID r_verifica_void PARIZQ r_era_funcion_void parametros r_terminar_parametro_void PARDER PTOCOM
Rule 97    decision -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloque decision_else r_if_paso_3
Rule 98    decision_else -> ELSE r_if_paso_2 bloque
Rule 99    decision_else -> empty
Rule 100   escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM
Rule 101   escrituraciclo -> CTE_STRING r_genera_escribe_string
Rule 102   escrituraciclo -> expresion r_genera_escribe
Rule 103   otro -> COMA escrituraciclo otro
Rule 104   otro -> empty
Rule 105   lectura -> READ PARIZQ iddim r_genera_lectura ciclodim PARDER PTOCOM
Rule 106   ciclodim -> COMA iddim r_genera_lectura ciclodim
Rule 107   ciclodim -> empty
Rule 108   iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp
Rule 109   arrexp -> CORIZQ expresion CORDER
Rule 110   arrexp -> empty
Rule 111   repeticion -> condicional
Rule 112   repeticion -> nocondicional
Rule 113   condicional -> WHILE r_while_paso_1 PARIZQ expresion PARDER r_while_paso_2 DO bloque r_while_paso_3
Rule 114   nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2
Rule 115   decisionfunc -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloquefunc decisionfunc_else r_if_paso_3
Rule 116   decisionfunc_else -> ELSE r_if_paso_2 bloquefunc
Rule 117   decisionfunc_else -> empty
Rule 118   repeticionfunc -> condicionalfunc
Rule 119   repeticionfunc -> nocondicionalfunc
Rule 120   condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc
Rule 121   nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc
Rule 122   empty -> <empty>
Rule 123   r_register_gotomain -> <empty>
Rule 124   r_register_global -> <empty>
Rule 125   r_register_function -> <empty>
Rule 126   r_register_const -> <empty>
Rule 127   r_switch_to_global -> <empty>
Rule 128   r_update_curr_function_name_especial -> <empty>
Rule 129   r_update_curr_function_name -> <empty>
Rule 130   r_register_param_types -> <empty>
Rule 131   r_register_variable_type -> <empty>
Rule 132   r_update_func_type -> <empty>
Rule 133   r_register_quad -> <empty>
Rule 134   r_era_funcion_void -> <empty>
Rule 135   r_era_funcion_retorno -> <empty>
Rule 136   r_asegurar_return -> <empty>
Rule 137   r_terminar_parametro -> <empty>
Rule 138   r_terminar_parametro_void -> <empty>
Rule 139   r_extraer_parametro -> <empty>
Rule 140   r_verifica_void -> <empty>
Rule 141   r_marcar_funcion -> <empty>
Rule 142   r_desmarcar_funcion -> <empty>
Rule 143   r_endfunc -> <empty>
Rule 144   r_if_paso_1 -> <empty>
Rule 145   r_register_variable_name -> <empty>
Rule 146   r_arr_dim_uno -> <empty>
Rule 147   r_arr_dim_dos -> <empty>
Rule 148   r_verify_array -> <empty>
Rule 149   r_verifica_variable_existe -> <empty>
Rule 150   r_verifica_arrexp_uno -> <empty>
Rule 151   r_verifica_arrexp_dos -> <empty>
Rule 152   r_return_func -> <empty>
Rule 153   r_if_paso_2 -> <empty>
Rule 154   r_if_paso_3 -> <empty>
Rule 155   r_while_paso_1 -> <empty>
Rule 156   r_while_paso_2 -> <empty>
Rule 157   r_while_paso_3 -> <empty>
Rule 158   r_pop_igu_for -> <empty>
Rule 159   r_for_paso_1 -> <empty>
Rule 160   r_for_paso_2 -> <empty>
Rule 161   r_guardar_variable -> <empty>
Rule 162   r_pila_operandos_push -> <empty>
Rule 163   r_pila_operandos_push_id -> <empty>
Rule 164   r_pila_operandos_push_cte_int -> <empty>
Rule 165   r_pila_operandos_push_cte_flt -> <empty>
Rule 166   r_pop_mult -> <empty>
Rule 167   r_pop_mas -> <empty>
Rule 168   r_push_arr -> <empty>
Rule 169   r_genera_escribe -> <empty>
Rule 170   r_genera_lectura -> <empty>
Rule 171   r_genera_escribe_string -> <empty>
Rule 172   r_pop_comp -> <empty>
Rule 173   r_pop_igu -> <empty>
Rule 174   r_marcar_fondo_de_pila -> <empty>
Rule 175   r_desmarcar_fondo_de_pila -> <empty>
Rule 176   r_pila_operadores_push_mult -> <empty>
Rule 177   r_pila_operadores_push_div -> <empty>
Rule 178   r_pila_operadores_push_mas -> <empty>
Rule 179   r_pila_operadores_push_menos -> <empty>
Rule 180   r_pila_operadores_push_may -> <empty>
Rule 181   r_pila_operadores_push_men -> <empty>
Rule 182   r_pila_operadores_push_dif -> <empty>
Rule 183   r_pila_operadores_push_iguigu -> <empty>
Rule 184   r_pila_operadores_push_and -> <empty>
Rule 185   r_pila_operadores_push_or -> <empty>
Rule 186   r_pila_operadores_push_igu -> <empty>
Rule 187   r_pila_operadores_push_mayigu -> <empty>
Rule 188   r_pila_operadores_push_menigu -> <empty>
Rule 189   r_push_fondo_falso -> <empty>
Rule 190   r_vaciar_fondo_falso -> <empty>
Rule 191   r_register_dim -> <empty>

Terminals, with rules where they appear

AND                  : 62
CHAR                 : 21 24
COMA                 : 7 31 94 103 106
CORDER               : 9 11 13 35 85 87 109
CORIZQ               : 9 11 13 35 85 87 109
CTEF                 : 91
CTEI                 : 9 11 13 90
CTE_STRING           : 101
DIF                  : 60
DIV                  : 75
DO                   : 113 114 120 121
DOSPTS               : 
ELSE                 : 98 116
FLT                  : 20 23
FOR                  : 114 121
ID                   : 1 6 7 17 18 28 33 34 56 79 96 108
IF                   : 97 115
IGU                  : 56 67 114 121
IGUIGU               : 61
INT                  : 19 22
KEYDER               : 37 40
KEYIZQ               : 37 40
MAIN                 : 1
MAS                  : 70 80
MAY                  : 58
MAYIGU               : 64
MEN                  : 59
MENIGU               : 65
MENOS                : 71 81
MODULE               : 18 28 33
MULT                 : 74
OR                   : 63
PARDER               : 1 18 28 33 55 77 83 96 97 100 105 113 115 120
PARIZQ               : 1 18 28 33 55 77 83 96 97 100 105 113 115 120
PRO                  : 1
PTOCOM               : 1 6 17 55 56 96 100 105
READ                 : 105
RETURN               : 55
THEN                 : 97 115
TO                   : 114 121
VARTOKEN             : 6
VOID                 : 28
WHILE                : 113 120
WRITE                : 100
error                : 

Nonterminals, with rules where they appear

arr                  : 
arr_dos              : 6 7 17
arr_uno              : 6 7 17
arrexp               : 108 108
arrexp_dos           : 56 84
arrexp_uno           : 56 84
arrini               : 34 34
asignacion           : 43 49
bloque               : 1 28 97 98 113 114
bloquefunc           : 18 33 115 116 120 121
bloqueopcion         : 37 38
bloqueopcionfunc     : 40 41
ciclodim             : 105 106
cicloparametros      : 92 94
ciclovarsimple       : 29 31
condicional          : 111
condicionalfunc      : 118
decision             : 44
decision_else        : 97
decisionfunc         : 50
decisionfunc_else    : 115
empty                : 3 5 8 10 12 14 16 30 32 36 39 42 66 68 72 76 82 86 88 93 95 99 104 107 110 117
escritura            : 45 51
escrituraciclo       : 100 103
estatuto             : 38
estatutofunc         : 41
exp                  : 57 70 71
expciclo             : 69
expresion            : 55 56 58 59 60 61 62 63 64 65 77 85 87 92 94 97 102 109 113 114 114 115 120 121 121
expresionsig         : 57
expresionsigequal    : 58 59 64 65
factor               : 73
factorciclo          : 73
funcion              : 27
funciones            : 4
funcionvoid          : 26
iddim                : 89 105 106 114 121
ident                : 25
lectura              : 48 54
llamadafunc          : 46 52
masomenos            : 78
nocondicional        : 112
nocondicionalfunc    : 119
opcionid             : 79
opciontipo           : 15
opcionvarsimple      : 18 28 33
opfunciones          : 1 4
opvars               : 1 18 28 33
otro                 : 100 103
parametros           : 83 96
program              : 0
r_arr_dim_dos        : 13
r_arr_dim_uno        : 11
r_asegurar_return    : 18 33
r_desmarcar_fondo_de_pila : 77
r_desmarcar_funcion  : 18 28 33
r_endfunc            : 18 28 33
r_era_funcion_retorno : 83
r_era_funcion_void   : 96
r_extraer_parametro  : 92 94
r_for_paso_1         : 114
r_for_paso_2         : 114
r_genera_escribe     : 102
r_genera_escribe_string : 101
r_genera_lectura     : 105 106
r_guardar_variable   : 56 79
r_if_paso_1          : 97 115
r_if_paso_2          : 98 116
r_if_paso_3          : 97 115
r_marcar_fondo_de_pila : 77
r_marcar_funcion     : 18 28 33
r_pila_operadores_push_and : 62
r_pila_operadores_push_dif : 60
r_pila_operadores_push_div : 75
r_pila_operadores_push_igu : 56 114
r_pila_operadores_push_iguigu : 61
r_pila_operadores_push_mas : 70
r_pila_operadores_push_may : 58
r_pila_operadores_push_mayigu : 64
r_pila_operadores_push_men : 59
r_pila_operadores_push_menigu : 65
r_pila_operadores_push_menos : 71
r_pila_operadores_push_mult : 74
r_pila_operadores_push_or : 63
r_pila_operandos_push : 79
r_pila_operandos_push_cte_flt : 91
r_pila_operandos_push_cte_int : 90
r_pila_operandos_push_id : 56 108
r_pop_comp           : 57
r_pop_igu            : 56
r_pop_igu_for        : 114
r_pop_mas            : 69
r_pop_mult           : 73
r_push_arr           : 85 87
r_push_fondo_falso   : 
r_register_const     : 9
r_register_dim       : 
r_register_function  : 22 23 24 28
r_register_global    : 1
r_register_gotomain  : 1
r_register_param_types : 18 28 33
r_register_quad      : 18 28 33
r_register_variable_name : 6 7 17 34
r_register_variable_type : 19 20 21
r_return_func        : 55
r_switch_to_global   : 1
r_terminar_parametro : 83
r_terminar_parametro_void : 96
r_update_curr_function_name : 28 33
r_update_curr_function_name_especial : 18
r_update_func_type   : 18
r_vaciar_fondo_falso : 
r_verifica_arrexp_dos : 87
r_verifica_arrexp_uno : 85
r_verifica_variable_existe : 56 79 108
r_verifica_void      : 96
r_verify_array       : 6 7 17
r_while_paso_1       : 113
r_while_paso_2       : 113
r_while_paso_3       : 113
repeticion           : 47
repeticionfunc       : 53
termino              : 69 74 75
tipo                 : 6 15 25
tipo_func            : 33
tipociclo            : 6 17
varciclo             : 6 7 17
varcte               : 78
vars                 : 2
varsimple            : 29 31

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PRO r_register_gotomain ID r_register_global PTOCOM opvars opfunciones MAIN r_switch_to_global PARIZQ PARDER bloque

    PRO             shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PRO . r_register_gotomain ID r_register_global PTOCOM opvars opfunciones MAIN r_switch_to_global PARIZQ PARDER bloque
    (123) r_register_gotomain -> .

    ID              reduce using rule 123 (r_register_gotomain -> .)

    r_register_gotomain            shift and go to state 3

state 3

    (1) program -> PRO r_register_gotomain . ID r_register_global PTOCOM opvars opfunciones MAIN r_switch_to_global PARIZQ PARDER bloque

    ID              shift and go to state 4


state 4

    (1) program -> PRO r_register_gotomain ID . r_register_global PTOCOM opvars opfunciones MAIN r_switch_to_global PARIZQ PARDER bloque
    (124) r_register_global -> .

    PTOCOM          reduce using rule 124 (r_register_global -> .)

    r_register_global              shift and go to state 5

state 5

    (1) program -> PRO r_register_gotomain ID r_register_global . PTOCOM opvars opfunciones MAIN r_switch_to_global PARIZQ PARDER bloque

    PTOCOM          shift and go to state 6


state 6

    (1) program -> PRO r_register_gotomain ID r_register_global PTOCOM . opvars opfunciones MAIN r_switch_to_global PARIZQ PARDER bloque
    (2) opvars -> . vars
    (3) opvars -> . empty
    (6) vars -> . VARTOKEN tipo ID r_register_variable_name arr_uno arr_dos r_verify_array varciclo PTOCOM tipociclo
    (122) empty -> .

    VARTOKEN        shift and go to state 10
    VOID            reduce using rule 122 (empty -> .)
    INT             reduce using rule 122 (empty -> .)
    FLT             reduce using rule 122 (empty -> .)
    CHAR            reduce using rule 122 (empty -> .)
    MAIN            reduce using rule 122 (empty -> .)

    opvars                         shift and go to state 7
    vars                           shift and go to state 8
    empty                          shift and go to state 9

state 7

    (1) program -> PRO r_register_gotomain ID r_register_global PTOCOM opvars . opfunciones MAIN r_switch_to_global PARIZQ PARDER bloque
    (4) opfunciones -> . funciones opfunciones
    (5) opfunciones -> . empty
    (26) funciones -> . funcionvoid
    (27) funciones -> . funcion
    (122) empty -> .
    (28) funcionvoid -> . VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloque r_endfunc
    (33) funcion -> . tipo_func MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return
    (22) tipo_func -> . INT r_register_function
    (23) tipo_func -> . FLT r_register_function
    (24) tipo_func -> . CHAR r_register_function

    MAIN            reduce using rule 122 (empty -> .)
    VOID            shift and go to state 16
    INT             shift and go to state 18
    FLT             shift and go to state 19
    CHAR            shift and go to state 20

    opfunciones                    shift and go to state 11
    funciones                      shift and go to state 12
    empty                          shift and go to state 13
    funcionvoid                    shift and go to state 14
    funcion                        shift and go to state 15
    tipo_func                      shift and go to state 17

state 8

    (2) opvars -> vars .

    VOID            reduce using rule 2 (opvars -> vars .)
    INT             reduce using rule 2 (opvars -> vars .)
    FLT             reduce using rule 2 (opvars -> vars .)
    CHAR            reduce using rule 2 (opvars -> vars .)
    MAIN            reduce using rule 2 (opvars -> vars .)
    KEYIZQ          reduce using rule 2 (opvars -> vars .)


state 9

    (3) opvars -> empty .

    VOID            reduce using rule 3 (opvars -> empty .)
    INT             reduce using rule 3 (opvars -> empty .)
    FLT             reduce using rule 3 (opvars -> empty .)
    CHAR            reduce using rule 3 (opvars -> empty .)
    MAIN            reduce using rule 3 (opvars -> empty .)
    KEYIZQ          reduce using rule 3 (opvars -> empty .)


state 10

    (6) vars -> VARTOKEN . tipo ID r_register_variable_name arr_uno arr_dos r_verify_array varciclo PTOCOM tipociclo
    (19) tipo -> . INT r_register_variable_type
    (20) tipo -> . FLT r_register_variable_type
    (21) tipo -> . CHAR r_register_variable_type

    INT             shift and go to state 22
    FLT             shift and go to state 23
    CHAR            shift and go to state 24

    tipo                           shift and go to state 21

state 11

    (1) program -> PRO r_register_gotomain ID r_register_global PTOCOM opvars opfunciones . MAIN r_switch_to_global PARIZQ PARDER bloque

    MAIN            shift and go to state 25


state 12

    (4) opfunciones -> funciones . opfunciones
    (4) opfunciones -> . funciones opfunciones
    (5) opfunciones -> . empty
    (26) funciones -> . funcionvoid
    (27) funciones -> . funcion
    (122) empty -> .
    (28) funcionvoid -> . VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloque r_endfunc
    (33) funcion -> . tipo_func MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return
    (22) tipo_func -> . INT r_register_function
    (23) tipo_func -> . FLT r_register_function
    (24) tipo_func -> . CHAR r_register_function

    MAIN            reduce using rule 122 (empty -> .)
    VOID            shift and go to state 16
    INT             shift and go to state 18
    FLT             shift and go to state 19
    CHAR            shift and go to state 20

    funciones                      shift and go to state 12
    opfunciones                    shift and go to state 26
    empty                          shift and go to state 13
    funcionvoid                    shift and go to state 14
    funcion                        shift and go to state 15
    tipo_func                      shift and go to state 17

state 13

    (5) opfunciones -> empty .

    MAIN            reduce using rule 5 (opfunciones -> empty .)


state 14

    (26) funciones -> funcionvoid .

    VOID            reduce using rule 26 (funciones -> funcionvoid .)
    INT             reduce using rule 26 (funciones -> funcionvoid .)
    FLT             reduce using rule 26 (funciones -> funcionvoid .)
    CHAR            reduce using rule 26 (funciones -> funcionvoid .)
    MAIN            reduce using rule 26 (funciones -> funcionvoid .)


state 15

    (27) funciones -> funcion .

    VOID            reduce using rule 27 (funciones -> funcion .)
    INT             reduce using rule 27 (funciones -> funcion .)
    FLT             reduce using rule 27 (funciones -> funcion .)
    CHAR            reduce using rule 27 (funciones -> funcion .)
    MAIN            reduce using rule 27 (funciones -> funcion .)


state 16

    (28) funcionvoid -> VOID . r_register_function MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloque r_endfunc
    (125) r_register_function -> .

    MODULE          reduce using rule 125 (r_register_function -> .)

    r_register_function            shift and go to state 27

state 17

    (33) funcion -> tipo_func . MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return

    MODULE          shift and go to state 28


state 18

    (22) tipo_func -> INT . r_register_function
    (125) r_register_function -> .

    MODULE          reduce using rule 125 (r_register_function -> .)

    r_register_function            shift and go to state 29

state 19

    (23) tipo_func -> FLT . r_register_function
    (125) r_register_function -> .

    MODULE          reduce using rule 125 (r_register_function -> .)

    r_register_function            shift and go to state 30

state 20

    (24) tipo_func -> CHAR . r_register_function
    (125) r_register_function -> .

    MODULE          reduce using rule 125 (r_register_function -> .)

    r_register_function            shift and go to state 31

state 21

    (6) vars -> VARTOKEN tipo . ID r_register_variable_name arr_uno arr_dos r_verify_array varciclo PTOCOM tipociclo

    ID              shift and go to state 32


state 22

    (19) tipo -> INT . r_register_variable_type
    (131) r_register_variable_type -> .

    ID              reduce using rule 131 (r_register_variable_type -> .)
    MODULE          reduce using rule 131 (r_register_variable_type -> .)

    r_register_variable_type       shift and go to state 33

state 23

    (20) tipo -> FLT . r_register_variable_type
    (131) r_register_variable_type -> .

    ID              reduce using rule 131 (r_register_variable_type -> .)
    MODULE          reduce using rule 131 (r_register_variable_type -> .)

    r_register_variable_type       shift and go to state 34

state 24

    (21) tipo -> CHAR . r_register_variable_type
    (131) r_register_variable_type -> .

    ID              reduce using rule 131 (r_register_variable_type -> .)
    MODULE          reduce using rule 131 (r_register_variable_type -> .)

    r_register_variable_type       shift and go to state 35

state 25

    (1) program -> PRO r_register_gotomain ID r_register_global PTOCOM opvars opfunciones MAIN . r_switch_to_global PARIZQ PARDER bloque
    (127) r_switch_to_global -> .

    PARIZQ          reduce using rule 127 (r_switch_to_global -> .)

    r_switch_to_global             shift and go to state 36

state 26

    (4) opfunciones -> funciones opfunciones .

    MAIN            reduce using rule 4 (opfunciones -> funciones opfunciones .)


state 27

    (28) funcionvoid -> VOID r_register_function . MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloque r_endfunc

    MODULE          shift and go to state 37


state 28

    (33) funcion -> tipo_func MODULE . ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return

    ID              shift and go to state 38


state 29

    (22) tipo_func -> INT r_register_function .

    MODULE          reduce using rule 22 (tipo_func -> INT r_register_function .)


state 30

    (23) tipo_func -> FLT r_register_function .

    MODULE          reduce using rule 23 (tipo_func -> FLT r_register_function .)


state 31

    (24) tipo_func -> CHAR r_register_function .

    MODULE          reduce using rule 24 (tipo_func -> CHAR r_register_function .)


state 32

    (6) vars -> VARTOKEN tipo ID . r_register_variable_name arr_uno arr_dos r_verify_array varciclo PTOCOM tipociclo
    (145) r_register_variable_name -> .

    CORIZQ          reduce using rule 145 (r_register_variable_name -> .)
    COMA            reduce using rule 145 (r_register_variable_name -> .)
    PTOCOM          reduce using rule 145 (r_register_variable_name -> .)

    r_register_variable_name       shift and go to state 39

state 33

    (19) tipo -> INT r_register_variable_type .

    ID              reduce using rule 19 (tipo -> INT r_register_variable_type .)
    MODULE          reduce using rule 19 (tipo -> INT r_register_variable_type .)


state 34

    (20) tipo -> FLT r_register_variable_type .

    ID              reduce using rule 20 (tipo -> FLT r_register_variable_type .)
    MODULE          reduce using rule 20 (tipo -> FLT r_register_variable_type .)


state 35

    (21) tipo -> CHAR r_register_variable_type .

    ID              reduce using rule 21 (tipo -> CHAR r_register_variable_type .)
    MODULE          reduce using rule 21 (tipo -> CHAR r_register_variable_type .)


state 36

    (1) program -> PRO r_register_gotomain ID r_register_global PTOCOM opvars opfunciones MAIN r_switch_to_global . PARIZQ PARDER bloque

    PARIZQ          shift and go to state 40


state 37

    (28) funcionvoid -> VOID r_register_function MODULE . ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloque r_endfunc

    ID              shift and go to state 41


state 38

    (33) funcion -> tipo_func MODULE ID . r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return
    (129) r_update_curr_function_name -> .

    PARIZQ          reduce using rule 129 (r_update_curr_function_name -> .)

    r_update_curr_function_name    shift and go to state 42

state 39

    (6) vars -> VARTOKEN tipo ID r_register_variable_name . arr_uno arr_dos r_verify_array varciclo PTOCOM tipociclo
    (11) arr_uno -> . CORIZQ CTEI r_arr_dim_uno CORDER
    (12) arr_uno -> . empty
    (122) empty -> .

  ! shift/reduce conflict for CORIZQ resolved as shift
    CORIZQ          shift and go to state 44
    COMA            reduce using rule 122 (empty -> .)
    PTOCOM          reduce using rule 122 (empty -> .)

  ! CORIZQ          [ reduce using rule 122 (empty -> .) ]

    arr_uno                        shift and go to state 43
    empty                          shift and go to state 45

state 40

    (1) program -> PRO r_register_gotomain ID r_register_global PTOCOM opvars opfunciones MAIN r_switch_to_global PARIZQ . PARDER bloque

    PARDER          shift and go to state 46


state 41

    (28) funcionvoid -> VOID r_register_function MODULE ID . r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloque r_endfunc
    (129) r_update_curr_function_name -> .

    PARIZQ          reduce using rule 129 (r_update_curr_function_name -> .)

    r_update_curr_function_name    shift and go to state 47

state 42

    (33) funcion -> tipo_func MODULE ID r_update_curr_function_name . PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return

    PARIZQ          shift and go to state 48


state 43

    (6) vars -> VARTOKEN tipo ID r_register_variable_name arr_uno . arr_dos r_verify_array varciclo PTOCOM tipociclo
    (13) arr_dos -> . CORIZQ CTEI r_arr_dim_dos CORDER
    (14) arr_dos -> . empty
    (122) empty -> .

    CORIZQ          shift and go to state 50
    COMA            reduce using rule 122 (empty -> .)
    PTOCOM          reduce using rule 122 (empty -> .)

    arr_dos                        shift and go to state 49
    empty                          shift and go to state 51

state 44

    (11) arr_uno -> CORIZQ . CTEI r_arr_dim_uno CORDER

    CTEI            shift and go to state 52


state 45

    (12) arr_uno -> empty .

    CORIZQ          reduce using rule 12 (arr_uno -> empty .)
    COMA            reduce using rule 12 (arr_uno -> empty .)
    PTOCOM          reduce using rule 12 (arr_uno -> empty .)


state 46

    (1) program -> PRO r_register_gotomain ID r_register_global PTOCOM opvars opfunciones MAIN r_switch_to_global PARIZQ PARDER . bloque
    (37) bloque -> . KEYIZQ bloqueopcion KEYDER

    KEYIZQ          shift and go to state 54

    bloque                         shift and go to state 53

state 47

    (28) funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name . PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloque r_endfunc

    PARIZQ          shift and go to state 55


state 48

    (33) funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ . r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return
    (141) r_marcar_funcion -> .

    INT             reduce using rule 141 (r_marcar_funcion -> .)
    FLT             reduce using rule 141 (r_marcar_funcion -> .)
    CHAR            reduce using rule 141 (r_marcar_funcion -> .)
    PARDER          reduce using rule 141 (r_marcar_funcion -> .)

    r_marcar_funcion               shift and go to state 56

state 49

    (6) vars -> VARTOKEN tipo ID r_register_variable_name arr_uno arr_dos . r_verify_array varciclo PTOCOM tipociclo
    (148) r_verify_array -> .

    COMA            reduce using rule 148 (r_verify_array -> .)
    PTOCOM          reduce using rule 148 (r_verify_array -> .)

    r_verify_array                 shift and go to state 57

state 50

    (13) arr_dos -> CORIZQ . CTEI r_arr_dim_dos CORDER

    CTEI            shift and go to state 58


state 51

    (14) arr_dos -> empty .

    COMA            reduce using rule 14 (arr_dos -> empty .)
    PTOCOM          reduce using rule 14 (arr_dos -> empty .)


state 52

    (11) arr_uno -> CORIZQ CTEI . r_arr_dim_uno CORDER
    (146) r_arr_dim_uno -> .

    CORDER          reduce using rule 146 (r_arr_dim_uno -> .)

    r_arr_dim_uno                  shift and go to state 59

state 53

    (1) program -> PRO r_register_gotomain ID r_register_global PTOCOM opvars opfunciones MAIN r_switch_to_global PARIZQ PARDER bloque .

    $end            reduce using rule 1 (program -> PRO r_register_gotomain ID r_register_global PTOCOM opvars opfunciones MAIN r_switch_to_global PARIZQ PARDER bloque .)


state 54

    (37) bloque -> KEYIZQ . bloqueopcion KEYDER
    (38) bloqueopcion -> . estatuto bloqueopcion
    (39) bloqueopcion -> . empty
    (43) estatuto -> . asignacion
    (44) estatuto -> . decision
    (45) estatuto -> . escritura
    (46) estatuto -> . llamadafunc
    (47) estatuto -> . repeticion
    (48) estatuto -> . lectura
    (122) empty -> .
    (56) asignacion -> . ID r_verifica_variable_existe r_guardar_variable arrexp_uno arrexp_dos r_pila_operandos_push_id IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM
    (97) decision -> . IF PARIZQ expresion PARDER r_if_paso_1 THEN bloque decision_else r_if_paso_3
    (100) escritura -> . WRITE PARIZQ escrituraciclo otro PARDER PTOCOM
    (96) llamadafunc -> . ID r_verifica_void PARIZQ r_era_funcion_void parametros r_terminar_parametro_void PARDER PTOCOM
    (111) repeticion -> . condicional
    (112) repeticion -> . nocondicional
    (105) lectura -> . READ PARIZQ iddim r_genera_lectura ciclodim PARDER PTOCOM
    (113) condicional -> . WHILE r_while_paso_1 PARIZQ expresion PARDER r_while_paso_2 DO bloque r_while_paso_3
    (114) nocondicional -> . FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2

    KEYDER          reduce using rule 122 (empty -> .)
    ID              shift and go to state 69
    IF              shift and go to state 70
    WRITE           shift and go to state 71
    READ            shift and go to state 74
    WHILE           shift and go to state 75
    FOR             shift and go to state 76

    bloqueopcion                   shift and go to state 60
    estatuto                       shift and go to state 61
    empty                          shift and go to state 62
    asignacion                     shift and go to state 63
    decision                       shift and go to state 64
    escritura                      shift and go to state 65
    llamadafunc                    shift and go to state 66
    repeticion                     shift and go to state 67
    lectura                        shift and go to state 68
    condicional                    shift and go to state 72
    nocondicional                  shift and go to state 73

state 55

    (28) funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ . r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloque r_endfunc
    (141) r_marcar_funcion -> .

    INT             reduce using rule 141 (r_marcar_funcion -> .)
    FLT             reduce using rule 141 (r_marcar_funcion -> .)
    CHAR            reduce using rule 141 (r_marcar_funcion -> .)
    PARDER          reduce using rule 141 (r_marcar_funcion -> .)

    r_marcar_funcion               shift and go to state 77

state 56

    (33) funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion . opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return
    (29) opcionvarsimple -> . varsimple ciclovarsimple
    (30) opcionvarsimple -> . empty
    (25) varsimple -> . tipo ident
    (122) empty -> .
    (19) tipo -> . INT r_register_variable_type
    (20) tipo -> . FLT r_register_variable_type
    (21) tipo -> . CHAR r_register_variable_type

    PARDER          reduce using rule 122 (empty -> .)
    INT             shift and go to state 22
    FLT             shift and go to state 23
    CHAR            shift and go to state 24

    opcionvarsimple                shift and go to state 78
    varsimple                      shift and go to state 79
    empty                          shift and go to state 80
    tipo                           shift and go to state 81

state 57

    (6) vars -> VARTOKEN tipo ID r_register_variable_name arr_uno arr_dos r_verify_array . varciclo PTOCOM tipociclo
    (7) varciclo -> . COMA ID r_register_variable_name arr_uno arr_dos r_verify_array varciclo
    (8) varciclo -> . empty
    (122) empty -> .

    COMA            shift and go to state 83
    PTOCOM          reduce using rule 122 (empty -> .)

    varciclo                       shift and go to state 82
    empty                          shift and go to state 84

state 58

    (13) arr_dos -> CORIZQ CTEI . r_arr_dim_dos CORDER
    (147) r_arr_dim_dos -> .

    CORDER          reduce using rule 147 (r_arr_dim_dos -> .)

    r_arr_dim_dos                  shift and go to state 85

state 59

    (11) arr_uno -> CORIZQ CTEI r_arr_dim_uno . CORDER

    CORDER          shift and go to state 86


state 60

    (37) bloque -> KEYIZQ bloqueopcion . KEYDER

    KEYDER          shift and go to state 87


state 61

    (38) bloqueopcion -> estatuto . bloqueopcion
    (38) bloqueopcion -> . estatuto bloqueopcion
    (39) bloqueopcion -> . empty
    (43) estatuto -> . asignacion
    (44) estatuto -> . decision
    (45) estatuto -> . escritura
    (46) estatuto -> . llamadafunc
    (47) estatuto -> . repeticion
    (48) estatuto -> . lectura
    (122) empty -> .
    (56) asignacion -> . ID r_verifica_variable_existe r_guardar_variable arrexp_uno arrexp_dos r_pila_operandos_push_id IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM
    (97) decision -> . IF PARIZQ expresion PARDER r_if_paso_1 THEN bloque decision_else r_if_paso_3
    (100) escritura -> . WRITE PARIZQ escrituraciclo otro PARDER PTOCOM
    (96) llamadafunc -> . ID r_verifica_void PARIZQ r_era_funcion_void parametros r_terminar_parametro_void PARDER PTOCOM
    (111) repeticion -> . condicional
    (112) repeticion -> . nocondicional
    (105) lectura -> . READ PARIZQ iddim r_genera_lectura ciclodim PARDER PTOCOM
    (113) condicional -> . WHILE r_while_paso_1 PARIZQ expresion PARDER r_while_paso_2 DO bloque r_while_paso_3
    (114) nocondicional -> . FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2

    KEYDER          reduce using rule 122 (empty -> .)
    ID              shift and go to state 69
    IF              shift and go to state 70
    WRITE           shift and go to state 71
    READ            shift and go to state 74
    WHILE           shift and go to state 75
    FOR             shift and go to state 76

    estatuto                       shift and go to state 61
    bloqueopcion                   shift and go to state 88
    empty                          shift and go to state 62
    asignacion                     shift and go to state 63
    decision                       shift and go to state 64
    escritura                      shift and go to state 65
    llamadafunc                    shift and go to state 66
    repeticion                     shift and go to state 67
    lectura                        shift and go to state 68
    condicional                    shift and go to state 72
    nocondicional                  shift and go to state 73

state 62

    (39) bloqueopcion -> empty .

    KEYDER          reduce using rule 39 (bloqueopcion -> empty .)


state 63

    (43) estatuto -> asignacion .

    ID              reduce using rule 43 (estatuto -> asignacion .)
    IF              reduce using rule 43 (estatuto -> asignacion .)
    WRITE           reduce using rule 43 (estatuto -> asignacion .)
    READ            reduce using rule 43 (estatuto -> asignacion .)
    WHILE           reduce using rule 43 (estatuto -> asignacion .)
    FOR             reduce using rule 43 (estatuto -> asignacion .)
    KEYDER          reduce using rule 43 (estatuto -> asignacion .)


state 64

    (44) estatuto -> decision .

    ID              reduce using rule 44 (estatuto -> decision .)
    IF              reduce using rule 44 (estatuto -> decision .)
    WRITE           reduce using rule 44 (estatuto -> decision .)
    READ            reduce using rule 44 (estatuto -> decision .)
    WHILE           reduce using rule 44 (estatuto -> decision .)
    FOR             reduce using rule 44 (estatuto -> decision .)
    KEYDER          reduce using rule 44 (estatuto -> decision .)


state 65

    (45) estatuto -> escritura .

    ID              reduce using rule 45 (estatuto -> escritura .)
    IF              reduce using rule 45 (estatuto -> escritura .)
    WRITE           reduce using rule 45 (estatuto -> escritura .)
    READ            reduce using rule 45 (estatuto -> escritura .)
    WHILE           reduce using rule 45 (estatuto -> escritura .)
    FOR             reduce using rule 45 (estatuto -> escritura .)
    KEYDER          reduce using rule 45 (estatuto -> escritura .)


state 66

    (46) estatuto -> llamadafunc .

    ID              reduce using rule 46 (estatuto -> llamadafunc .)
    IF              reduce using rule 46 (estatuto -> llamadafunc .)
    WRITE           reduce using rule 46 (estatuto -> llamadafunc .)
    READ            reduce using rule 46 (estatuto -> llamadafunc .)
    WHILE           reduce using rule 46 (estatuto -> llamadafunc .)
    FOR             reduce using rule 46 (estatuto -> llamadafunc .)
    KEYDER          reduce using rule 46 (estatuto -> llamadafunc .)


state 67

    (47) estatuto -> repeticion .

    ID              reduce using rule 47 (estatuto -> repeticion .)
    IF              reduce using rule 47 (estatuto -> repeticion .)
    WRITE           reduce using rule 47 (estatuto -> repeticion .)
    READ            reduce using rule 47 (estatuto -> repeticion .)
    WHILE           reduce using rule 47 (estatuto -> repeticion .)
    FOR             reduce using rule 47 (estatuto -> repeticion .)
    KEYDER          reduce using rule 47 (estatuto -> repeticion .)


state 68

    (48) estatuto -> lectura .

    ID              reduce using rule 48 (estatuto -> lectura .)
    IF              reduce using rule 48 (estatuto -> lectura .)
    WRITE           reduce using rule 48 (estatuto -> lectura .)
    READ            reduce using rule 48 (estatuto -> lectura .)
    WHILE           reduce using rule 48 (estatuto -> lectura .)
    FOR             reduce using rule 48 (estatuto -> lectura .)
    KEYDER          reduce using rule 48 (estatuto -> lectura .)


state 69

    (56) asignacion -> ID . r_verifica_variable_existe r_guardar_variable arrexp_uno arrexp_dos r_pila_operandos_push_id IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM
    (96) llamadafunc -> ID . r_verifica_void PARIZQ r_era_funcion_void parametros r_terminar_parametro_void PARDER PTOCOM
    (149) r_verifica_variable_existe -> .
    (140) r_verifica_void -> .

    CORIZQ          reduce using rule 149 (r_verifica_variable_existe -> .)
    IGU             reduce using rule 149 (r_verifica_variable_existe -> .)
    PARIZQ          reduce using rule 140 (r_verifica_void -> .)

    r_verifica_variable_existe     shift and go to state 89
    r_verifica_void                shift and go to state 90

state 70

    (97) decision -> IF . PARIZQ expresion PARDER r_if_paso_1 THEN bloque decision_else r_if_paso_3

    PARIZQ          shift and go to state 91


state 71

    (100) escritura -> WRITE . PARIZQ escrituraciclo otro PARDER PTOCOM

    PARIZQ          shift and go to state 92


state 72

    (111) repeticion -> condicional .

    ID              reduce using rule 111 (repeticion -> condicional .)
    IF              reduce using rule 111 (repeticion -> condicional .)
    WRITE           reduce using rule 111 (repeticion -> condicional .)
    READ            reduce using rule 111 (repeticion -> condicional .)
    WHILE           reduce using rule 111 (repeticion -> condicional .)
    FOR             reduce using rule 111 (repeticion -> condicional .)
    KEYDER          reduce using rule 111 (repeticion -> condicional .)


state 73

    (112) repeticion -> nocondicional .

    ID              reduce using rule 112 (repeticion -> nocondicional .)
    IF              reduce using rule 112 (repeticion -> nocondicional .)
    WRITE           reduce using rule 112 (repeticion -> nocondicional .)
    READ            reduce using rule 112 (repeticion -> nocondicional .)
    WHILE           reduce using rule 112 (repeticion -> nocondicional .)
    FOR             reduce using rule 112 (repeticion -> nocondicional .)
    KEYDER          reduce using rule 112 (repeticion -> nocondicional .)


state 74

    (105) lectura -> READ . PARIZQ iddim r_genera_lectura ciclodim PARDER PTOCOM

    PARIZQ          shift and go to state 93


state 75

    (113) condicional -> WHILE . r_while_paso_1 PARIZQ expresion PARDER r_while_paso_2 DO bloque r_while_paso_3
    (155) r_while_paso_1 -> .

    PARIZQ          reduce using rule 155 (r_while_paso_1 -> .)

    r_while_paso_1                 shift and go to state 94

state 76

    (114) nocondicional -> FOR . iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2
    (108) iddim -> . ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp

    ID              shift and go to state 96

    iddim                          shift and go to state 95

state 77

    (28) funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion . opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloque r_endfunc
    (29) opcionvarsimple -> . varsimple ciclovarsimple
    (30) opcionvarsimple -> . empty
    (25) varsimple -> . tipo ident
    (122) empty -> .
    (19) tipo -> . INT r_register_variable_type
    (20) tipo -> . FLT r_register_variable_type
    (21) tipo -> . CHAR r_register_variable_type

    PARDER          reduce using rule 122 (empty -> .)
    INT             shift and go to state 22
    FLT             shift and go to state 23
    CHAR            shift and go to state 24

    opcionvarsimple                shift and go to state 97
    varsimple                      shift and go to state 79
    empty                          shift and go to state 80
    tipo                           shift and go to state 81

state 78

    (33) funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple . r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return
    (142) r_desmarcar_funcion -> .

    PARDER          reduce using rule 142 (r_desmarcar_funcion -> .)

    r_desmarcar_funcion            shift and go to state 98

state 79

    (29) opcionvarsimple -> varsimple . ciclovarsimple
    (31) ciclovarsimple -> . COMA varsimple ciclovarsimple
    (32) ciclovarsimple -> . empty
    (122) empty -> .

    COMA            shift and go to state 100
    PARDER          reduce using rule 122 (empty -> .)

    ciclovarsimple                 shift and go to state 99
    empty                          shift and go to state 101

state 80

    (30) opcionvarsimple -> empty .

    PARDER          reduce using rule 30 (opcionvarsimple -> empty .)


state 81

    (25) varsimple -> tipo . ident
    (34) ident -> . ID r_register_variable_name arrini arrini

    ID              shift and go to state 103

    ident                          shift and go to state 102

state 82

    (6) vars -> VARTOKEN tipo ID r_register_variable_name arr_uno arr_dos r_verify_array varciclo . PTOCOM tipociclo

    PTOCOM          shift and go to state 104


state 83

    (7) varciclo -> COMA . ID r_register_variable_name arr_uno arr_dos r_verify_array varciclo

    ID              shift and go to state 105


state 84

    (8) varciclo -> empty .

    PTOCOM          reduce using rule 8 (varciclo -> empty .)


state 85

    (13) arr_dos -> CORIZQ CTEI r_arr_dim_dos . CORDER

    CORDER          shift and go to state 106


state 86

    (11) arr_uno -> CORIZQ CTEI r_arr_dim_uno CORDER .

    CORIZQ          reduce using rule 11 (arr_uno -> CORIZQ CTEI r_arr_dim_uno CORDER .)
    COMA            reduce using rule 11 (arr_uno -> CORIZQ CTEI r_arr_dim_uno CORDER .)
    PTOCOM          reduce using rule 11 (arr_uno -> CORIZQ CTEI r_arr_dim_uno CORDER .)


state 87

    (37) bloque -> KEYIZQ bloqueopcion KEYDER .

    $end            reduce using rule 37 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    ELSE            reduce using rule 37 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    ID              reduce using rule 37 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    IF              reduce using rule 37 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    WRITE           reduce using rule 37 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    READ            reduce using rule 37 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    WHILE           reduce using rule 37 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    FOR             reduce using rule 37 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    KEYDER          reduce using rule 37 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    VOID            reduce using rule 37 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    INT             reduce using rule 37 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    FLT             reduce using rule 37 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    CHAR            reduce using rule 37 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    MAIN            reduce using rule 37 (bloque -> KEYIZQ bloqueopcion KEYDER .)


state 88

    (38) bloqueopcion -> estatuto bloqueopcion .

    KEYDER          reduce using rule 38 (bloqueopcion -> estatuto bloqueopcion .)


state 89

    (56) asignacion -> ID r_verifica_variable_existe . r_guardar_variable arrexp_uno arrexp_dos r_pila_operandos_push_id IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM
    (161) r_guardar_variable -> .

    CORIZQ          reduce using rule 161 (r_guardar_variable -> .)
    IGU             reduce using rule 161 (r_guardar_variable -> .)

    r_guardar_variable             shift and go to state 107

state 90

    (96) llamadafunc -> ID r_verifica_void . PARIZQ r_era_funcion_void parametros r_terminar_parametro_void PARDER PTOCOM

    PARIZQ          shift and go to state 108


state 91

    (97) decision -> IF PARIZQ . expresion PARDER r_if_paso_1 THEN bloque decision_else r_if_paso_3
    (57) expresion -> . exp r_pop_comp expresionsig
    (69) exp -> . termino r_pop_mas expciclo
    (73) termino -> . factor r_pop_mult factorciclo
    (77) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (78) factor -> . masomenos varcte
    (79) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (80) masomenos -> . MAS
    (81) masomenos -> . MENOS
    (82) masomenos -> . empty
    (122) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 109
    ID              shift and go to state 115
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    CTEI            reduce using rule 122 (empty -> .)
    CTEF            reduce using rule 122 (empty -> .)

  ! ID              [ reduce using rule 122 (empty -> .) ]

    expresion                      shift and go to state 110
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    masomenos                      shift and go to state 114
    empty                          shift and go to state 118

state 92

    (100) escritura -> WRITE PARIZQ . escrituraciclo otro PARDER PTOCOM
    (101) escrituraciclo -> . CTE_STRING r_genera_escribe_string
    (102) escrituraciclo -> . expresion r_genera_escribe
    (57) expresion -> . exp r_pop_comp expresionsig
    (69) exp -> . termino r_pop_mas expciclo
    (73) termino -> . factor r_pop_mult factorciclo
    (77) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (78) factor -> . masomenos varcte
    (79) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (80) masomenos -> . MAS
    (81) masomenos -> . MENOS
    (82) masomenos -> . empty
    (122) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    CTE_STRING      shift and go to state 120
    PARIZQ          shift and go to state 109
    ID              shift and go to state 115
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    CTEI            reduce using rule 122 (empty -> .)
    CTEF            reduce using rule 122 (empty -> .)

  ! ID              [ reduce using rule 122 (empty -> .) ]

    escrituraciclo                 shift and go to state 119
    expresion                      shift and go to state 121
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    masomenos                      shift and go to state 114
    empty                          shift and go to state 118

state 93

    (105) lectura -> READ PARIZQ . iddim r_genera_lectura ciclodim PARDER PTOCOM
    (108) iddim -> . ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp

    ID              shift and go to state 96

    iddim                          shift and go to state 122

state 94

    (113) condicional -> WHILE r_while_paso_1 . PARIZQ expresion PARDER r_while_paso_2 DO bloque r_while_paso_3

    PARIZQ          shift and go to state 123


state 95

    (114) nocondicional -> FOR iddim . IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2

    IGU             shift and go to state 124


state 96

    (108) iddim -> ID . r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp
    (149) r_verifica_variable_existe -> .

    CORIZQ          reduce using rule 149 (r_verifica_variable_existe -> .)
    IGU             reduce using rule 149 (r_verifica_variable_existe -> .)
    COMA            reduce using rule 149 (r_verifica_variable_existe -> .)
    PARDER          reduce using rule 149 (r_verifica_variable_existe -> .)
    MULT            reduce using rule 149 (r_verifica_variable_existe -> .)
    DIV             reduce using rule 149 (r_verifica_variable_existe -> .)
    MAS             reduce using rule 149 (r_verifica_variable_existe -> .)
    MENOS           reduce using rule 149 (r_verifica_variable_existe -> .)
    MAY             reduce using rule 149 (r_verifica_variable_existe -> .)
    MEN             reduce using rule 149 (r_verifica_variable_existe -> .)
    DIF             reduce using rule 149 (r_verifica_variable_existe -> .)
    IGUIGU          reduce using rule 149 (r_verifica_variable_existe -> .)
    AND             reduce using rule 149 (r_verifica_variable_existe -> .)
    OR              reduce using rule 149 (r_verifica_variable_existe -> .)
    MAYIGU          reduce using rule 149 (r_verifica_variable_existe -> .)
    MENIGU          reduce using rule 149 (r_verifica_variable_existe -> .)
    TO              reduce using rule 149 (r_verifica_variable_existe -> .)
    CORDER          reduce using rule 149 (r_verifica_variable_existe -> .)
    DO              reduce using rule 149 (r_verifica_variable_existe -> .)
    PTOCOM          reduce using rule 149 (r_verifica_variable_existe -> .)

    r_verifica_variable_existe     shift and go to state 125

state 97

    (28) funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple . r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloque r_endfunc
    (142) r_desmarcar_funcion -> .

    PARDER          reduce using rule 142 (r_desmarcar_funcion -> .)

    r_desmarcar_funcion            shift and go to state 126

state 98

    (33) funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion . PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return

    PARDER          shift and go to state 127


state 99

    (29) opcionvarsimple -> varsimple ciclovarsimple .

    PARDER          reduce using rule 29 (opcionvarsimple -> varsimple ciclovarsimple .)


state 100

    (31) ciclovarsimple -> COMA . varsimple ciclovarsimple
    (25) varsimple -> . tipo ident
    (19) tipo -> . INT r_register_variable_type
    (20) tipo -> . FLT r_register_variable_type
    (21) tipo -> . CHAR r_register_variable_type

    INT             shift and go to state 22
    FLT             shift and go to state 23
    CHAR            shift and go to state 24

    varsimple                      shift and go to state 128
    tipo                           shift and go to state 81

state 101

    (32) ciclovarsimple -> empty .

    PARDER          reduce using rule 32 (ciclovarsimple -> empty .)


state 102

    (25) varsimple -> tipo ident .

    COMA            reduce using rule 25 (varsimple -> tipo ident .)
    PARDER          reduce using rule 25 (varsimple -> tipo ident .)


state 103

    (34) ident -> ID . r_register_variable_name arrini arrini
    (145) r_register_variable_name -> .

    CORIZQ          reduce using rule 145 (r_register_variable_name -> .)
    COMA            reduce using rule 145 (r_register_variable_name -> .)
    PARDER          reduce using rule 145 (r_register_variable_name -> .)

    r_register_variable_name       shift and go to state 129

state 104

    (6) vars -> VARTOKEN tipo ID r_register_variable_name arr_uno arr_dos r_verify_array varciclo PTOCOM . tipociclo
    (15) tipociclo -> . tipo opciontipo
    (16) tipociclo -> . empty
    (19) tipo -> . INT r_register_variable_type
    (20) tipo -> . FLT r_register_variable_type
    (21) tipo -> . CHAR r_register_variable_type
    (122) empty -> .

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    INT             shift and go to state 22
    FLT             shift and go to state 23
    CHAR            shift and go to state 24
    VOID            reduce using rule 122 (empty -> .)
    MAIN            reduce using rule 122 (empty -> .)
    KEYIZQ          reduce using rule 122 (empty -> .)

  ! INT             [ reduce using rule 122 (empty -> .) ]
  ! FLT             [ reduce using rule 122 (empty -> .) ]
  ! CHAR            [ reduce using rule 122 (empty -> .) ]

    tipo                           shift and go to state 130
    tipociclo                      shift and go to state 131
    empty                          shift and go to state 132

state 105

    (7) varciclo -> COMA ID . r_register_variable_name arr_uno arr_dos r_verify_array varciclo
    (145) r_register_variable_name -> .

    CORIZQ          reduce using rule 145 (r_register_variable_name -> .)
    COMA            reduce using rule 145 (r_register_variable_name -> .)
    PTOCOM          reduce using rule 145 (r_register_variable_name -> .)

    r_register_variable_name       shift and go to state 133

state 106

    (13) arr_dos -> CORIZQ CTEI r_arr_dim_dos CORDER .

    COMA            reduce using rule 13 (arr_dos -> CORIZQ CTEI r_arr_dim_dos CORDER .)
    PTOCOM          reduce using rule 13 (arr_dos -> CORIZQ CTEI r_arr_dim_dos CORDER .)


state 107

    (56) asignacion -> ID r_verifica_variable_existe r_guardar_variable . arrexp_uno arrexp_dos r_pila_operandos_push_id IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM
    (85) arrexp_uno -> . CORIZQ r_push_arr expresion r_verifica_arrexp_uno CORDER
    (86) arrexp_uno -> . empty
    (122) empty -> .

  ! shift/reduce conflict for CORIZQ resolved as shift
    CORIZQ          shift and go to state 135
    IGU             reduce using rule 122 (empty -> .)

  ! CORIZQ          [ reduce using rule 122 (empty -> .) ]

    arrexp_uno                     shift and go to state 134
    empty                          shift and go to state 136

state 108

    (96) llamadafunc -> ID r_verifica_void PARIZQ . r_era_funcion_void parametros r_terminar_parametro_void PARDER PTOCOM
    (134) r_era_funcion_void -> .

    PARIZQ          reduce using rule 134 (r_era_funcion_void -> .)
    ID              reduce using rule 134 (r_era_funcion_void -> .)
    MAS             reduce using rule 134 (r_era_funcion_void -> .)
    MENOS           reduce using rule 134 (r_era_funcion_void -> .)
    PARDER          reduce using rule 134 (r_era_funcion_void -> .)
    CTEI            reduce using rule 134 (r_era_funcion_void -> .)
    CTEF            reduce using rule 134 (r_era_funcion_void -> .)

    r_era_funcion_void             shift and go to state 137

state 109

    (77) factor -> PARIZQ . r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (174) r_marcar_fondo_de_pila -> .

    PARIZQ          reduce using rule 174 (r_marcar_fondo_de_pila -> .)
    ID              reduce using rule 174 (r_marcar_fondo_de_pila -> .)
    MAS             reduce using rule 174 (r_marcar_fondo_de_pila -> .)
    MENOS           reduce using rule 174 (r_marcar_fondo_de_pila -> .)
    CTEI            reduce using rule 174 (r_marcar_fondo_de_pila -> .)
    CTEF            reduce using rule 174 (r_marcar_fondo_de_pila -> .)

    r_marcar_fondo_de_pila         shift and go to state 138

state 110

    (97) decision -> IF PARIZQ expresion . PARDER r_if_paso_1 THEN bloque decision_else r_if_paso_3

    PARDER          shift and go to state 139


state 111

    (57) expresion -> exp . r_pop_comp expresionsig
    (172) r_pop_comp -> .

    MAY             reduce using rule 172 (r_pop_comp -> .)
    MEN             reduce using rule 172 (r_pop_comp -> .)
    DIF             reduce using rule 172 (r_pop_comp -> .)
    IGUIGU          reduce using rule 172 (r_pop_comp -> .)
    AND             reduce using rule 172 (r_pop_comp -> .)
    OR              reduce using rule 172 (r_pop_comp -> .)
    MAYIGU          reduce using rule 172 (r_pop_comp -> .)
    MENIGU          reduce using rule 172 (r_pop_comp -> .)
    PARDER          reduce using rule 172 (r_pop_comp -> .)
    COMA            reduce using rule 172 (r_pop_comp -> .)
    TO              reduce using rule 172 (r_pop_comp -> .)
    CORDER          reduce using rule 172 (r_pop_comp -> .)
    DO              reduce using rule 172 (r_pop_comp -> .)
    PTOCOM          reduce using rule 172 (r_pop_comp -> .)

    r_pop_comp                     shift and go to state 140

state 112

    (69) exp -> termino . r_pop_mas expciclo
    (167) r_pop_mas -> .

    MAS             reduce using rule 167 (r_pop_mas -> .)
    MENOS           reduce using rule 167 (r_pop_mas -> .)
    MAY             reduce using rule 167 (r_pop_mas -> .)
    MEN             reduce using rule 167 (r_pop_mas -> .)
    DIF             reduce using rule 167 (r_pop_mas -> .)
    IGUIGU          reduce using rule 167 (r_pop_mas -> .)
    AND             reduce using rule 167 (r_pop_mas -> .)
    OR              reduce using rule 167 (r_pop_mas -> .)
    MAYIGU          reduce using rule 167 (r_pop_mas -> .)
    MENIGU          reduce using rule 167 (r_pop_mas -> .)
    PARDER          reduce using rule 167 (r_pop_mas -> .)
    COMA            reduce using rule 167 (r_pop_mas -> .)
    TO              reduce using rule 167 (r_pop_mas -> .)
    CORDER          reduce using rule 167 (r_pop_mas -> .)
    DO              reduce using rule 167 (r_pop_mas -> .)
    PTOCOM          reduce using rule 167 (r_pop_mas -> .)

    r_pop_mas                      shift and go to state 141

state 113

    (73) termino -> factor . r_pop_mult factorciclo
    (166) r_pop_mult -> .

    MULT            reduce using rule 166 (r_pop_mult -> .)
    DIV             reduce using rule 166 (r_pop_mult -> .)
    MAS             reduce using rule 166 (r_pop_mult -> .)
    MENOS           reduce using rule 166 (r_pop_mult -> .)
    MAY             reduce using rule 166 (r_pop_mult -> .)
    MEN             reduce using rule 166 (r_pop_mult -> .)
    DIF             reduce using rule 166 (r_pop_mult -> .)
    IGUIGU          reduce using rule 166 (r_pop_mult -> .)
    AND             reduce using rule 166 (r_pop_mult -> .)
    OR              reduce using rule 166 (r_pop_mult -> .)
    MAYIGU          reduce using rule 166 (r_pop_mult -> .)
    MENIGU          reduce using rule 166 (r_pop_mult -> .)
    PARDER          reduce using rule 166 (r_pop_mult -> .)
    COMA            reduce using rule 166 (r_pop_mult -> .)
    TO              reduce using rule 166 (r_pop_mult -> .)
    CORDER          reduce using rule 166 (r_pop_mult -> .)
    DO              reduce using rule 166 (r_pop_mult -> .)
    PTOCOM          reduce using rule 166 (r_pop_mult -> .)

    r_pop_mult                     shift and go to state 142

state 114

    (78) factor -> masomenos . varcte
    (89) varcte -> . iddim
    (90) varcte -> . CTEI r_pila_operandos_push_cte_int
    (91) varcte -> . CTEF r_pila_operandos_push_cte_flt
    (108) iddim -> . ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp

    CTEI            shift and go to state 145
    CTEF            shift and go to state 146
    ID              shift and go to state 96

    varcte                         shift and go to state 143
    iddim                          shift and go to state 144

state 115

    (79) factor -> ID . r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (149) r_verifica_variable_existe -> .

    PARIZQ          reduce using rule 149 (r_verifica_variable_existe -> .)
    CORIZQ          reduce using rule 149 (r_verifica_variable_existe -> .)
    MULT            reduce using rule 149 (r_verifica_variable_existe -> .)
    DIV             reduce using rule 149 (r_verifica_variable_existe -> .)
    MAS             reduce using rule 149 (r_verifica_variable_existe -> .)
    MENOS           reduce using rule 149 (r_verifica_variable_existe -> .)
    MAY             reduce using rule 149 (r_verifica_variable_existe -> .)
    MEN             reduce using rule 149 (r_verifica_variable_existe -> .)
    DIF             reduce using rule 149 (r_verifica_variable_existe -> .)
    IGUIGU          reduce using rule 149 (r_verifica_variable_existe -> .)
    AND             reduce using rule 149 (r_verifica_variable_existe -> .)
    OR              reduce using rule 149 (r_verifica_variable_existe -> .)
    MAYIGU          reduce using rule 149 (r_verifica_variable_existe -> .)
    MENIGU          reduce using rule 149 (r_verifica_variable_existe -> .)
    PARDER          reduce using rule 149 (r_verifica_variable_existe -> .)
    COMA            reduce using rule 149 (r_verifica_variable_existe -> .)
    TO              reduce using rule 149 (r_verifica_variable_existe -> .)
    CORDER          reduce using rule 149 (r_verifica_variable_existe -> .)
    DO              reduce using rule 149 (r_verifica_variable_existe -> .)
    PTOCOM          reduce using rule 149 (r_verifica_variable_existe -> .)

    r_verifica_variable_existe     shift and go to state 147

state 116

    (80) masomenos -> MAS .

    CTEI            reduce using rule 80 (masomenos -> MAS .)
    CTEF            reduce using rule 80 (masomenos -> MAS .)
    ID              reduce using rule 80 (masomenos -> MAS .)


state 117

    (81) masomenos -> MENOS .

    CTEI            reduce using rule 81 (masomenos -> MENOS .)
    CTEF            reduce using rule 81 (masomenos -> MENOS .)
    ID              reduce using rule 81 (masomenos -> MENOS .)


state 118

    (82) masomenos -> empty .

    CTEI            reduce using rule 82 (masomenos -> empty .)
    CTEF            reduce using rule 82 (masomenos -> empty .)
    ID              reduce using rule 82 (masomenos -> empty .)


state 119

    (100) escritura -> WRITE PARIZQ escrituraciclo . otro PARDER PTOCOM
    (103) otro -> . COMA escrituraciclo otro
    (104) otro -> . empty
    (122) empty -> .

    COMA            shift and go to state 149
    PARDER          reduce using rule 122 (empty -> .)

    otro                           shift and go to state 148
    empty                          shift and go to state 150

state 120

    (101) escrituraciclo -> CTE_STRING . r_genera_escribe_string
    (171) r_genera_escribe_string -> .

    COMA            reduce using rule 171 (r_genera_escribe_string -> .)
    PARDER          reduce using rule 171 (r_genera_escribe_string -> .)

    r_genera_escribe_string        shift and go to state 151

state 121

    (102) escrituraciclo -> expresion . r_genera_escribe
    (169) r_genera_escribe -> .

    COMA            reduce using rule 169 (r_genera_escribe -> .)
    PARDER          reduce using rule 169 (r_genera_escribe -> .)

    r_genera_escribe               shift and go to state 152

state 122

    (105) lectura -> READ PARIZQ iddim . r_genera_lectura ciclodim PARDER PTOCOM
    (170) r_genera_lectura -> .

    COMA            reduce using rule 170 (r_genera_lectura -> .)
    PARDER          reduce using rule 170 (r_genera_lectura -> .)

    r_genera_lectura               shift and go to state 153

state 123

    (113) condicional -> WHILE r_while_paso_1 PARIZQ . expresion PARDER r_while_paso_2 DO bloque r_while_paso_3
    (57) expresion -> . exp r_pop_comp expresionsig
    (69) exp -> . termino r_pop_mas expciclo
    (73) termino -> . factor r_pop_mult factorciclo
    (77) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (78) factor -> . masomenos varcte
    (79) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (80) masomenos -> . MAS
    (81) masomenos -> . MENOS
    (82) masomenos -> . empty
    (122) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 109
    ID              shift and go to state 115
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    CTEI            reduce using rule 122 (empty -> .)
    CTEF            reduce using rule 122 (empty -> .)

  ! ID              [ reduce using rule 122 (empty -> .) ]

    expresion                      shift and go to state 154
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    masomenos                      shift and go to state 114
    empty                          shift and go to state 118

state 124

    (114) nocondicional -> FOR iddim IGU . r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2
    (186) r_pila_operadores_push_igu -> .

    PARIZQ          reduce using rule 186 (r_pila_operadores_push_igu -> .)
    ID              reduce using rule 186 (r_pila_operadores_push_igu -> .)
    MAS             reduce using rule 186 (r_pila_operadores_push_igu -> .)
    MENOS           reduce using rule 186 (r_pila_operadores_push_igu -> .)
    CTEI            reduce using rule 186 (r_pila_operadores_push_igu -> .)
    CTEF            reduce using rule 186 (r_pila_operadores_push_igu -> .)

    r_pila_operadores_push_igu     shift and go to state 155

state 125

    (108) iddim -> ID r_verifica_variable_existe . r_pila_operandos_push_id arrexp arrexp
    (163) r_pila_operandos_push_id -> .

    CORIZQ          reduce using rule 163 (r_pila_operandos_push_id -> .)
    IGU             reduce using rule 163 (r_pila_operandos_push_id -> .)
    COMA            reduce using rule 163 (r_pila_operandos_push_id -> .)
    PARDER          reduce using rule 163 (r_pila_operandos_push_id -> .)
    MULT            reduce using rule 163 (r_pila_operandos_push_id -> .)
    DIV             reduce using rule 163 (r_pila_operandos_push_id -> .)
    MAS             reduce using rule 163 (r_pila_operandos_push_id -> .)
    MENOS           reduce using rule 163 (r_pila_operandos_push_id -> .)
    MAY             reduce using rule 163 (r_pila_operandos_push_id -> .)
    MEN             reduce using rule 163 (r_pila_operandos_push_id -> .)
    DIF             reduce using rule 163 (r_pila_operandos_push_id -> .)
    IGUIGU          reduce using rule 163 (r_pila_operandos_push_id -> .)
    AND             reduce using rule 163 (r_pila_operandos_push_id -> .)
    OR              reduce using rule 163 (r_pila_operandos_push_id -> .)
    MAYIGU          reduce using rule 163 (r_pila_operandos_push_id -> .)
    MENIGU          reduce using rule 163 (r_pila_operandos_push_id -> .)
    TO              reduce using rule 163 (r_pila_operandos_push_id -> .)
    CORDER          reduce using rule 163 (r_pila_operandos_push_id -> .)
    DO              reduce using rule 163 (r_pila_operandos_push_id -> .)
    PTOCOM          reduce using rule 163 (r_pila_operandos_push_id -> .)

    r_pila_operandos_push_id       shift and go to state 156

state 126

    (28) funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion . PARDER r_register_param_types opvars r_register_quad bloque r_endfunc

    PARDER          shift and go to state 157


state 127

    (33) funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER . r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return
    (130) r_register_param_types -> .

    VARTOKEN        reduce using rule 130 (r_register_param_types -> .)
    KEYIZQ          reduce using rule 130 (r_register_param_types -> .)

    r_register_param_types         shift and go to state 158

state 128

    (31) ciclovarsimple -> COMA varsimple . ciclovarsimple
    (31) ciclovarsimple -> . COMA varsimple ciclovarsimple
    (32) ciclovarsimple -> . empty
    (122) empty -> .

    COMA            shift and go to state 100
    PARDER          reduce using rule 122 (empty -> .)

    ciclovarsimple                 shift and go to state 159
    empty                          shift and go to state 101

state 129

    (34) ident -> ID r_register_variable_name . arrini arrini
    (35) arrini -> . CORIZQ CORDER
    (36) arrini -> . empty
    (122) empty -> .

  ! shift/reduce conflict for CORIZQ resolved as shift
    CORIZQ          shift and go to state 161
    COMA            reduce using rule 122 (empty -> .)
    PARDER          reduce using rule 122 (empty -> .)

  ! CORIZQ          [ reduce using rule 122 (empty -> .) ]

    arrini                         shift and go to state 160
    empty                          shift and go to state 162

state 130

    (15) tipociclo -> tipo . opciontipo
    (17) opciontipo -> . ID r_register_variable_name arr_uno arr_dos r_verify_array varciclo PTOCOM tipociclo
    (18) opciontipo -> . MODULE ID r_update_func_type r_update_curr_function_name_especial PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return

    ID              shift and go to state 164
    MODULE          shift and go to state 165

    opciontipo                     shift and go to state 163

state 131

    (6) vars -> VARTOKEN tipo ID r_register_variable_name arr_uno arr_dos r_verify_array varciclo PTOCOM tipociclo .

    VOID            reduce using rule 6 (vars -> VARTOKEN tipo ID r_register_variable_name arr_uno arr_dos r_verify_array varciclo PTOCOM tipociclo .)
    INT             reduce using rule 6 (vars -> VARTOKEN tipo ID r_register_variable_name arr_uno arr_dos r_verify_array varciclo PTOCOM tipociclo .)
    FLT             reduce using rule 6 (vars -> VARTOKEN tipo ID r_register_variable_name arr_uno arr_dos r_verify_array varciclo PTOCOM tipociclo .)
    CHAR            reduce using rule 6 (vars -> VARTOKEN tipo ID r_register_variable_name arr_uno arr_dos r_verify_array varciclo PTOCOM tipociclo .)
    MAIN            reduce using rule 6 (vars -> VARTOKEN tipo ID r_register_variable_name arr_uno arr_dos r_verify_array varciclo PTOCOM tipociclo .)
    KEYIZQ          reduce using rule 6 (vars -> VARTOKEN tipo ID r_register_variable_name arr_uno arr_dos r_verify_array varciclo PTOCOM tipociclo .)


state 132

    (16) tipociclo -> empty .

    VOID            reduce using rule 16 (tipociclo -> empty .)
    INT             reduce using rule 16 (tipociclo -> empty .)
    FLT             reduce using rule 16 (tipociclo -> empty .)
    CHAR            reduce using rule 16 (tipociclo -> empty .)
    MAIN            reduce using rule 16 (tipociclo -> empty .)
    KEYIZQ          reduce using rule 16 (tipociclo -> empty .)


state 133

    (7) varciclo -> COMA ID r_register_variable_name . arr_uno arr_dos r_verify_array varciclo
    (11) arr_uno -> . CORIZQ CTEI r_arr_dim_uno CORDER
    (12) arr_uno -> . empty
    (122) empty -> .

  ! shift/reduce conflict for CORIZQ resolved as shift
    CORIZQ          shift and go to state 44
    COMA            reduce using rule 122 (empty -> .)
    PTOCOM          reduce using rule 122 (empty -> .)

  ! CORIZQ          [ reduce using rule 122 (empty -> .) ]

    arr_uno                        shift and go to state 166
    empty                          shift and go to state 45

state 134

    (56) asignacion -> ID r_verifica_variable_existe r_guardar_variable arrexp_uno . arrexp_dos r_pila_operandos_push_id IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM
    (87) arrexp_dos -> . CORIZQ r_push_arr expresion r_verifica_arrexp_dos CORDER
    (88) arrexp_dos -> . empty
    (122) empty -> .

    CORIZQ          shift and go to state 168
    IGU             reduce using rule 122 (empty -> .)

    arrexp_dos                     shift and go to state 167
    empty                          shift and go to state 169

state 135

    (85) arrexp_uno -> CORIZQ . r_push_arr expresion r_verifica_arrexp_uno CORDER
    (168) r_push_arr -> .

    PARIZQ          reduce using rule 168 (r_push_arr -> .)
    ID              reduce using rule 168 (r_push_arr -> .)
    MAS             reduce using rule 168 (r_push_arr -> .)
    MENOS           reduce using rule 168 (r_push_arr -> .)
    CTEI            reduce using rule 168 (r_push_arr -> .)
    CTEF            reduce using rule 168 (r_push_arr -> .)

    r_push_arr                     shift and go to state 170

state 136

    (86) arrexp_uno -> empty .

    CORIZQ          reduce using rule 86 (arrexp_uno -> empty .)
    IGU             reduce using rule 86 (arrexp_uno -> empty .)
    MULT            reduce using rule 86 (arrexp_uno -> empty .)
    DIV             reduce using rule 86 (arrexp_uno -> empty .)
    MAS             reduce using rule 86 (arrexp_uno -> empty .)
    MENOS           reduce using rule 86 (arrexp_uno -> empty .)
    MAY             reduce using rule 86 (arrexp_uno -> empty .)
    MEN             reduce using rule 86 (arrexp_uno -> empty .)
    DIF             reduce using rule 86 (arrexp_uno -> empty .)
    IGUIGU          reduce using rule 86 (arrexp_uno -> empty .)
    AND             reduce using rule 86 (arrexp_uno -> empty .)
    OR              reduce using rule 86 (arrexp_uno -> empty .)
    MAYIGU          reduce using rule 86 (arrexp_uno -> empty .)
    MENIGU          reduce using rule 86 (arrexp_uno -> empty .)
    PARDER          reduce using rule 86 (arrexp_uno -> empty .)
    COMA            reduce using rule 86 (arrexp_uno -> empty .)
    TO              reduce using rule 86 (arrexp_uno -> empty .)
    CORDER          reduce using rule 86 (arrexp_uno -> empty .)
    DO              reduce using rule 86 (arrexp_uno -> empty .)
    PTOCOM          reduce using rule 86 (arrexp_uno -> empty .)


state 137

    (96) llamadafunc -> ID r_verifica_void PARIZQ r_era_funcion_void . parametros r_terminar_parametro_void PARDER PTOCOM
    (92) parametros -> . expresion r_extraer_parametro cicloparametros
    (93) parametros -> . empty
    (57) expresion -> . exp r_pop_comp expresionsig
    (122) empty -> .
    (69) exp -> . termino r_pop_mas expciclo
    (73) termino -> . factor r_pop_mult factorciclo
    (77) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (78) factor -> . masomenos varcte
    (79) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (80) masomenos -> . MAS
    (81) masomenos -> . MENOS
    (82) masomenos -> . empty

  ! shift/reduce conflict for ID resolved as shift
    PARDER          reduce using rule 122 (empty -> .)
    CTEI            reduce using rule 122 (empty -> .)
    CTEF            reduce using rule 122 (empty -> .)
    PARIZQ          shift and go to state 109
    ID              shift and go to state 115
    MAS             shift and go to state 116
    MENOS           shift and go to state 117

  ! ID              [ reduce using rule 122 (empty -> .) ]

    parametros                     shift and go to state 171
    expresion                      shift and go to state 172
    empty                          shift and go to state 173
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    masomenos                      shift and go to state 114

state 138

    (77) factor -> PARIZQ r_marcar_fondo_de_pila . expresion r_desmarcar_fondo_de_pila PARDER
    (57) expresion -> . exp r_pop_comp expresionsig
    (69) exp -> . termino r_pop_mas expciclo
    (73) termino -> . factor r_pop_mult factorciclo
    (77) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (78) factor -> . masomenos varcte
    (79) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (80) masomenos -> . MAS
    (81) masomenos -> . MENOS
    (82) masomenos -> . empty
    (122) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 109
    ID              shift and go to state 115
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    CTEI            reduce using rule 122 (empty -> .)
    CTEF            reduce using rule 122 (empty -> .)

  ! ID              [ reduce using rule 122 (empty -> .) ]

    expresion                      shift and go to state 174
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    masomenos                      shift and go to state 114
    empty                          shift and go to state 118

state 139

    (97) decision -> IF PARIZQ expresion PARDER . r_if_paso_1 THEN bloque decision_else r_if_paso_3
    (144) r_if_paso_1 -> .

    THEN            reduce using rule 144 (r_if_paso_1 -> .)

    r_if_paso_1                    shift and go to state 175

state 140

    (57) expresion -> exp r_pop_comp . expresionsig
    (58) expresionsig -> . MAY r_pila_operadores_push_may expresionsigequal expresion
    (59) expresionsig -> . MEN r_pila_operadores_push_men expresionsigequal expresion
    (60) expresionsig -> . DIF r_pila_operadores_push_dif expresion
    (61) expresionsig -> . IGUIGU r_pila_operadores_push_iguigu expresion
    (62) expresionsig -> . AND r_pila_operadores_push_and expresion
    (63) expresionsig -> . OR r_pila_operadores_push_or expresion
    (64) expresionsig -> . MAYIGU r_pila_operadores_push_mayigu expresionsigequal expresion
    (65) expresionsig -> . MENIGU r_pila_operadores_push_menigu expresionsigequal expresion
    (66) expresionsig -> . empty
    (122) empty -> .

    MAY             shift and go to state 177
    MEN             shift and go to state 178
    DIF             shift and go to state 179
    IGUIGU          shift and go to state 180
    AND             shift and go to state 181
    OR              shift and go to state 182
    MAYIGU          shift and go to state 183
    MENIGU          shift and go to state 184
    PARDER          reduce using rule 122 (empty -> .)
    COMA            reduce using rule 122 (empty -> .)
    TO              reduce using rule 122 (empty -> .)
    CORDER          reduce using rule 122 (empty -> .)
    DO              reduce using rule 122 (empty -> .)
    PTOCOM          reduce using rule 122 (empty -> .)

    expresionsig                   shift and go to state 176
    empty                          shift and go to state 185

state 141

    (69) exp -> termino r_pop_mas . expciclo
    (70) expciclo -> . MAS r_pila_operadores_push_mas exp
    (71) expciclo -> . MENOS r_pila_operadores_push_menos exp
    (72) expciclo -> . empty
    (122) empty -> .

    MAS             shift and go to state 187
    MENOS           shift and go to state 188
    MAY             reduce using rule 122 (empty -> .)
    MEN             reduce using rule 122 (empty -> .)
    DIF             reduce using rule 122 (empty -> .)
    IGUIGU          reduce using rule 122 (empty -> .)
    AND             reduce using rule 122 (empty -> .)
    OR              reduce using rule 122 (empty -> .)
    MAYIGU          reduce using rule 122 (empty -> .)
    MENIGU          reduce using rule 122 (empty -> .)
    PARDER          reduce using rule 122 (empty -> .)
    COMA            reduce using rule 122 (empty -> .)
    TO              reduce using rule 122 (empty -> .)
    CORDER          reduce using rule 122 (empty -> .)
    DO              reduce using rule 122 (empty -> .)
    PTOCOM          reduce using rule 122 (empty -> .)

    expciclo                       shift and go to state 186
    empty                          shift and go to state 189

state 142

    (73) termino -> factor r_pop_mult . factorciclo
    (74) factorciclo -> . MULT r_pila_operadores_push_mult termino
    (75) factorciclo -> . DIV r_pila_operadores_push_div termino
    (76) factorciclo -> . empty
    (122) empty -> .

    MULT            shift and go to state 191
    DIV             shift and go to state 192
    MAS             reduce using rule 122 (empty -> .)
    MENOS           reduce using rule 122 (empty -> .)
    MAY             reduce using rule 122 (empty -> .)
    MEN             reduce using rule 122 (empty -> .)
    DIF             reduce using rule 122 (empty -> .)
    IGUIGU          reduce using rule 122 (empty -> .)
    AND             reduce using rule 122 (empty -> .)
    OR              reduce using rule 122 (empty -> .)
    MAYIGU          reduce using rule 122 (empty -> .)
    MENIGU          reduce using rule 122 (empty -> .)
    PARDER          reduce using rule 122 (empty -> .)
    COMA            reduce using rule 122 (empty -> .)
    TO              reduce using rule 122 (empty -> .)
    CORDER          reduce using rule 122 (empty -> .)
    DO              reduce using rule 122 (empty -> .)
    PTOCOM          reduce using rule 122 (empty -> .)

    factorciclo                    shift and go to state 190
    empty                          shift and go to state 193

state 143

    (78) factor -> masomenos varcte .

    MULT            reduce using rule 78 (factor -> masomenos varcte .)
    DIV             reduce using rule 78 (factor -> masomenos varcte .)
    MAS             reduce using rule 78 (factor -> masomenos varcte .)
    MENOS           reduce using rule 78 (factor -> masomenos varcte .)
    MAY             reduce using rule 78 (factor -> masomenos varcte .)
    MEN             reduce using rule 78 (factor -> masomenos varcte .)
    DIF             reduce using rule 78 (factor -> masomenos varcte .)
    IGUIGU          reduce using rule 78 (factor -> masomenos varcte .)
    AND             reduce using rule 78 (factor -> masomenos varcte .)
    OR              reduce using rule 78 (factor -> masomenos varcte .)
    MAYIGU          reduce using rule 78 (factor -> masomenos varcte .)
    MENIGU          reduce using rule 78 (factor -> masomenos varcte .)
    PARDER          reduce using rule 78 (factor -> masomenos varcte .)
    COMA            reduce using rule 78 (factor -> masomenos varcte .)
    TO              reduce using rule 78 (factor -> masomenos varcte .)
    CORDER          reduce using rule 78 (factor -> masomenos varcte .)
    DO              reduce using rule 78 (factor -> masomenos varcte .)
    PTOCOM          reduce using rule 78 (factor -> masomenos varcte .)


state 144

    (89) varcte -> iddim .

    MULT            reduce using rule 89 (varcte -> iddim .)
    DIV             reduce using rule 89 (varcte -> iddim .)
    MAS             reduce using rule 89 (varcte -> iddim .)
    MENOS           reduce using rule 89 (varcte -> iddim .)
    MAY             reduce using rule 89 (varcte -> iddim .)
    MEN             reduce using rule 89 (varcte -> iddim .)
    DIF             reduce using rule 89 (varcte -> iddim .)
    IGUIGU          reduce using rule 89 (varcte -> iddim .)
    AND             reduce using rule 89 (varcte -> iddim .)
    OR              reduce using rule 89 (varcte -> iddim .)
    MAYIGU          reduce using rule 89 (varcte -> iddim .)
    MENIGU          reduce using rule 89 (varcte -> iddim .)
    PARDER          reduce using rule 89 (varcte -> iddim .)
    COMA            reduce using rule 89 (varcte -> iddim .)
    TO              reduce using rule 89 (varcte -> iddim .)
    CORDER          reduce using rule 89 (varcte -> iddim .)
    DO              reduce using rule 89 (varcte -> iddim .)
    PTOCOM          reduce using rule 89 (varcte -> iddim .)


state 145

    (90) varcte -> CTEI . r_pila_operandos_push_cte_int
    (164) r_pila_operandos_push_cte_int -> .

    MULT            reduce using rule 164 (r_pila_operandos_push_cte_int -> .)
    DIV             reduce using rule 164 (r_pila_operandos_push_cte_int -> .)
    MAS             reduce using rule 164 (r_pila_operandos_push_cte_int -> .)
    MENOS           reduce using rule 164 (r_pila_operandos_push_cte_int -> .)
    MAY             reduce using rule 164 (r_pila_operandos_push_cte_int -> .)
    MEN             reduce using rule 164 (r_pila_operandos_push_cte_int -> .)
    DIF             reduce using rule 164 (r_pila_operandos_push_cte_int -> .)
    IGUIGU          reduce using rule 164 (r_pila_operandos_push_cte_int -> .)
    AND             reduce using rule 164 (r_pila_operandos_push_cte_int -> .)
    OR              reduce using rule 164 (r_pila_operandos_push_cte_int -> .)
    MAYIGU          reduce using rule 164 (r_pila_operandos_push_cte_int -> .)
    MENIGU          reduce using rule 164 (r_pila_operandos_push_cte_int -> .)
    PARDER          reduce using rule 164 (r_pila_operandos_push_cte_int -> .)
    COMA            reduce using rule 164 (r_pila_operandos_push_cte_int -> .)
    TO              reduce using rule 164 (r_pila_operandos_push_cte_int -> .)
    CORDER          reduce using rule 164 (r_pila_operandos_push_cte_int -> .)
    DO              reduce using rule 164 (r_pila_operandos_push_cte_int -> .)
    PTOCOM          reduce using rule 164 (r_pila_operandos_push_cte_int -> .)

    r_pila_operandos_push_cte_int  shift and go to state 194

state 146

    (91) varcte -> CTEF . r_pila_operandos_push_cte_flt
    (165) r_pila_operandos_push_cte_flt -> .

    MULT            reduce using rule 165 (r_pila_operandos_push_cte_flt -> .)
    DIV             reduce using rule 165 (r_pila_operandos_push_cte_flt -> .)
    MAS             reduce using rule 165 (r_pila_operandos_push_cte_flt -> .)
    MENOS           reduce using rule 165 (r_pila_operandos_push_cte_flt -> .)
    MAY             reduce using rule 165 (r_pila_operandos_push_cte_flt -> .)
    MEN             reduce using rule 165 (r_pila_operandos_push_cte_flt -> .)
    DIF             reduce using rule 165 (r_pila_operandos_push_cte_flt -> .)
    IGUIGU          reduce using rule 165 (r_pila_operandos_push_cte_flt -> .)
    AND             reduce using rule 165 (r_pila_operandos_push_cte_flt -> .)
    OR              reduce using rule 165 (r_pila_operandos_push_cte_flt -> .)
    MAYIGU          reduce using rule 165 (r_pila_operandos_push_cte_flt -> .)
    MENIGU          reduce using rule 165 (r_pila_operandos_push_cte_flt -> .)
    PARDER          reduce using rule 165 (r_pila_operandos_push_cte_flt -> .)
    COMA            reduce using rule 165 (r_pila_operandos_push_cte_flt -> .)
    TO              reduce using rule 165 (r_pila_operandos_push_cte_flt -> .)
    CORDER          reduce using rule 165 (r_pila_operandos_push_cte_flt -> .)
    DO              reduce using rule 165 (r_pila_operandos_push_cte_flt -> .)
    PTOCOM          reduce using rule 165 (r_pila_operandos_push_cte_flt -> .)

    r_pila_operandos_push_cte_flt  shift and go to state 195

state 147

    (79) factor -> ID r_verifica_variable_existe . r_guardar_variable opcionid r_pila_operandos_push
    (161) r_guardar_variable -> .

    PARIZQ          reduce using rule 161 (r_guardar_variable -> .)
    CORIZQ          reduce using rule 161 (r_guardar_variable -> .)
    MULT            reduce using rule 161 (r_guardar_variable -> .)
    DIV             reduce using rule 161 (r_guardar_variable -> .)
    MAS             reduce using rule 161 (r_guardar_variable -> .)
    MENOS           reduce using rule 161 (r_guardar_variable -> .)
    MAY             reduce using rule 161 (r_guardar_variable -> .)
    MEN             reduce using rule 161 (r_guardar_variable -> .)
    DIF             reduce using rule 161 (r_guardar_variable -> .)
    IGUIGU          reduce using rule 161 (r_guardar_variable -> .)
    AND             reduce using rule 161 (r_guardar_variable -> .)
    OR              reduce using rule 161 (r_guardar_variable -> .)
    MAYIGU          reduce using rule 161 (r_guardar_variable -> .)
    MENIGU          reduce using rule 161 (r_guardar_variable -> .)
    PARDER          reduce using rule 161 (r_guardar_variable -> .)
    COMA            reduce using rule 161 (r_guardar_variable -> .)
    TO              reduce using rule 161 (r_guardar_variable -> .)
    CORDER          reduce using rule 161 (r_guardar_variable -> .)
    DO              reduce using rule 161 (r_guardar_variable -> .)
    PTOCOM          reduce using rule 161 (r_guardar_variable -> .)

    r_guardar_variable             shift and go to state 196

state 148

    (100) escritura -> WRITE PARIZQ escrituraciclo otro . PARDER PTOCOM

    PARDER          shift and go to state 197


state 149

    (103) otro -> COMA . escrituraciclo otro
    (101) escrituraciclo -> . CTE_STRING r_genera_escribe_string
    (102) escrituraciclo -> . expresion r_genera_escribe
    (57) expresion -> . exp r_pop_comp expresionsig
    (69) exp -> . termino r_pop_mas expciclo
    (73) termino -> . factor r_pop_mult factorciclo
    (77) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (78) factor -> . masomenos varcte
    (79) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (80) masomenos -> . MAS
    (81) masomenos -> . MENOS
    (82) masomenos -> . empty
    (122) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    CTE_STRING      shift and go to state 120
    PARIZQ          shift and go to state 109
    ID              shift and go to state 115
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    CTEI            reduce using rule 122 (empty -> .)
    CTEF            reduce using rule 122 (empty -> .)

  ! ID              [ reduce using rule 122 (empty -> .) ]

    escrituraciclo                 shift and go to state 198
    expresion                      shift and go to state 121
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    masomenos                      shift and go to state 114
    empty                          shift and go to state 118

state 150

    (104) otro -> empty .

    PARDER          reduce using rule 104 (otro -> empty .)


state 151

    (101) escrituraciclo -> CTE_STRING r_genera_escribe_string .

    COMA            reduce using rule 101 (escrituraciclo -> CTE_STRING r_genera_escribe_string .)
    PARDER          reduce using rule 101 (escrituraciclo -> CTE_STRING r_genera_escribe_string .)


state 152

    (102) escrituraciclo -> expresion r_genera_escribe .

    COMA            reduce using rule 102 (escrituraciclo -> expresion r_genera_escribe .)
    PARDER          reduce using rule 102 (escrituraciclo -> expresion r_genera_escribe .)


state 153

    (105) lectura -> READ PARIZQ iddim r_genera_lectura . ciclodim PARDER PTOCOM
    (106) ciclodim -> . COMA iddim r_genera_lectura ciclodim
    (107) ciclodim -> . empty
    (122) empty -> .

    COMA            shift and go to state 200
    PARDER          reduce using rule 122 (empty -> .)

    ciclodim                       shift and go to state 199
    empty                          shift and go to state 201

state 154

    (113) condicional -> WHILE r_while_paso_1 PARIZQ expresion . PARDER r_while_paso_2 DO bloque r_while_paso_3

    PARDER          shift and go to state 202


state 155

    (114) nocondicional -> FOR iddim IGU r_pila_operadores_push_igu . expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2
    (57) expresion -> . exp r_pop_comp expresionsig
    (69) exp -> . termino r_pop_mas expciclo
    (73) termino -> . factor r_pop_mult factorciclo
    (77) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (78) factor -> . masomenos varcte
    (79) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (80) masomenos -> . MAS
    (81) masomenos -> . MENOS
    (82) masomenos -> . empty
    (122) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 109
    ID              shift and go to state 115
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    CTEI            reduce using rule 122 (empty -> .)
    CTEF            reduce using rule 122 (empty -> .)

  ! ID              [ reduce using rule 122 (empty -> .) ]

    expresion                      shift and go to state 203
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    masomenos                      shift and go to state 114
    empty                          shift and go to state 118

state 156

    (108) iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id . arrexp arrexp
    (109) arrexp -> . CORIZQ expresion CORDER
    (110) arrexp -> . empty
    (122) empty -> .

  ! shift/reduce conflict for CORIZQ resolved as shift
    CORIZQ          shift and go to state 205
    IGU             reduce using rule 122 (empty -> .)
    COMA            reduce using rule 122 (empty -> .)
    PARDER          reduce using rule 122 (empty -> .)
    MULT            reduce using rule 122 (empty -> .)
    DIV             reduce using rule 122 (empty -> .)
    MAS             reduce using rule 122 (empty -> .)
    MENOS           reduce using rule 122 (empty -> .)
    MAY             reduce using rule 122 (empty -> .)
    MEN             reduce using rule 122 (empty -> .)
    DIF             reduce using rule 122 (empty -> .)
    IGUIGU          reduce using rule 122 (empty -> .)
    AND             reduce using rule 122 (empty -> .)
    OR              reduce using rule 122 (empty -> .)
    MAYIGU          reduce using rule 122 (empty -> .)
    MENIGU          reduce using rule 122 (empty -> .)
    TO              reduce using rule 122 (empty -> .)
    CORDER          reduce using rule 122 (empty -> .)
    DO              reduce using rule 122 (empty -> .)
    PTOCOM          reduce using rule 122 (empty -> .)

  ! CORIZQ          [ reduce using rule 122 (empty -> .) ]

    arrexp                         shift and go to state 204
    empty                          shift and go to state 206

state 157

    (28) funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER . r_register_param_types opvars r_register_quad bloque r_endfunc
    (130) r_register_param_types -> .

    VARTOKEN        reduce using rule 130 (r_register_param_types -> .)
    KEYIZQ          reduce using rule 130 (r_register_param_types -> .)

    r_register_param_types         shift and go to state 207

state 158

    (33) funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types . opvars r_register_quad bloquefunc r_endfunc r_asegurar_return
    (2) opvars -> . vars
    (3) opvars -> . empty
    (6) vars -> . VARTOKEN tipo ID r_register_variable_name arr_uno arr_dos r_verify_array varciclo PTOCOM tipociclo
    (122) empty -> .

    VARTOKEN        shift and go to state 10
    KEYIZQ          reduce using rule 122 (empty -> .)

    opvars                         shift and go to state 208
    vars                           shift and go to state 8
    empty                          shift and go to state 9

state 159

    (31) ciclovarsimple -> COMA varsimple ciclovarsimple .

    PARDER          reduce using rule 31 (ciclovarsimple -> COMA varsimple ciclovarsimple .)


state 160

    (34) ident -> ID r_register_variable_name arrini . arrini
    (35) arrini -> . CORIZQ CORDER
    (36) arrini -> . empty
    (122) empty -> .

    CORIZQ          shift and go to state 161
    COMA            reduce using rule 122 (empty -> .)
    PARDER          reduce using rule 122 (empty -> .)

    arrini                         shift and go to state 209
    empty                          shift and go to state 162

state 161

    (35) arrini -> CORIZQ . CORDER

    CORDER          shift and go to state 210


state 162

    (36) arrini -> empty .

    CORIZQ          reduce using rule 36 (arrini -> empty .)
    COMA            reduce using rule 36 (arrini -> empty .)
    PARDER          reduce using rule 36 (arrini -> empty .)


state 163

    (15) tipociclo -> tipo opciontipo .

    VOID            reduce using rule 15 (tipociclo -> tipo opciontipo .)
    INT             reduce using rule 15 (tipociclo -> tipo opciontipo .)
    FLT             reduce using rule 15 (tipociclo -> tipo opciontipo .)
    CHAR            reduce using rule 15 (tipociclo -> tipo opciontipo .)
    MAIN            reduce using rule 15 (tipociclo -> tipo opciontipo .)
    KEYIZQ          reduce using rule 15 (tipociclo -> tipo opciontipo .)


state 164

    (17) opciontipo -> ID . r_register_variable_name arr_uno arr_dos r_verify_array varciclo PTOCOM tipociclo
    (145) r_register_variable_name -> .

    CORIZQ          reduce using rule 145 (r_register_variable_name -> .)
    COMA            reduce using rule 145 (r_register_variable_name -> .)
    PTOCOM          reduce using rule 145 (r_register_variable_name -> .)

    r_register_variable_name       shift and go to state 211

state 165

    (18) opciontipo -> MODULE . ID r_update_func_type r_update_curr_function_name_especial PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return

    ID              shift and go to state 212


state 166

    (7) varciclo -> COMA ID r_register_variable_name arr_uno . arr_dos r_verify_array varciclo
    (13) arr_dos -> . CORIZQ CTEI r_arr_dim_dos CORDER
    (14) arr_dos -> . empty
    (122) empty -> .

    CORIZQ          shift and go to state 50
    COMA            reduce using rule 122 (empty -> .)
    PTOCOM          reduce using rule 122 (empty -> .)

    arr_dos                        shift and go to state 213
    empty                          shift and go to state 51

state 167

    (56) asignacion -> ID r_verifica_variable_existe r_guardar_variable arrexp_uno arrexp_dos . r_pila_operandos_push_id IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM
    (163) r_pila_operandos_push_id -> .

    IGU             reduce using rule 163 (r_pila_operandos_push_id -> .)

    r_pila_operandos_push_id       shift and go to state 214

state 168

    (87) arrexp_dos -> CORIZQ . r_push_arr expresion r_verifica_arrexp_dos CORDER
    (168) r_push_arr -> .

    PARIZQ          reduce using rule 168 (r_push_arr -> .)
    ID              reduce using rule 168 (r_push_arr -> .)
    MAS             reduce using rule 168 (r_push_arr -> .)
    MENOS           reduce using rule 168 (r_push_arr -> .)
    CTEI            reduce using rule 168 (r_push_arr -> .)
    CTEF            reduce using rule 168 (r_push_arr -> .)

    r_push_arr                     shift and go to state 215

state 169

    (88) arrexp_dos -> empty .

    IGU             reduce using rule 88 (arrexp_dos -> empty .)
    MULT            reduce using rule 88 (arrexp_dos -> empty .)
    DIV             reduce using rule 88 (arrexp_dos -> empty .)
    MAS             reduce using rule 88 (arrexp_dos -> empty .)
    MENOS           reduce using rule 88 (arrexp_dos -> empty .)
    MAY             reduce using rule 88 (arrexp_dos -> empty .)
    MEN             reduce using rule 88 (arrexp_dos -> empty .)
    DIF             reduce using rule 88 (arrexp_dos -> empty .)
    IGUIGU          reduce using rule 88 (arrexp_dos -> empty .)
    AND             reduce using rule 88 (arrexp_dos -> empty .)
    OR              reduce using rule 88 (arrexp_dos -> empty .)
    MAYIGU          reduce using rule 88 (arrexp_dos -> empty .)
    MENIGU          reduce using rule 88 (arrexp_dos -> empty .)
    PARDER          reduce using rule 88 (arrexp_dos -> empty .)
    COMA            reduce using rule 88 (arrexp_dos -> empty .)
    TO              reduce using rule 88 (arrexp_dos -> empty .)
    CORDER          reduce using rule 88 (arrexp_dos -> empty .)
    DO              reduce using rule 88 (arrexp_dos -> empty .)
    PTOCOM          reduce using rule 88 (arrexp_dos -> empty .)


state 170

    (85) arrexp_uno -> CORIZQ r_push_arr . expresion r_verifica_arrexp_uno CORDER
    (57) expresion -> . exp r_pop_comp expresionsig
    (69) exp -> . termino r_pop_mas expciclo
    (73) termino -> . factor r_pop_mult factorciclo
    (77) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (78) factor -> . masomenos varcte
    (79) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (80) masomenos -> . MAS
    (81) masomenos -> . MENOS
    (82) masomenos -> . empty
    (122) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 109
    ID              shift and go to state 115
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    CTEI            reduce using rule 122 (empty -> .)
    CTEF            reduce using rule 122 (empty -> .)

  ! ID              [ reduce using rule 122 (empty -> .) ]

    expresion                      shift and go to state 216
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    masomenos                      shift and go to state 114
    empty                          shift and go to state 118

state 171

    (96) llamadafunc -> ID r_verifica_void PARIZQ r_era_funcion_void parametros . r_terminar_parametro_void PARDER PTOCOM
    (138) r_terminar_parametro_void -> .

    PARDER          reduce using rule 138 (r_terminar_parametro_void -> .)

    r_terminar_parametro_void      shift and go to state 217

state 172

    (92) parametros -> expresion . r_extraer_parametro cicloparametros
    (139) r_extraer_parametro -> .

    COMA            reduce using rule 139 (r_extraer_parametro -> .)
    PARDER          reduce using rule 139 (r_extraer_parametro -> .)

    r_extraer_parametro            shift and go to state 218

state 173

    (93) parametros -> empty .
    (82) masomenos -> empty .

    PARDER          reduce using rule 93 (parametros -> empty .)
    CTEI            reduce using rule 82 (masomenos -> empty .)
    CTEF            reduce using rule 82 (masomenos -> empty .)
    ID              reduce using rule 82 (masomenos -> empty .)


state 174

    (77) factor -> PARIZQ r_marcar_fondo_de_pila expresion . r_desmarcar_fondo_de_pila PARDER
    (175) r_desmarcar_fondo_de_pila -> .

    PARDER          reduce using rule 175 (r_desmarcar_fondo_de_pila -> .)

    r_desmarcar_fondo_de_pila      shift and go to state 219

state 175

    (97) decision -> IF PARIZQ expresion PARDER r_if_paso_1 . THEN bloque decision_else r_if_paso_3

    THEN            shift and go to state 220


state 176

    (57) expresion -> exp r_pop_comp expresionsig .

    PARDER          reduce using rule 57 (expresion -> exp r_pop_comp expresionsig .)
    COMA            reduce using rule 57 (expresion -> exp r_pop_comp expresionsig .)
    TO              reduce using rule 57 (expresion -> exp r_pop_comp expresionsig .)
    CORDER          reduce using rule 57 (expresion -> exp r_pop_comp expresionsig .)
    DO              reduce using rule 57 (expresion -> exp r_pop_comp expresionsig .)
    PTOCOM          reduce using rule 57 (expresion -> exp r_pop_comp expresionsig .)


state 177

    (58) expresionsig -> MAY . r_pila_operadores_push_may expresionsigequal expresion
    (180) r_pila_operadores_push_may -> .

    IGU             reduce using rule 180 (r_pila_operadores_push_may -> .)
    PARIZQ          reduce using rule 180 (r_pila_operadores_push_may -> .)
    ID              reduce using rule 180 (r_pila_operadores_push_may -> .)
    MAS             reduce using rule 180 (r_pila_operadores_push_may -> .)
    MENOS           reduce using rule 180 (r_pila_operadores_push_may -> .)
    CTEI            reduce using rule 180 (r_pila_operadores_push_may -> .)
    CTEF            reduce using rule 180 (r_pila_operadores_push_may -> .)

    r_pila_operadores_push_may     shift and go to state 221

state 178

    (59) expresionsig -> MEN . r_pila_operadores_push_men expresionsigequal expresion
    (181) r_pila_operadores_push_men -> .

    IGU             reduce using rule 181 (r_pila_operadores_push_men -> .)
    PARIZQ          reduce using rule 181 (r_pila_operadores_push_men -> .)
    ID              reduce using rule 181 (r_pila_operadores_push_men -> .)
    MAS             reduce using rule 181 (r_pila_operadores_push_men -> .)
    MENOS           reduce using rule 181 (r_pila_operadores_push_men -> .)
    CTEI            reduce using rule 181 (r_pila_operadores_push_men -> .)
    CTEF            reduce using rule 181 (r_pila_operadores_push_men -> .)

    r_pila_operadores_push_men     shift and go to state 222

state 179

    (60) expresionsig -> DIF . r_pila_operadores_push_dif expresion
    (182) r_pila_operadores_push_dif -> .

    PARIZQ          reduce using rule 182 (r_pila_operadores_push_dif -> .)
    ID              reduce using rule 182 (r_pila_operadores_push_dif -> .)
    MAS             reduce using rule 182 (r_pila_operadores_push_dif -> .)
    MENOS           reduce using rule 182 (r_pila_operadores_push_dif -> .)
    CTEI            reduce using rule 182 (r_pila_operadores_push_dif -> .)
    CTEF            reduce using rule 182 (r_pila_operadores_push_dif -> .)

    r_pila_operadores_push_dif     shift and go to state 223

state 180

    (61) expresionsig -> IGUIGU . r_pila_operadores_push_iguigu expresion
    (183) r_pila_operadores_push_iguigu -> .

    PARIZQ          reduce using rule 183 (r_pila_operadores_push_iguigu -> .)
    ID              reduce using rule 183 (r_pila_operadores_push_iguigu -> .)
    MAS             reduce using rule 183 (r_pila_operadores_push_iguigu -> .)
    MENOS           reduce using rule 183 (r_pila_operadores_push_iguigu -> .)
    CTEI            reduce using rule 183 (r_pila_operadores_push_iguigu -> .)
    CTEF            reduce using rule 183 (r_pila_operadores_push_iguigu -> .)

    r_pila_operadores_push_iguigu  shift and go to state 224

state 181

    (62) expresionsig -> AND . r_pila_operadores_push_and expresion
    (184) r_pila_operadores_push_and -> .

    PARIZQ          reduce using rule 184 (r_pila_operadores_push_and -> .)
    ID              reduce using rule 184 (r_pila_operadores_push_and -> .)
    MAS             reduce using rule 184 (r_pila_operadores_push_and -> .)
    MENOS           reduce using rule 184 (r_pila_operadores_push_and -> .)
    CTEI            reduce using rule 184 (r_pila_operadores_push_and -> .)
    CTEF            reduce using rule 184 (r_pila_operadores_push_and -> .)

    r_pila_operadores_push_and     shift and go to state 225

state 182

    (63) expresionsig -> OR . r_pila_operadores_push_or expresion
    (185) r_pila_operadores_push_or -> .

    PARIZQ          reduce using rule 185 (r_pila_operadores_push_or -> .)
    ID              reduce using rule 185 (r_pila_operadores_push_or -> .)
    MAS             reduce using rule 185 (r_pila_operadores_push_or -> .)
    MENOS           reduce using rule 185 (r_pila_operadores_push_or -> .)
    CTEI            reduce using rule 185 (r_pila_operadores_push_or -> .)
    CTEF            reduce using rule 185 (r_pila_operadores_push_or -> .)

    r_pila_operadores_push_or      shift and go to state 226

state 183

    (64) expresionsig -> MAYIGU . r_pila_operadores_push_mayigu expresionsigequal expresion
    (187) r_pila_operadores_push_mayigu -> .

    IGU             reduce using rule 187 (r_pila_operadores_push_mayigu -> .)
    PARIZQ          reduce using rule 187 (r_pila_operadores_push_mayigu -> .)
    ID              reduce using rule 187 (r_pila_operadores_push_mayigu -> .)
    MAS             reduce using rule 187 (r_pila_operadores_push_mayigu -> .)
    MENOS           reduce using rule 187 (r_pila_operadores_push_mayigu -> .)
    CTEI            reduce using rule 187 (r_pila_operadores_push_mayigu -> .)
    CTEF            reduce using rule 187 (r_pila_operadores_push_mayigu -> .)

    r_pila_operadores_push_mayigu  shift and go to state 227

state 184

    (65) expresionsig -> MENIGU . r_pila_operadores_push_menigu expresionsigequal expresion
    (188) r_pila_operadores_push_menigu -> .

    IGU             reduce using rule 188 (r_pila_operadores_push_menigu -> .)
    PARIZQ          reduce using rule 188 (r_pila_operadores_push_menigu -> .)
    ID              reduce using rule 188 (r_pila_operadores_push_menigu -> .)
    MAS             reduce using rule 188 (r_pila_operadores_push_menigu -> .)
    MENOS           reduce using rule 188 (r_pila_operadores_push_menigu -> .)
    CTEI            reduce using rule 188 (r_pila_operadores_push_menigu -> .)
    CTEF            reduce using rule 188 (r_pila_operadores_push_menigu -> .)

    r_pila_operadores_push_menigu  shift and go to state 228

state 185

    (66) expresionsig -> empty .

    PARDER          reduce using rule 66 (expresionsig -> empty .)
    COMA            reduce using rule 66 (expresionsig -> empty .)
    TO              reduce using rule 66 (expresionsig -> empty .)
    CORDER          reduce using rule 66 (expresionsig -> empty .)
    DO              reduce using rule 66 (expresionsig -> empty .)
    PTOCOM          reduce using rule 66 (expresionsig -> empty .)


state 186

    (69) exp -> termino r_pop_mas expciclo .

    MAY             reduce using rule 69 (exp -> termino r_pop_mas expciclo .)
    MEN             reduce using rule 69 (exp -> termino r_pop_mas expciclo .)
    DIF             reduce using rule 69 (exp -> termino r_pop_mas expciclo .)
    IGUIGU          reduce using rule 69 (exp -> termino r_pop_mas expciclo .)
    AND             reduce using rule 69 (exp -> termino r_pop_mas expciclo .)
    OR              reduce using rule 69 (exp -> termino r_pop_mas expciclo .)
    MAYIGU          reduce using rule 69 (exp -> termino r_pop_mas expciclo .)
    MENIGU          reduce using rule 69 (exp -> termino r_pop_mas expciclo .)
    PARDER          reduce using rule 69 (exp -> termino r_pop_mas expciclo .)
    COMA            reduce using rule 69 (exp -> termino r_pop_mas expciclo .)
    TO              reduce using rule 69 (exp -> termino r_pop_mas expciclo .)
    CORDER          reduce using rule 69 (exp -> termino r_pop_mas expciclo .)
    DO              reduce using rule 69 (exp -> termino r_pop_mas expciclo .)
    PTOCOM          reduce using rule 69 (exp -> termino r_pop_mas expciclo .)


state 187

    (70) expciclo -> MAS . r_pila_operadores_push_mas exp
    (178) r_pila_operadores_push_mas -> .

    PARIZQ          reduce using rule 178 (r_pila_operadores_push_mas -> .)
    ID              reduce using rule 178 (r_pila_operadores_push_mas -> .)
    MAS             reduce using rule 178 (r_pila_operadores_push_mas -> .)
    MENOS           reduce using rule 178 (r_pila_operadores_push_mas -> .)
    CTEI            reduce using rule 178 (r_pila_operadores_push_mas -> .)
    CTEF            reduce using rule 178 (r_pila_operadores_push_mas -> .)

    r_pila_operadores_push_mas     shift and go to state 229

state 188

    (71) expciclo -> MENOS . r_pila_operadores_push_menos exp
    (179) r_pila_operadores_push_menos -> .

    PARIZQ          reduce using rule 179 (r_pila_operadores_push_menos -> .)
    ID              reduce using rule 179 (r_pila_operadores_push_menos -> .)
    MAS             reduce using rule 179 (r_pila_operadores_push_menos -> .)
    MENOS           reduce using rule 179 (r_pila_operadores_push_menos -> .)
    CTEI            reduce using rule 179 (r_pila_operadores_push_menos -> .)
    CTEF            reduce using rule 179 (r_pila_operadores_push_menos -> .)

    r_pila_operadores_push_menos   shift and go to state 230

state 189

    (72) expciclo -> empty .

    MAY             reduce using rule 72 (expciclo -> empty .)
    MEN             reduce using rule 72 (expciclo -> empty .)
    DIF             reduce using rule 72 (expciclo -> empty .)
    IGUIGU          reduce using rule 72 (expciclo -> empty .)
    AND             reduce using rule 72 (expciclo -> empty .)
    OR              reduce using rule 72 (expciclo -> empty .)
    MAYIGU          reduce using rule 72 (expciclo -> empty .)
    MENIGU          reduce using rule 72 (expciclo -> empty .)
    PARDER          reduce using rule 72 (expciclo -> empty .)
    COMA            reduce using rule 72 (expciclo -> empty .)
    TO              reduce using rule 72 (expciclo -> empty .)
    CORDER          reduce using rule 72 (expciclo -> empty .)
    DO              reduce using rule 72 (expciclo -> empty .)
    PTOCOM          reduce using rule 72 (expciclo -> empty .)


state 190

    (73) termino -> factor r_pop_mult factorciclo .

    MAS             reduce using rule 73 (termino -> factor r_pop_mult factorciclo .)
    MENOS           reduce using rule 73 (termino -> factor r_pop_mult factorciclo .)
    MAY             reduce using rule 73 (termino -> factor r_pop_mult factorciclo .)
    MEN             reduce using rule 73 (termino -> factor r_pop_mult factorciclo .)
    DIF             reduce using rule 73 (termino -> factor r_pop_mult factorciclo .)
    IGUIGU          reduce using rule 73 (termino -> factor r_pop_mult factorciclo .)
    AND             reduce using rule 73 (termino -> factor r_pop_mult factorciclo .)
    OR              reduce using rule 73 (termino -> factor r_pop_mult factorciclo .)
    MAYIGU          reduce using rule 73 (termino -> factor r_pop_mult factorciclo .)
    MENIGU          reduce using rule 73 (termino -> factor r_pop_mult factorciclo .)
    PARDER          reduce using rule 73 (termino -> factor r_pop_mult factorciclo .)
    COMA            reduce using rule 73 (termino -> factor r_pop_mult factorciclo .)
    TO              reduce using rule 73 (termino -> factor r_pop_mult factorciclo .)
    CORDER          reduce using rule 73 (termino -> factor r_pop_mult factorciclo .)
    DO              reduce using rule 73 (termino -> factor r_pop_mult factorciclo .)
    PTOCOM          reduce using rule 73 (termino -> factor r_pop_mult factorciclo .)


state 191

    (74) factorciclo -> MULT . r_pila_operadores_push_mult termino
    (176) r_pila_operadores_push_mult -> .

    PARIZQ          reduce using rule 176 (r_pila_operadores_push_mult -> .)
    ID              reduce using rule 176 (r_pila_operadores_push_mult -> .)
    MAS             reduce using rule 176 (r_pila_operadores_push_mult -> .)
    MENOS           reduce using rule 176 (r_pila_operadores_push_mult -> .)
    CTEI            reduce using rule 176 (r_pila_operadores_push_mult -> .)
    CTEF            reduce using rule 176 (r_pila_operadores_push_mult -> .)

    r_pila_operadores_push_mult    shift and go to state 231

state 192

    (75) factorciclo -> DIV . r_pila_operadores_push_div termino
    (177) r_pila_operadores_push_div -> .

    PARIZQ          reduce using rule 177 (r_pila_operadores_push_div -> .)
    ID              reduce using rule 177 (r_pila_operadores_push_div -> .)
    MAS             reduce using rule 177 (r_pila_operadores_push_div -> .)
    MENOS           reduce using rule 177 (r_pila_operadores_push_div -> .)
    CTEI            reduce using rule 177 (r_pila_operadores_push_div -> .)
    CTEF            reduce using rule 177 (r_pila_operadores_push_div -> .)

    r_pila_operadores_push_div     shift and go to state 232

state 193

    (76) factorciclo -> empty .

    MAS             reduce using rule 76 (factorciclo -> empty .)
    MENOS           reduce using rule 76 (factorciclo -> empty .)
    MAY             reduce using rule 76 (factorciclo -> empty .)
    MEN             reduce using rule 76 (factorciclo -> empty .)
    DIF             reduce using rule 76 (factorciclo -> empty .)
    IGUIGU          reduce using rule 76 (factorciclo -> empty .)
    AND             reduce using rule 76 (factorciclo -> empty .)
    OR              reduce using rule 76 (factorciclo -> empty .)
    MAYIGU          reduce using rule 76 (factorciclo -> empty .)
    MENIGU          reduce using rule 76 (factorciclo -> empty .)
    PARDER          reduce using rule 76 (factorciclo -> empty .)
    COMA            reduce using rule 76 (factorciclo -> empty .)
    TO              reduce using rule 76 (factorciclo -> empty .)
    CORDER          reduce using rule 76 (factorciclo -> empty .)
    DO              reduce using rule 76 (factorciclo -> empty .)
    PTOCOM          reduce using rule 76 (factorciclo -> empty .)


state 194

    (90) varcte -> CTEI r_pila_operandos_push_cte_int .

    MULT            reduce using rule 90 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    DIV             reduce using rule 90 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    MAS             reduce using rule 90 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    MENOS           reduce using rule 90 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    MAY             reduce using rule 90 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    MEN             reduce using rule 90 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    DIF             reduce using rule 90 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    IGUIGU          reduce using rule 90 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    AND             reduce using rule 90 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    OR              reduce using rule 90 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    MAYIGU          reduce using rule 90 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    MENIGU          reduce using rule 90 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    PARDER          reduce using rule 90 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    COMA            reduce using rule 90 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    TO              reduce using rule 90 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    CORDER          reduce using rule 90 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    DO              reduce using rule 90 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    PTOCOM          reduce using rule 90 (varcte -> CTEI r_pila_operandos_push_cte_int .)


state 195

    (91) varcte -> CTEF r_pila_operandos_push_cte_flt .

    MULT            reduce using rule 91 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    DIV             reduce using rule 91 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    MAS             reduce using rule 91 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    MENOS           reduce using rule 91 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    MAY             reduce using rule 91 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    MEN             reduce using rule 91 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    DIF             reduce using rule 91 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    IGUIGU          reduce using rule 91 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    AND             reduce using rule 91 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    OR              reduce using rule 91 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    MAYIGU          reduce using rule 91 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    MENIGU          reduce using rule 91 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    PARDER          reduce using rule 91 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    COMA            reduce using rule 91 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    TO              reduce using rule 91 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    CORDER          reduce using rule 91 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    DO              reduce using rule 91 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    PTOCOM          reduce using rule 91 (varcte -> CTEF r_pila_operandos_push_cte_flt .)


state 196

    (79) factor -> ID r_verifica_variable_existe r_guardar_variable . opcionid r_pila_operandos_push
    (83) opcionid -> . PARIZQ r_era_funcion_retorno parametros r_terminar_parametro PARDER
    (84) opcionid -> . arrexp_uno arrexp_dos
    (85) arrexp_uno -> . CORIZQ r_push_arr expresion r_verifica_arrexp_uno CORDER
    (86) arrexp_uno -> . empty
    (122) empty -> .

  ! shift/reduce conflict for CORIZQ resolved as shift
    PARIZQ          shift and go to state 234
    CORIZQ          shift and go to state 135
    MULT            reduce using rule 122 (empty -> .)
    DIV             reduce using rule 122 (empty -> .)
    MAS             reduce using rule 122 (empty -> .)
    MENOS           reduce using rule 122 (empty -> .)
    MAY             reduce using rule 122 (empty -> .)
    MEN             reduce using rule 122 (empty -> .)
    DIF             reduce using rule 122 (empty -> .)
    IGUIGU          reduce using rule 122 (empty -> .)
    AND             reduce using rule 122 (empty -> .)
    OR              reduce using rule 122 (empty -> .)
    MAYIGU          reduce using rule 122 (empty -> .)
    MENIGU          reduce using rule 122 (empty -> .)
    PARDER          reduce using rule 122 (empty -> .)
    COMA            reduce using rule 122 (empty -> .)
    TO              reduce using rule 122 (empty -> .)
    CORDER          reduce using rule 122 (empty -> .)
    DO              reduce using rule 122 (empty -> .)
    PTOCOM          reduce using rule 122 (empty -> .)

  ! CORIZQ          [ reduce using rule 122 (empty -> .) ]

    opcionid                       shift and go to state 233
    arrexp_uno                     shift and go to state 235
    empty                          shift and go to state 136

state 197

    (100) escritura -> WRITE PARIZQ escrituraciclo otro PARDER . PTOCOM

    PTOCOM          shift and go to state 236


state 198

    (103) otro -> COMA escrituraciclo . otro
    (103) otro -> . COMA escrituraciclo otro
    (104) otro -> . empty
    (122) empty -> .

    COMA            shift and go to state 149
    PARDER          reduce using rule 122 (empty -> .)

    otro                           shift and go to state 237
    empty                          shift and go to state 150

state 199

    (105) lectura -> READ PARIZQ iddim r_genera_lectura ciclodim . PARDER PTOCOM

    PARDER          shift and go to state 238


state 200

    (106) ciclodim -> COMA . iddim r_genera_lectura ciclodim
    (108) iddim -> . ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp

    ID              shift and go to state 96

    iddim                          shift and go to state 239

state 201

    (107) ciclodim -> empty .

    PARDER          reduce using rule 107 (ciclodim -> empty .)


state 202

    (113) condicional -> WHILE r_while_paso_1 PARIZQ expresion PARDER . r_while_paso_2 DO bloque r_while_paso_3
    (156) r_while_paso_2 -> .

    DO              reduce using rule 156 (r_while_paso_2 -> .)

    r_while_paso_2                 shift and go to state 240

state 203

    (114) nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion . TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2

    TO              shift and go to state 241


state 204

    (108) iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id arrexp . arrexp
    (109) arrexp -> . CORIZQ expresion CORDER
    (110) arrexp -> . empty
    (122) empty -> .

    CORIZQ          shift and go to state 205
    IGU             reduce using rule 122 (empty -> .)
    COMA            reduce using rule 122 (empty -> .)
    PARDER          reduce using rule 122 (empty -> .)
    MULT            reduce using rule 122 (empty -> .)
    DIV             reduce using rule 122 (empty -> .)
    MAS             reduce using rule 122 (empty -> .)
    MENOS           reduce using rule 122 (empty -> .)
    MAY             reduce using rule 122 (empty -> .)
    MEN             reduce using rule 122 (empty -> .)
    DIF             reduce using rule 122 (empty -> .)
    IGUIGU          reduce using rule 122 (empty -> .)
    AND             reduce using rule 122 (empty -> .)
    OR              reduce using rule 122 (empty -> .)
    MAYIGU          reduce using rule 122 (empty -> .)
    MENIGU          reduce using rule 122 (empty -> .)
    TO              reduce using rule 122 (empty -> .)
    CORDER          reduce using rule 122 (empty -> .)
    DO              reduce using rule 122 (empty -> .)
    PTOCOM          reduce using rule 122 (empty -> .)

    arrexp                         shift and go to state 242
    empty                          shift and go to state 206

state 205

    (109) arrexp -> CORIZQ . expresion CORDER
    (57) expresion -> . exp r_pop_comp expresionsig
    (69) exp -> . termino r_pop_mas expciclo
    (73) termino -> . factor r_pop_mult factorciclo
    (77) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (78) factor -> . masomenos varcte
    (79) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (80) masomenos -> . MAS
    (81) masomenos -> . MENOS
    (82) masomenos -> . empty
    (122) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 109
    ID              shift and go to state 115
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    CTEI            reduce using rule 122 (empty -> .)
    CTEF            reduce using rule 122 (empty -> .)

  ! ID              [ reduce using rule 122 (empty -> .) ]

    expresion                      shift and go to state 243
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    masomenos                      shift and go to state 114
    empty                          shift and go to state 118

state 206

    (110) arrexp -> empty .

    CORIZQ          reduce using rule 110 (arrexp -> empty .)
    IGU             reduce using rule 110 (arrexp -> empty .)
    COMA            reduce using rule 110 (arrexp -> empty .)
    PARDER          reduce using rule 110 (arrexp -> empty .)
    MULT            reduce using rule 110 (arrexp -> empty .)
    DIV             reduce using rule 110 (arrexp -> empty .)
    MAS             reduce using rule 110 (arrexp -> empty .)
    MENOS           reduce using rule 110 (arrexp -> empty .)
    MAY             reduce using rule 110 (arrexp -> empty .)
    MEN             reduce using rule 110 (arrexp -> empty .)
    DIF             reduce using rule 110 (arrexp -> empty .)
    IGUIGU          reduce using rule 110 (arrexp -> empty .)
    AND             reduce using rule 110 (arrexp -> empty .)
    OR              reduce using rule 110 (arrexp -> empty .)
    MAYIGU          reduce using rule 110 (arrexp -> empty .)
    MENIGU          reduce using rule 110 (arrexp -> empty .)
    TO              reduce using rule 110 (arrexp -> empty .)
    CORDER          reduce using rule 110 (arrexp -> empty .)
    DO              reduce using rule 110 (arrexp -> empty .)
    PTOCOM          reduce using rule 110 (arrexp -> empty .)


state 207

    (28) funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types . opvars r_register_quad bloque r_endfunc
    (2) opvars -> . vars
    (3) opvars -> . empty
    (6) vars -> . VARTOKEN tipo ID r_register_variable_name arr_uno arr_dos r_verify_array varciclo PTOCOM tipociclo
    (122) empty -> .

    VARTOKEN        shift and go to state 10
    KEYIZQ          reduce using rule 122 (empty -> .)

    opvars                         shift and go to state 244
    vars                           shift and go to state 8
    empty                          shift and go to state 9

state 208

    (33) funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars . r_register_quad bloquefunc r_endfunc r_asegurar_return
    (133) r_register_quad -> .

    KEYIZQ          reduce using rule 133 (r_register_quad -> .)

    r_register_quad                shift and go to state 245

state 209

    (34) ident -> ID r_register_variable_name arrini arrini .

    COMA            reduce using rule 34 (ident -> ID r_register_variable_name arrini arrini .)
    PARDER          reduce using rule 34 (ident -> ID r_register_variable_name arrini arrini .)


state 210

    (35) arrini -> CORIZQ CORDER .

    CORIZQ          reduce using rule 35 (arrini -> CORIZQ CORDER .)
    COMA            reduce using rule 35 (arrini -> CORIZQ CORDER .)
    PARDER          reduce using rule 35 (arrini -> CORIZQ CORDER .)


state 211

    (17) opciontipo -> ID r_register_variable_name . arr_uno arr_dos r_verify_array varciclo PTOCOM tipociclo
    (11) arr_uno -> . CORIZQ CTEI r_arr_dim_uno CORDER
    (12) arr_uno -> . empty
    (122) empty -> .

  ! shift/reduce conflict for CORIZQ resolved as shift
    CORIZQ          shift and go to state 44
    COMA            reduce using rule 122 (empty -> .)
    PTOCOM          reduce using rule 122 (empty -> .)

  ! CORIZQ          [ reduce using rule 122 (empty -> .) ]

    arr_uno                        shift and go to state 246
    empty                          shift and go to state 45

state 212

    (18) opciontipo -> MODULE ID . r_update_func_type r_update_curr_function_name_especial PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return
    (132) r_update_func_type -> .

    PARIZQ          reduce using rule 132 (r_update_func_type -> .)

    r_update_func_type             shift and go to state 247

state 213

    (7) varciclo -> COMA ID r_register_variable_name arr_uno arr_dos . r_verify_array varciclo
    (148) r_verify_array -> .

    COMA            reduce using rule 148 (r_verify_array -> .)
    PTOCOM          reduce using rule 148 (r_verify_array -> .)

    r_verify_array                 shift and go to state 248

state 214

    (56) asignacion -> ID r_verifica_variable_existe r_guardar_variable arrexp_uno arrexp_dos r_pila_operandos_push_id . IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM

    IGU             shift and go to state 249


state 215

    (87) arrexp_dos -> CORIZQ r_push_arr . expresion r_verifica_arrexp_dos CORDER
    (57) expresion -> . exp r_pop_comp expresionsig
    (69) exp -> . termino r_pop_mas expciclo
    (73) termino -> . factor r_pop_mult factorciclo
    (77) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (78) factor -> . masomenos varcte
    (79) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (80) masomenos -> . MAS
    (81) masomenos -> . MENOS
    (82) masomenos -> . empty
    (122) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 109
    ID              shift and go to state 115
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    CTEI            reduce using rule 122 (empty -> .)
    CTEF            reduce using rule 122 (empty -> .)

  ! ID              [ reduce using rule 122 (empty -> .) ]

    expresion                      shift and go to state 250
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    masomenos                      shift and go to state 114
    empty                          shift and go to state 118

state 216

    (85) arrexp_uno -> CORIZQ r_push_arr expresion . r_verifica_arrexp_uno CORDER
    (150) r_verifica_arrexp_uno -> .

    CORDER          reduce using rule 150 (r_verifica_arrexp_uno -> .)

    r_verifica_arrexp_uno          shift and go to state 251

state 217

    (96) llamadafunc -> ID r_verifica_void PARIZQ r_era_funcion_void parametros r_terminar_parametro_void . PARDER PTOCOM

    PARDER          shift and go to state 252


state 218

    (92) parametros -> expresion r_extraer_parametro . cicloparametros
    (94) cicloparametros -> . COMA expresion r_extraer_parametro cicloparametros
    (95) cicloparametros -> . empty
    (122) empty -> .

    COMA            shift and go to state 254
    PARDER          reduce using rule 122 (empty -> .)

    cicloparametros                shift and go to state 253
    empty                          shift and go to state 255

state 219

    (77) factor -> PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila . PARDER

    PARDER          shift and go to state 256


state 220

    (97) decision -> IF PARIZQ expresion PARDER r_if_paso_1 THEN . bloque decision_else r_if_paso_3
    (37) bloque -> . KEYIZQ bloqueopcion KEYDER

    KEYIZQ          shift and go to state 54

    bloque                         shift and go to state 257

state 221

    (58) expresionsig -> MAY r_pila_operadores_push_may . expresionsigequal expresion
    (67) expresionsigequal -> . IGU
    (68) expresionsigequal -> . empty
    (122) empty -> .

    IGU             shift and go to state 259
    PARIZQ          reduce using rule 122 (empty -> .)
    ID              reduce using rule 122 (empty -> .)
    MAS             reduce using rule 122 (empty -> .)
    MENOS           reduce using rule 122 (empty -> .)
    CTEI            reduce using rule 122 (empty -> .)
    CTEF            reduce using rule 122 (empty -> .)

    expresionsigequal              shift and go to state 258
    empty                          shift and go to state 260

state 222

    (59) expresionsig -> MEN r_pila_operadores_push_men . expresionsigequal expresion
    (67) expresionsigequal -> . IGU
    (68) expresionsigequal -> . empty
    (122) empty -> .

    IGU             shift and go to state 259
    PARIZQ          reduce using rule 122 (empty -> .)
    ID              reduce using rule 122 (empty -> .)
    MAS             reduce using rule 122 (empty -> .)
    MENOS           reduce using rule 122 (empty -> .)
    CTEI            reduce using rule 122 (empty -> .)
    CTEF            reduce using rule 122 (empty -> .)

    expresionsigequal              shift and go to state 261
    empty                          shift and go to state 260

state 223

    (60) expresionsig -> DIF r_pila_operadores_push_dif . expresion
    (57) expresion -> . exp r_pop_comp expresionsig
    (69) exp -> . termino r_pop_mas expciclo
    (73) termino -> . factor r_pop_mult factorciclo
    (77) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (78) factor -> . masomenos varcte
    (79) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (80) masomenos -> . MAS
    (81) masomenos -> . MENOS
    (82) masomenos -> . empty
    (122) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 109
    ID              shift and go to state 115
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    CTEI            reduce using rule 122 (empty -> .)
    CTEF            reduce using rule 122 (empty -> .)

  ! ID              [ reduce using rule 122 (empty -> .) ]

    expresion                      shift and go to state 262
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    masomenos                      shift and go to state 114
    empty                          shift and go to state 118

state 224

    (61) expresionsig -> IGUIGU r_pila_operadores_push_iguigu . expresion
    (57) expresion -> . exp r_pop_comp expresionsig
    (69) exp -> . termino r_pop_mas expciclo
    (73) termino -> . factor r_pop_mult factorciclo
    (77) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (78) factor -> . masomenos varcte
    (79) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (80) masomenos -> . MAS
    (81) masomenos -> . MENOS
    (82) masomenos -> . empty
    (122) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 109
    ID              shift and go to state 115
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    CTEI            reduce using rule 122 (empty -> .)
    CTEF            reduce using rule 122 (empty -> .)

  ! ID              [ reduce using rule 122 (empty -> .) ]

    expresion                      shift and go to state 263
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    masomenos                      shift and go to state 114
    empty                          shift and go to state 118

state 225

    (62) expresionsig -> AND r_pila_operadores_push_and . expresion
    (57) expresion -> . exp r_pop_comp expresionsig
    (69) exp -> . termino r_pop_mas expciclo
    (73) termino -> . factor r_pop_mult factorciclo
    (77) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (78) factor -> . masomenos varcte
    (79) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (80) masomenos -> . MAS
    (81) masomenos -> . MENOS
    (82) masomenos -> . empty
    (122) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 109
    ID              shift and go to state 115
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    CTEI            reduce using rule 122 (empty -> .)
    CTEF            reduce using rule 122 (empty -> .)

  ! ID              [ reduce using rule 122 (empty -> .) ]

    expresion                      shift and go to state 264
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    masomenos                      shift and go to state 114
    empty                          shift and go to state 118

state 226

    (63) expresionsig -> OR r_pila_operadores_push_or . expresion
    (57) expresion -> . exp r_pop_comp expresionsig
    (69) exp -> . termino r_pop_mas expciclo
    (73) termino -> . factor r_pop_mult factorciclo
    (77) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (78) factor -> . masomenos varcte
    (79) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (80) masomenos -> . MAS
    (81) masomenos -> . MENOS
    (82) masomenos -> . empty
    (122) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 109
    ID              shift and go to state 115
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    CTEI            reduce using rule 122 (empty -> .)
    CTEF            reduce using rule 122 (empty -> .)

  ! ID              [ reduce using rule 122 (empty -> .) ]

    expresion                      shift and go to state 265
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    masomenos                      shift and go to state 114
    empty                          shift and go to state 118

state 227

    (64) expresionsig -> MAYIGU r_pila_operadores_push_mayigu . expresionsigequal expresion
    (67) expresionsigequal -> . IGU
    (68) expresionsigequal -> . empty
    (122) empty -> .

    IGU             shift and go to state 259
    PARIZQ          reduce using rule 122 (empty -> .)
    ID              reduce using rule 122 (empty -> .)
    MAS             reduce using rule 122 (empty -> .)
    MENOS           reduce using rule 122 (empty -> .)
    CTEI            reduce using rule 122 (empty -> .)
    CTEF            reduce using rule 122 (empty -> .)

    expresionsigequal              shift and go to state 266
    empty                          shift and go to state 260

state 228

    (65) expresionsig -> MENIGU r_pila_operadores_push_menigu . expresionsigequal expresion
    (67) expresionsigequal -> . IGU
    (68) expresionsigequal -> . empty
    (122) empty -> .

    IGU             shift and go to state 259
    PARIZQ          reduce using rule 122 (empty -> .)
    ID              reduce using rule 122 (empty -> .)
    MAS             reduce using rule 122 (empty -> .)
    MENOS           reduce using rule 122 (empty -> .)
    CTEI            reduce using rule 122 (empty -> .)
    CTEF            reduce using rule 122 (empty -> .)

    expresionsigequal              shift and go to state 267
    empty                          shift and go to state 260

state 229

    (70) expciclo -> MAS r_pila_operadores_push_mas . exp
    (69) exp -> . termino r_pop_mas expciclo
    (73) termino -> . factor r_pop_mult factorciclo
    (77) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (78) factor -> . masomenos varcte
    (79) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (80) masomenos -> . MAS
    (81) masomenos -> . MENOS
    (82) masomenos -> . empty
    (122) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 109
    ID              shift and go to state 115
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    CTEI            reduce using rule 122 (empty -> .)
    CTEF            reduce using rule 122 (empty -> .)

  ! ID              [ reduce using rule 122 (empty -> .) ]

    exp                            shift and go to state 268
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    masomenos                      shift and go to state 114
    empty                          shift and go to state 118

state 230

    (71) expciclo -> MENOS r_pila_operadores_push_menos . exp
    (69) exp -> . termino r_pop_mas expciclo
    (73) termino -> . factor r_pop_mult factorciclo
    (77) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (78) factor -> . masomenos varcte
    (79) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (80) masomenos -> . MAS
    (81) masomenos -> . MENOS
    (82) masomenos -> . empty
    (122) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 109
    ID              shift and go to state 115
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    CTEI            reduce using rule 122 (empty -> .)
    CTEF            reduce using rule 122 (empty -> .)

  ! ID              [ reduce using rule 122 (empty -> .) ]

    exp                            shift and go to state 269
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    masomenos                      shift and go to state 114
    empty                          shift and go to state 118

state 231

    (74) factorciclo -> MULT r_pila_operadores_push_mult . termino
    (73) termino -> . factor r_pop_mult factorciclo
    (77) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (78) factor -> . masomenos varcte
    (79) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (80) masomenos -> . MAS
    (81) masomenos -> . MENOS
    (82) masomenos -> . empty
    (122) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 109
    ID              shift and go to state 115
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    CTEI            reduce using rule 122 (empty -> .)
    CTEF            reduce using rule 122 (empty -> .)

  ! ID              [ reduce using rule 122 (empty -> .) ]

    termino                        shift and go to state 270
    factor                         shift and go to state 113
    masomenos                      shift and go to state 114
    empty                          shift and go to state 118

state 232

    (75) factorciclo -> DIV r_pila_operadores_push_div . termino
    (73) termino -> . factor r_pop_mult factorciclo
    (77) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (78) factor -> . masomenos varcte
    (79) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (80) masomenos -> . MAS
    (81) masomenos -> . MENOS
    (82) masomenos -> . empty
    (122) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 109
    ID              shift and go to state 115
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    CTEI            reduce using rule 122 (empty -> .)
    CTEF            reduce using rule 122 (empty -> .)

  ! ID              [ reduce using rule 122 (empty -> .) ]

    termino                        shift and go to state 271
    factor                         shift and go to state 113
    masomenos                      shift and go to state 114
    empty                          shift and go to state 118

state 233

    (79) factor -> ID r_verifica_variable_existe r_guardar_variable opcionid . r_pila_operandos_push
    (162) r_pila_operandos_push -> .

    MULT            reduce using rule 162 (r_pila_operandos_push -> .)
    DIV             reduce using rule 162 (r_pila_operandos_push -> .)
    MAS             reduce using rule 162 (r_pila_operandos_push -> .)
    MENOS           reduce using rule 162 (r_pila_operandos_push -> .)
    MAY             reduce using rule 162 (r_pila_operandos_push -> .)
    MEN             reduce using rule 162 (r_pila_operandos_push -> .)
    DIF             reduce using rule 162 (r_pila_operandos_push -> .)
    IGUIGU          reduce using rule 162 (r_pila_operandos_push -> .)
    AND             reduce using rule 162 (r_pila_operandos_push -> .)
    OR              reduce using rule 162 (r_pila_operandos_push -> .)
    MAYIGU          reduce using rule 162 (r_pila_operandos_push -> .)
    MENIGU          reduce using rule 162 (r_pila_operandos_push -> .)
    PARDER          reduce using rule 162 (r_pila_operandos_push -> .)
    COMA            reduce using rule 162 (r_pila_operandos_push -> .)
    TO              reduce using rule 162 (r_pila_operandos_push -> .)
    CORDER          reduce using rule 162 (r_pila_operandos_push -> .)
    DO              reduce using rule 162 (r_pila_operandos_push -> .)
    PTOCOM          reduce using rule 162 (r_pila_operandos_push -> .)

    r_pila_operandos_push          shift and go to state 272

state 234

    (83) opcionid -> PARIZQ . r_era_funcion_retorno parametros r_terminar_parametro PARDER
    (135) r_era_funcion_retorno -> .

    PARIZQ          reduce using rule 135 (r_era_funcion_retorno -> .)
    ID              reduce using rule 135 (r_era_funcion_retorno -> .)
    MAS             reduce using rule 135 (r_era_funcion_retorno -> .)
    MENOS           reduce using rule 135 (r_era_funcion_retorno -> .)
    PARDER          reduce using rule 135 (r_era_funcion_retorno -> .)
    CTEI            reduce using rule 135 (r_era_funcion_retorno -> .)
    CTEF            reduce using rule 135 (r_era_funcion_retorno -> .)

    r_era_funcion_retorno          shift and go to state 273

state 235

    (84) opcionid -> arrexp_uno . arrexp_dos
    (87) arrexp_dos -> . CORIZQ r_push_arr expresion r_verifica_arrexp_dos CORDER
    (88) arrexp_dos -> . empty
    (122) empty -> .

    CORIZQ          shift and go to state 168
    MULT            reduce using rule 122 (empty -> .)
    DIV             reduce using rule 122 (empty -> .)
    MAS             reduce using rule 122 (empty -> .)
    MENOS           reduce using rule 122 (empty -> .)
    MAY             reduce using rule 122 (empty -> .)
    MEN             reduce using rule 122 (empty -> .)
    DIF             reduce using rule 122 (empty -> .)
    IGUIGU          reduce using rule 122 (empty -> .)
    AND             reduce using rule 122 (empty -> .)
    OR              reduce using rule 122 (empty -> .)
    MAYIGU          reduce using rule 122 (empty -> .)
    MENIGU          reduce using rule 122 (empty -> .)
    PARDER          reduce using rule 122 (empty -> .)
    COMA            reduce using rule 122 (empty -> .)
    TO              reduce using rule 122 (empty -> .)
    CORDER          reduce using rule 122 (empty -> .)
    DO              reduce using rule 122 (empty -> .)
    PTOCOM          reduce using rule 122 (empty -> .)

    arrexp_dos                     shift and go to state 274
    empty                          shift and go to state 169

state 236

    (100) escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM .

    ID              reduce using rule 100 (escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM .)
    IF              reduce using rule 100 (escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM .)
    WRITE           reduce using rule 100 (escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM .)
    READ            reduce using rule 100 (escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM .)
    WHILE           reduce using rule 100 (escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM .)
    FOR             reduce using rule 100 (escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM .)
    KEYDER          reduce using rule 100 (escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM .)
    RETURN          reduce using rule 100 (escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM .)


state 237

    (103) otro -> COMA escrituraciclo otro .

    PARDER          reduce using rule 103 (otro -> COMA escrituraciclo otro .)


state 238

    (105) lectura -> READ PARIZQ iddim r_genera_lectura ciclodim PARDER . PTOCOM

    PTOCOM          shift and go to state 275


state 239

    (106) ciclodim -> COMA iddim . r_genera_lectura ciclodim
    (170) r_genera_lectura -> .

    COMA            reduce using rule 170 (r_genera_lectura -> .)
    PARDER          reduce using rule 170 (r_genera_lectura -> .)

    r_genera_lectura               shift and go to state 276

state 240

    (113) condicional -> WHILE r_while_paso_1 PARIZQ expresion PARDER r_while_paso_2 . DO bloque r_while_paso_3

    DO              shift and go to state 277


state 241

    (114) nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion TO . r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2
    (158) r_pop_igu_for -> .

    PARIZQ          reduce using rule 158 (r_pop_igu_for -> .)
    ID              reduce using rule 158 (r_pop_igu_for -> .)
    MAS             reduce using rule 158 (r_pop_igu_for -> .)
    MENOS           reduce using rule 158 (r_pop_igu_for -> .)
    CTEI            reduce using rule 158 (r_pop_igu_for -> .)
    CTEF            reduce using rule 158 (r_pop_igu_for -> .)

    r_pop_igu_for                  shift and go to state 278

state 242

    (108) iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp .

    IGU             reduce using rule 108 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp .)
    COMA            reduce using rule 108 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp .)
    PARDER          reduce using rule 108 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp .)
    MULT            reduce using rule 108 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp .)
    DIV             reduce using rule 108 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp .)
    MAS             reduce using rule 108 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp .)
    MENOS           reduce using rule 108 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp .)
    MAY             reduce using rule 108 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp .)
    MEN             reduce using rule 108 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp .)
    DIF             reduce using rule 108 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp .)
    IGUIGU          reduce using rule 108 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp .)
    AND             reduce using rule 108 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp .)
    OR              reduce using rule 108 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp .)
    MAYIGU          reduce using rule 108 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp .)
    MENIGU          reduce using rule 108 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp .)
    TO              reduce using rule 108 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp .)
    CORDER          reduce using rule 108 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp .)
    DO              reduce using rule 108 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp .)
    PTOCOM          reduce using rule 108 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp .)


state 243

    (109) arrexp -> CORIZQ expresion . CORDER

    CORDER          shift and go to state 279


state 244

    (28) funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars . r_register_quad bloque r_endfunc
    (133) r_register_quad -> .

    KEYIZQ          reduce using rule 133 (r_register_quad -> .)

    r_register_quad                shift and go to state 280

state 245

    (33) funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad . bloquefunc r_endfunc r_asegurar_return
    (40) bloquefunc -> . KEYIZQ bloqueopcionfunc KEYDER

    KEYIZQ          shift and go to state 282

    bloquefunc                     shift and go to state 281

state 246

    (17) opciontipo -> ID r_register_variable_name arr_uno . arr_dos r_verify_array varciclo PTOCOM tipociclo
    (13) arr_dos -> . CORIZQ CTEI r_arr_dim_dos CORDER
    (14) arr_dos -> . empty
    (122) empty -> .

    CORIZQ          shift and go to state 50
    COMA            reduce using rule 122 (empty -> .)
    PTOCOM          reduce using rule 122 (empty -> .)

    arr_dos                        shift and go to state 283
    empty                          shift and go to state 51

state 247

    (18) opciontipo -> MODULE ID r_update_func_type . r_update_curr_function_name_especial PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return
    (128) r_update_curr_function_name_especial -> .

    PARIZQ          reduce using rule 128 (r_update_curr_function_name_especial -> .)

    r_update_curr_function_name_especial shift and go to state 284

state 248

    (7) varciclo -> COMA ID r_register_variable_name arr_uno arr_dos r_verify_array . varciclo
    (7) varciclo -> . COMA ID r_register_variable_name arr_uno arr_dos r_verify_array varciclo
    (8) varciclo -> . empty
    (122) empty -> .

    COMA            shift and go to state 83
    PTOCOM          reduce using rule 122 (empty -> .)

    varciclo                       shift and go to state 285
    empty                          shift and go to state 84

state 249

    (56) asignacion -> ID r_verifica_variable_existe r_guardar_variable arrexp_uno arrexp_dos r_pila_operandos_push_id IGU . r_pila_operadores_push_igu expresion r_pop_igu PTOCOM
    (186) r_pila_operadores_push_igu -> .

    PARIZQ          reduce using rule 186 (r_pila_operadores_push_igu -> .)
    ID              reduce using rule 186 (r_pila_operadores_push_igu -> .)
    MAS             reduce using rule 186 (r_pila_operadores_push_igu -> .)
    MENOS           reduce using rule 186 (r_pila_operadores_push_igu -> .)
    CTEI            reduce using rule 186 (r_pila_operadores_push_igu -> .)
    CTEF            reduce using rule 186 (r_pila_operadores_push_igu -> .)

    r_pila_operadores_push_igu     shift and go to state 286

state 250

    (87) arrexp_dos -> CORIZQ r_push_arr expresion . r_verifica_arrexp_dos CORDER
    (151) r_verifica_arrexp_dos -> .

    CORDER          reduce using rule 151 (r_verifica_arrexp_dos -> .)

    r_verifica_arrexp_dos          shift and go to state 287

state 251

    (85) arrexp_uno -> CORIZQ r_push_arr expresion r_verifica_arrexp_uno . CORDER

    CORDER          shift and go to state 288


state 252

    (96) llamadafunc -> ID r_verifica_void PARIZQ r_era_funcion_void parametros r_terminar_parametro_void PARDER . PTOCOM

    PTOCOM          shift and go to state 289


state 253

    (92) parametros -> expresion r_extraer_parametro cicloparametros .

    PARDER          reduce using rule 92 (parametros -> expresion r_extraer_parametro cicloparametros .)


state 254

    (94) cicloparametros -> COMA . expresion r_extraer_parametro cicloparametros
    (57) expresion -> . exp r_pop_comp expresionsig
    (69) exp -> . termino r_pop_mas expciclo
    (73) termino -> . factor r_pop_mult factorciclo
    (77) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (78) factor -> . masomenos varcte
    (79) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (80) masomenos -> . MAS
    (81) masomenos -> . MENOS
    (82) masomenos -> . empty
    (122) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 109
    ID              shift and go to state 115
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    CTEI            reduce using rule 122 (empty -> .)
    CTEF            reduce using rule 122 (empty -> .)

  ! ID              [ reduce using rule 122 (empty -> .) ]

    expresion                      shift and go to state 290
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    masomenos                      shift and go to state 114
    empty                          shift and go to state 118

state 255

    (95) cicloparametros -> empty .

    PARDER          reduce using rule 95 (cicloparametros -> empty .)


state 256

    (77) factor -> PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER .

    MULT            reduce using rule 77 (factor -> PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER .)
    DIV             reduce using rule 77 (factor -> PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER .)
    MAS             reduce using rule 77 (factor -> PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER .)
    MENOS           reduce using rule 77 (factor -> PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER .)
    MAY             reduce using rule 77 (factor -> PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER .)
    MEN             reduce using rule 77 (factor -> PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER .)
    DIF             reduce using rule 77 (factor -> PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER .)
    IGUIGU          reduce using rule 77 (factor -> PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER .)
    AND             reduce using rule 77 (factor -> PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER .)
    OR              reduce using rule 77 (factor -> PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER .)
    MAYIGU          reduce using rule 77 (factor -> PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER .)
    MENIGU          reduce using rule 77 (factor -> PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER .)
    PARDER          reduce using rule 77 (factor -> PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER .)
    COMA            reduce using rule 77 (factor -> PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER .)
    TO              reduce using rule 77 (factor -> PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER .)
    CORDER          reduce using rule 77 (factor -> PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER .)
    DO              reduce using rule 77 (factor -> PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER .)
    PTOCOM          reduce using rule 77 (factor -> PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER .)


state 257

    (97) decision -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloque . decision_else r_if_paso_3
    (98) decision_else -> . ELSE r_if_paso_2 bloque
    (99) decision_else -> . empty
    (122) empty -> .

    ELSE            shift and go to state 292
    ID              reduce using rule 122 (empty -> .)
    IF              reduce using rule 122 (empty -> .)
    WRITE           reduce using rule 122 (empty -> .)
    READ            reduce using rule 122 (empty -> .)
    WHILE           reduce using rule 122 (empty -> .)
    FOR             reduce using rule 122 (empty -> .)
    KEYDER          reduce using rule 122 (empty -> .)

    decision_else                  shift and go to state 291
    empty                          shift and go to state 293

state 258

    (58) expresionsig -> MAY r_pila_operadores_push_may expresionsigequal . expresion
    (57) expresion -> . exp r_pop_comp expresionsig
    (69) exp -> . termino r_pop_mas expciclo
    (73) termino -> . factor r_pop_mult factorciclo
    (77) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (78) factor -> . masomenos varcte
    (79) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (80) masomenos -> . MAS
    (81) masomenos -> . MENOS
    (82) masomenos -> . empty
    (122) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 109
    ID              shift and go to state 115
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    CTEI            reduce using rule 122 (empty -> .)
    CTEF            reduce using rule 122 (empty -> .)

  ! ID              [ reduce using rule 122 (empty -> .) ]

    expresion                      shift and go to state 294
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    masomenos                      shift and go to state 114
    empty                          shift and go to state 118

state 259

    (67) expresionsigequal -> IGU .

    PARIZQ          reduce using rule 67 (expresionsigequal -> IGU .)
    ID              reduce using rule 67 (expresionsigequal -> IGU .)
    MAS             reduce using rule 67 (expresionsigequal -> IGU .)
    MENOS           reduce using rule 67 (expresionsigequal -> IGU .)
    CTEI            reduce using rule 67 (expresionsigequal -> IGU .)
    CTEF            reduce using rule 67 (expresionsigequal -> IGU .)


state 260

    (68) expresionsigequal -> empty .

    PARIZQ          reduce using rule 68 (expresionsigequal -> empty .)
    ID              reduce using rule 68 (expresionsigequal -> empty .)
    MAS             reduce using rule 68 (expresionsigequal -> empty .)
    MENOS           reduce using rule 68 (expresionsigequal -> empty .)
    CTEI            reduce using rule 68 (expresionsigequal -> empty .)
    CTEF            reduce using rule 68 (expresionsigequal -> empty .)


state 261

    (59) expresionsig -> MEN r_pila_operadores_push_men expresionsigequal . expresion
    (57) expresion -> . exp r_pop_comp expresionsig
    (69) exp -> . termino r_pop_mas expciclo
    (73) termino -> . factor r_pop_mult factorciclo
    (77) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (78) factor -> . masomenos varcte
    (79) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (80) masomenos -> . MAS
    (81) masomenos -> . MENOS
    (82) masomenos -> . empty
    (122) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 109
    ID              shift and go to state 115
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    CTEI            reduce using rule 122 (empty -> .)
    CTEF            reduce using rule 122 (empty -> .)

  ! ID              [ reduce using rule 122 (empty -> .) ]

    expresion                      shift and go to state 295
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    masomenos                      shift and go to state 114
    empty                          shift and go to state 118

state 262

    (60) expresionsig -> DIF r_pila_operadores_push_dif expresion .

    PARDER          reduce using rule 60 (expresionsig -> DIF r_pila_operadores_push_dif expresion .)
    COMA            reduce using rule 60 (expresionsig -> DIF r_pila_operadores_push_dif expresion .)
    TO              reduce using rule 60 (expresionsig -> DIF r_pila_operadores_push_dif expresion .)
    CORDER          reduce using rule 60 (expresionsig -> DIF r_pila_operadores_push_dif expresion .)
    DO              reduce using rule 60 (expresionsig -> DIF r_pila_operadores_push_dif expresion .)
    PTOCOM          reduce using rule 60 (expresionsig -> DIF r_pila_operadores_push_dif expresion .)


state 263

    (61) expresionsig -> IGUIGU r_pila_operadores_push_iguigu expresion .

    PARDER          reduce using rule 61 (expresionsig -> IGUIGU r_pila_operadores_push_iguigu expresion .)
    COMA            reduce using rule 61 (expresionsig -> IGUIGU r_pila_operadores_push_iguigu expresion .)
    TO              reduce using rule 61 (expresionsig -> IGUIGU r_pila_operadores_push_iguigu expresion .)
    CORDER          reduce using rule 61 (expresionsig -> IGUIGU r_pila_operadores_push_iguigu expresion .)
    DO              reduce using rule 61 (expresionsig -> IGUIGU r_pila_operadores_push_iguigu expresion .)
    PTOCOM          reduce using rule 61 (expresionsig -> IGUIGU r_pila_operadores_push_iguigu expresion .)


state 264

    (62) expresionsig -> AND r_pila_operadores_push_and expresion .

    PARDER          reduce using rule 62 (expresionsig -> AND r_pila_operadores_push_and expresion .)
    COMA            reduce using rule 62 (expresionsig -> AND r_pila_operadores_push_and expresion .)
    TO              reduce using rule 62 (expresionsig -> AND r_pila_operadores_push_and expresion .)
    CORDER          reduce using rule 62 (expresionsig -> AND r_pila_operadores_push_and expresion .)
    DO              reduce using rule 62 (expresionsig -> AND r_pila_operadores_push_and expresion .)
    PTOCOM          reduce using rule 62 (expresionsig -> AND r_pila_operadores_push_and expresion .)


state 265

    (63) expresionsig -> OR r_pila_operadores_push_or expresion .

    PARDER          reduce using rule 63 (expresionsig -> OR r_pila_operadores_push_or expresion .)
    COMA            reduce using rule 63 (expresionsig -> OR r_pila_operadores_push_or expresion .)
    TO              reduce using rule 63 (expresionsig -> OR r_pila_operadores_push_or expresion .)
    CORDER          reduce using rule 63 (expresionsig -> OR r_pila_operadores_push_or expresion .)
    DO              reduce using rule 63 (expresionsig -> OR r_pila_operadores_push_or expresion .)
    PTOCOM          reduce using rule 63 (expresionsig -> OR r_pila_operadores_push_or expresion .)


state 266

    (64) expresionsig -> MAYIGU r_pila_operadores_push_mayigu expresionsigequal . expresion
    (57) expresion -> . exp r_pop_comp expresionsig
    (69) exp -> . termino r_pop_mas expciclo
    (73) termino -> . factor r_pop_mult factorciclo
    (77) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (78) factor -> . masomenos varcte
    (79) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (80) masomenos -> . MAS
    (81) masomenos -> . MENOS
    (82) masomenos -> . empty
    (122) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 109
    ID              shift and go to state 115
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    CTEI            reduce using rule 122 (empty -> .)
    CTEF            reduce using rule 122 (empty -> .)

  ! ID              [ reduce using rule 122 (empty -> .) ]

    expresion                      shift and go to state 296
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    masomenos                      shift and go to state 114
    empty                          shift and go to state 118

state 267

    (65) expresionsig -> MENIGU r_pila_operadores_push_menigu expresionsigequal . expresion
    (57) expresion -> . exp r_pop_comp expresionsig
    (69) exp -> . termino r_pop_mas expciclo
    (73) termino -> . factor r_pop_mult factorciclo
    (77) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (78) factor -> . masomenos varcte
    (79) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (80) masomenos -> . MAS
    (81) masomenos -> . MENOS
    (82) masomenos -> . empty
    (122) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 109
    ID              shift and go to state 115
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    CTEI            reduce using rule 122 (empty -> .)
    CTEF            reduce using rule 122 (empty -> .)

  ! ID              [ reduce using rule 122 (empty -> .) ]

    expresion                      shift and go to state 297
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    masomenos                      shift and go to state 114
    empty                          shift and go to state 118

state 268

    (70) expciclo -> MAS r_pila_operadores_push_mas exp .

    MAY             reduce using rule 70 (expciclo -> MAS r_pila_operadores_push_mas exp .)
    MEN             reduce using rule 70 (expciclo -> MAS r_pila_operadores_push_mas exp .)
    DIF             reduce using rule 70 (expciclo -> MAS r_pila_operadores_push_mas exp .)
    IGUIGU          reduce using rule 70 (expciclo -> MAS r_pila_operadores_push_mas exp .)
    AND             reduce using rule 70 (expciclo -> MAS r_pila_operadores_push_mas exp .)
    OR              reduce using rule 70 (expciclo -> MAS r_pila_operadores_push_mas exp .)
    MAYIGU          reduce using rule 70 (expciclo -> MAS r_pila_operadores_push_mas exp .)
    MENIGU          reduce using rule 70 (expciclo -> MAS r_pila_operadores_push_mas exp .)
    PARDER          reduce using rule 70 (expciclo -> MAS r_pila_operadores_push_mas exp .)
    COMA            reduce using rule 70 (expciclo -> MAS r_pila_operadores_push_mas exp .)
    TO              reduce using rule 70 (expciclo -> MAS r_pila_operadores_push_mas exp .)
    CORDER          reduce using rule 70 (expciclo -> MAS r_pila_operadores_push_mas exp .)
    DO              reduce using rule 70 (expciclo -> MAS r_pila_operadores_push_mas exp .)
    PTOCOM          reduce using rule 70 (expciclo -> MAS r_pila_operadores_push_mas exp .)


state 269

    (71) expciclo -> MENOS r_pila_operadores_push_menos exp .

    MAY             reduce using rule 71 (expciclo -> MENOS r_pila_operadores_push_menos exp .)
    MEN             reduce using rule 71 (expciclo -> MENOS r_pila_operadores_push_menos exp .)
    DIF             reduce using rule 71 (expciclo -> MENOS r_pila_operadores_push_menos exp .)
    IGUIGU          reduce using rule 71 (expciclo -> MENOS r_pila_operadores_push_menos exp .)
    AND             reduce using rule 71 (expciclo -> MENOS r_pila_operadores_push_menos exp .)
    OR              reduce using rule 71 (expciclo -> MENOS r_pila_operadores_push_menos exp .)
    MAYIGU          reduce using rule 71 (expciclo -> MENOS r_pila_operadores_push_menos exp .)
    MENIGU          reduce using rule 71 (expciclo -> MENOS r_pila_operadores_push_menos exp .)
    PARDER          reduce using rule 71 (expciclo -> MENOS r_pila_operadores_push_menos exp .)
    COMA            reduce using rule 71 (expciclo -> MENOS r_pila_operadores_push_menos exp .)
    TO              reduce using rule 71 (expciclo -> MENOS r_pila_operadores_push_menos exp .)
    CORDER          reduce using rule 71 (expciclo -> MENOS r_pila_operadores_push_menos exp .)
    DO              reduce using rule 71 (expciclo -> MENOS r_pila_operadores_push_menos exp .)
    PTOCOM          reduce using rule 71 (expciclo -> MENOS r_pila_operadores_push_menos exp .)


state 270

    (74) factorciclo -> MULT r_pila_operadores_push_mult termino .

    MAS             reduce using rule 74 (factorciclo -> MULT r_pila_operadores_push_mult termino .)
    MENOS           reduce using rule 74 (factorciclo -> MULT r_pila_operadores_push_mult termino .)
    MAY             reduce using rule 74 (factorciclo -> MULT r_pila_operadores_push_mult termino .)
    MEN             reduce using rule 74 (factorciclo -> MULT r_pila_operadores_push_mult termino .)
    DIF             reduce using rule 74 (factorciclo -> MULT r_pila_operadores_push_mult termino .)
    IGUIGU          reduce using rule 74 (factorciclo -> MULT r_pila_operadores_push_mult termino .)
    AND             reduce using rule 74 (factorciclo -> MULT r_pila_operadores_push_mult termino .)
    OR              reduce using rule 74 (factorciclo -> MULT r_pila_operadores_push_mult termino .)
    MAYIGU          reduce using rule 74 (factorciclo -> MULT r_pila_operadores_push_mult termino .)
    MENIGU          reduce using rule 74 (factorciclo -> MULT r_pila_operadores_push_mult termino .)
    PARDER          reduce using rule 74 (factorciclo -> MULT r_pila_operadores_push_mult termino .)
    COMA            reduce using rule 74 (factorciclo -> MULT r_pila_operadores_push_mult termino .)
    TO              reduce using rule 74 (factorciclo -> MULT r_pila_operadores_push_mult termino .)
    CORDER          reduce using rule 74 (factorciclo -> MULT r_pila_operadores_push_mult termino .)
    DO              reduce using rule 74 (factorciclo -> MULT r_pila_operadores_push_mult termino .)
    PTOCOM          reduce using rule 74 (factorciclo -> MULT r_pila_operadores_push_mult termino .)


state 271

    (75) factorciclo -> DIV r_pila_operadores_push_div termino .

    MAS             reduce using rule 75 (factorciclo -> DIV r_pila_operadores_push_div termino .)
    MENOS           reduce using rule 75 (factorciclo -> DIV r_pila_operadores_push_div termino .)
    MAY             reduce using rule 75 (factorciclo -> DIV r_pila_operadores_push_div termino .)
    MEN             reduce using rule 75 (factorciclo -> DIV r_pila_operadores_push_div termino .)
    DIF             reduce using rule 75 (factorciclo -> DIV r_pila_operadores_push_div termino .)
    IGUIGU          reduce using rule 75 (factorciclo -> DIV r_pila_operadores_push_div termino .)
    AND             reduce using rule 75 (factorciclo -> DIV r_pila_operadores_push_div termino .)
    OR              reduce using rule 75 (factorciclo -> DIV r_pila_operadores_push_div termino .)
    MAYIGU          reduce using rule 75 (factorciclo -> DIV r_pila_operadores_push_div termino .)
    MENIGU          reduce using rule 75 (factorciclo -> DIV r_pila_operadores_push_div termino .)
    PARDER          reduce using rule 75 (factorciclo -> DIV r_pila_operadores_push_div termino .)
    COMA            reduce using rule 75 (factorciclo -> DIV r_pila_operadores_push_div termino .)
    TO              reduce using rule 75 (factorciclo -> DIV r_pila_operadores_push_div termino .)
    CORDER          reduce using rule 75 (factorciclo -> DIV r_pila_operadores_push_div termino .)
    DO              reduce using rule 75 (factorciclo -> DIV r_pila_operadores_push_div termino .)
    PTOCOM          reduce using rule 75 (factorciclo -> DIV r_pila_operadores_push_div termino .)


state 272

    (79) factor -> ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push .

    MULT            reduce using rule 79 (factor -> ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push .)
    DIV             reduce using rule 79 (factor -> ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push .)
    MAS             reduce using rule 79 (factor -> ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push .)
    MENOS           reduce using rule 79 (factor -> ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push .)
    MAY             reduce using rule 79 (factor -> ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push .)
    MEN             reduce using rule 79 (factor -> ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push .)
    DIF             reduce using rule 79 (factor -> ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push .)
    IGUIGU          reduce using rule 79 (factor -> ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push .)
    AND             reduce using rule 79 (factor -> ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push .)
    OR              reduce using rule 79 (factor -> ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push .)
    MAYIGU          reduce using rule 79 (factor -> ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push .)
    MENIGU          reduce using rule 79 (factor -> ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push .)
    PARDER          reduce using rule 79 (factor -> ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push .)
    COMA            reduce using rule 79 (factor -> ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push .)
    TO              reduce using rule 79 (factor -> ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push .)
    CORDER          reduce using rule 79 (factor -> ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push .)
    DO              reduce using rule 79 (factor -> ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push .)
    PTOCOM          reduce using rule 79 (factor -> ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push .)


state 273

    (83) opcionid -> PARIZQ r_era_funcion_retorno . parametros r_terminar_parametro PARDER
    (92) parametros -> . expresion r_extraer_parametro cicloparametros
    (93) parametros -> . empty
    (57) expresion -> . exp r_pop_comp expresionsig
    (122) empty -> .
    (69) exp -> . termino r_pop_mas expciclo
    (73) termino -> . factor r_pop_mult factorciclo
    (77) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (78) factor -> . masomenos varcte
    (79) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (80) masomenos -> . MAS
    (81) masomenos -> . MENOS
    (82) masomenos -> . empty

  ! shift/reduce conflict for ID resolved as shift
    PARDER          reduce using rule 122 (empty -> .)
    CTEI            reduce using rule 122 (empty -> .)
    CTEF            reduce using rule 122 (empty -> .)
    PARIZQ          shift and go to state 109
    ID              shift and go to state 115
    MAS             shift and go to state 116
    MENOS           shift and go to state 117

  ! ID              [ reduce using rule 122 (empty -> .) ]

    parametros                     shift and go to state 298
    expresion                      shift and go to state 172
    empty                          shift and go to state 173
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    masomenos                      shift and go to state 114

state 274

    (84) opcionid -> arrexp_uno arrexp_dos .

    MULT            reduce using rule 84 (opcionid -> arrexp_uno arrexp_dos .)
    DIV             reduce using rule 84 (opcionid -> arrexp_uno arrexp_dos .)
    MAS             reduce using rule 84 (opcionid -> arrexp_uno arrexp_dos .)
    MENOS           reduce using rule 84 (opcionid -> arrexp_uno arrexp_dos .)
    MAY             reduce using rule 84 (opcionid -> arrexp_uno arrexp_dos .)
    MEN             reduce using rule 84 (opcionid -> arrexp_uno arrexp_dos .)
    DIF             reduce using rule 84 (opcionid -> arrexp_uno arrexp_dos .)
    IGUIGU          reduce using rule 84 (opcionid -> arrexp_uno arrexp_dos .)
    AND             reduce using rule 84 (opcionid -> arrexp_uno arrexp_dos .)
    OR              reduce using rule 84 (opcionid -> arrexp_uno arrexp_dos .)
    MAYIGU          reduce using rule 84 (opcionid -> arrexp_uno arrexp_dos .)
    MENIGU          reduce using rule 84 (opcionid -> arrexp_uno arrexp_dos .)
    PARDER          reduce using rule 84 (opcionid -> arrexp_uno arrexp_dos .)
    COMA            reduce using rule 84 (opcionid -> arrexp_uno arrexp_dos .)
    TO              reduce using rule 84 (opcionid -> arrexp_uno arrexp_dos .)
    CORDER          reduce using rule 84 (opcionid -> arrexp_uno arrexp_dos .)
    DO              reduce using rule 84 (opcionid -> arrexp_uno arrexp_dos .)
    PTOCOM          reduce using rule 84 (opcionid -> arrexp_uno arrexp_dos .)


state 275

    (105) lectura -> READ PARIZQ iddim r_genera_lectura ciclodim PARDER PTOCOM .

    ID              reduce using rule 105 (lectura -> READ PARIZQ iddim r_genera_lectura ciclodim PARDER PTOCOM .)
    IF              reduce using rule 105 (lectura -> READ PARIZQ iddim r_genera_lectura ciclodim PARDER PTOCOM .)
    WRITE           reduce using rule 105 (lectura -> READ PARIZQ iddim r_genera_lectura ciclodim PARDER PTOCOM .)
    READ            reduce using rule 105 (lectura -> READ PARIZQ iddim r_genera_lectura ciclodim PARDER PTOCOM .)
    WHILE           reduce using rule 105 (lectura -> READ PARIZQ iddim r_genera_lectura ciclodim PARDER PTOCOM .)
    FOR             reduce using rule 105 (lectura -> READ PARIZQ iddim r_genera_lectura ciclodim PARDER PTOCOM .)
    KEYDER          reduce using rule 105 (lectura -> READ PARIZQ iddim r_genera_lectura ciclodim PARDER PTOCOM .)
    RETURN          reduce using rule 105 (lectura -> READ PARIZQ iddim r_genera_lectura ciclodim PARDER PTOCOM .)


state 276

    (106) ciclodim -> COMA iddim r_genera_lectura . ciclodim
    (106) ciclodim -> . COMA iddim r_genera_lectura ciclodim
    (107) ciclodim -> . empty
    (122) empty -> .

    COMA            shift and go to state 200
    PARDER          reduce using rule 122 (empty -> .)

    ciclodim                       shift and go to state 299
    empty                          shift and go to state 201

state 277

    (113) condicional -> WHILE r_while_paso_1 PARIZQ expresion PARDER r_while_paso_2 DO . bloque r_while_paso_3
    (37) bloque -> . KEYIZQ bloqueopcion KEYDER

    KEYIZQ          shift and go to state 54

    bloque                         shift and go to state 300

state 278

    (114) nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for . expresion r_for_paso_1 DO bloque r_for_paso_2
    (57) expresion -> . exp r_pop_comp expresionsig
    (69) exp -> . termino r_pop_mas expciclo
    (73) termino -> . factor r_pop_mult factorciclo
    (77) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (78) factor -> . masomenos varcte
    (79) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (80) masomenos -> . MAS
    (81) masomenos -> . MENOS
    (82) masomenos -> . empty
    (122) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 109
    ID              shift and go to state 115
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    CTEI            reduce using rule 122 (empty -> .)
    CTEF            reduce using rule 122 (empty -> .)

  ! ID              [ reduce using rule 122 (empty -> .) ]

    expresion                      shift and go to state 301
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    masomenos                      shift and go to state 114
    empty                          shift and go to state 118

state 279

    (109) arrexp -> CORIZQ expresion CORDER .

    CORIZQ          reduce using rule 109 (arrexp -> CORIZQ expresion CORDER .)
    IGU             reduce using rule 109 (arrexp -> CORIZQ expresion CORDER .)
    COMA            reduce using rule 109 (arrexp -> CORIZQ expresion CORDER .)
    PARDER          reduce using rule 109 (arrexp -> CORIZQ expresion CORDER .)
    MULT            reduce using rule 109 (arrexp -> CORIZQ expresion CORDER .)
    DIV             reduce using rule 109 (arrexp -> CORIZQ expresion CORDER .)
    MAS             reduce using rule 109 (arrexp -> CORIZQ expresion CORDER .)
    MENOS           reduce using rule 109 (arrexp -> CORIZQ expresion CORDER .)
    MAY             reduce using rule 109 (arrexp -> CORIZQ expresion CORDER .)
    MEN             reduce using rule 109 (arrexp -> CORIZQ expresion CORDER .)
    DIF             reduce using rule 109 (arrexp -> CORIZQ expresion CORDER .)
    IGUIGU          reduce using rule 109 (arrexp -> CORIZQ expresion CORDER .)
    AND             reduce using rule 109 (arrexp -> CORIZQ expresion CORDER .)
    OR              reduce using rule 109 (arrexp -> CORIZQ expresion CORDER .)
    MAYIGU          reduce using rule 109 (arrexp -> CORIZQ expresion CORDER .)
    MENIGU          reduce using rule 109 (arrexp -> CORIZQ expresion CORDER .)
    TO              reduce using rule 109 (arrexp -> CORIZQ expresion CORDER .)
    CORDER          reduce using rule 109 (arrexp -> CORIZQ expresion CORDER .)
    DO              reduce using rule 109 (arrexp -> CORIZQ expresion CORDER .)
    PTOCOM          reduce using rule 109 (arrexp -> CORIZQ expresion CORDER .)


state 280

    (28) funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad . bloque r_endfunc
    (37) bloque -> . KEYIZQ bloqueopcion KEYDER

    KEYIZQ          shift and go to state 54

    bloque                         shift and go to state 302

state 281

    (33) funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc . r_endfunc r_asegurar_return
    (143) r_endfunc -> .

    VOID            reduce using rule 143 (r_endfunc -> .)
    INT             reduce using rule 143 (r_endfunc -> .)
    FLT             reduce using rule 143 (r_endfunc -> .)
    CHAR            reduce using rule 143 (r_endfunc -> .)
    MAIN            reduce using rule 143 (r_endfunc -> .)

    r_endfunc                      shift and go to state 303

state 282

    (40) bloquefunc -> KEYIZQ . bloqueopcionfunc KEYDER
    (41) bloqueopcionfunc -> . estatutofunc bloqueopcionfunc
    (42) bloqueopcionfunc -> . empty
    (49) estatutofunc -> . asignacion
    (50) estatutofunc -> . decisionfunc
    (51) estatutofunc -> . escritura
    (52) estatutofunc -> . llamadafunc
    (53) estatutofunc -> . repeticionfunc
    (54) estatutofunc -> . lectura
    (55) estatutofunc -> . RETURN PARIZQ expresion r_return_func PARDER PTOCOM
    (122) empty -> .
    (56) asignacion -> . ID r_verifica_variable_existe r_guardar_variable arrexp_uno arrexp_dos r_pila_operandos_push_id IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM
    (115) decisionfunc -> . IF PARIZQ expresion PARDER r_if_paso_1 THEN bloquefunc decisionfunc_else r_if_paso_3
    (100) escritura -> . WRITE PARIZQ escrituraciclo otro PARDER PTOCOM
    (96) llamadafunc -> . ID r_verifica_void PARIZQ r_era_funcion_void parametros r_terminar_parametro_void PARDER PTOCOM
    (118) repeticionfunc -> . condicionalfunc
    (119) repeticionfunc -> . nocondicionalfunc
    (105) lectura -> . READ PARIZQ iddim r_genera_lectura ciclodim PARDER PTOCOM
    (120) condicionalfunc -> . WHILE PARIZQ expresion PARDER DO bloquefunc
    (121) nocondicionalfunc -> . FOR iddim IGU expresion TO expresion DO bloquefunc

    RETURN          shift and go to state 313
    KEYDER          reduce using rule 122 (empty -> .)
    ID              shift and go to state 69
    IF              shift and go to state 314
    WRITE           shift and go to state 71
    READ            shift and go to state 74
    WHILE           shift and go to state 317
    FOR             shift and go to state 318

    bloqueopcionfunc               shift and go to state 304
    estatutofunc                   shift and go to state 305
    empty                          shift and go to state 306
    asignacion                     shift and go to state 307
    decisionfunc                   shift and go to state 308
    escritura                      shift and go to state 309
    llamadafunc                    shift and go to state 310
    repeticionfunc                 shift and go to state 311
    lectura                        shift and go to state 312
    condicionalfunc                shift and go to state 315
    nocondicionalfunc              shift and go to state 316

state 283

    (17) opciontipo -> ID r_register_variable_name arr_uno arr_dos . r_verify_array varciclo PTOCOM tipociclo
    (148) r_verify_array -> .

    COMA            reduce using rule 148 (r_verify_array -> .)
    PTOCOM          reduce using rule 148 (r_verify_array -> .)

    r_verify_array                 shift and go to state 319

state 284

    (18) opciontipo -> MODULE ID r_update_func_type r_update_curr_function_name_especial . PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return

    PARIZQ          shift and go to state 320


state 285

    (7) varciclo -> COMA ID r_register_variable_name arr_uno arr_dos r_verify_array varciclo .

    PTOCOM          reduce using rule 7 (varciclo -> COMA ID r_register_variable_name arr_uno arr_dos r_verify_array varciclo .)


state 286

    (56) asignacion -> ID r_verifica_variable_existe r_guardar_variable arrexp_uno arrexp_dos r_pila_operandos_push_id IGU r_pila_operadores_push_igu . expresion r_pop_igu PTOCOM
    (57) expresion -> . exp r_pop_comp expresionsig
    (69) exp -> . termino r_pop_mas expciclo
    (73) termino -> . factor r_pop_mult factorciclo
    (77) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (78) factor -> . masomenos varcte
    (79) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (80) masomenos -> . MAS
    (81) masomenos -> . MENOS
    (82) masomenos -> . empty
    (122) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 109
    ID              shift and go to state 115
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    CTEI            reduce using rule 122 (empty -> .)
    CTEF            reduce using rule 122 (empty -> .)

  ! ID              [ reduce using rule 122 (empty -> .) ]

    expresion                      shift and go to state 321
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    masomenos                      shift and go to state 114
    empty                          shift and go to state 118

state 287

    (87) arrexp_dos -> CORIZQ r_push_arr expresion r_verifica_arrexp_dos . CORDER

    CORDER          shift and go to state 322


state 288

    (85) arrexp_uno -> CORIZQ r_push_arr expresion r_verifica_arrexp_uno CORDER .

    CORIZQ          reduce using rule 85 (arrexp_uno -> CORIZQ r_push_arr expresion r_verifica_arrexp_uno CORDER .)
    IGU             reduce using rule 85 (arrexp_uno -> CORIZQ r_push_arr expresion r_verifica_arrexp_uno CORDER .)
    MULT            reduce using rule 85 (arrexp_uno -> CORIZQ r_push_arr expresion r_verifica_arrexp_uno CORDER .)
    DIV             reduce using rule 85 (arrexp_uno -> CORIZQ r_push_arr expresion r_verifica_arrexp_uno CORDER .)
    MAS             reduce using rule 85 (arrexp_uno -> CORIZQ r_push_arr expresion r_verifica_arrexp_uno CORDER .)
    MENOS           reduce using rule 85 (arrexp_uno -> CORIZQ r_push_arr expresion r_verifica_arrexp_uno CORDER .)
    MAY             reduce using rule 85 (arrexp_uno -> CORIZQ r_push_arr expresion r_verifica_arrexp_uno CORDER .)
    MEN             reduce using rule 85 (arrexp_uno -> CORIZQ r_push_arr expresion r_verifica_arrexp_uno CORDER .)
    DIF             reduce using rule 85 (arrexp_uno -> CORIZQ r_push_arr expresion r_verifica_arrexp_uno CORDER .)
    IGUIGU          reduce using rule 85 (arrexp_uno -> CORIZQ r_push_arr expresion r_verifica_arrexp_uno CORDER .)
    AND             reduce using rule 85 (arrexp_uno -> CORIZQ r_push_arr expresion r_verifica_arrexp_uno CORDER .)
    OR              reduce using rule 85 (arrexp_uno -> CORIZQ r_push_arr expresion r_verifica_arrexp_uno CORDER .)
    MAYIGU          reduce using rule 85 (arrexp_uno -> CORIZQ r_push_arr expresion r_verifica_arrexp_uno CORDER .)
    MENIGU          reduce using rule 85 (arrexp_uno -> CORIZQ r_push_arr expresion r_verifica_arrexp_uno CORDER .)
    PARDER          reduce using rule 85 (arrexp_uno -> CORIZQ r_push_arr expresion r_verifica_arrexp_uno CORDER .)
    COMA            reduce using rule 85 (arrexp_uno -> CORIZQ r_push_arr expresion r_verifica_arrexp_uno CORDER .)
    TO              reduce using rule 85 (arrexp_uno -> CORIZQ r_push_arr expresion r_verifica_arrexp_uno CORDER .)
    CORDER          reduce using rule 85 (arrexp_uno -> CORIZQ r_push_arr expresion r_verifica_arrexp_uno CORDER .)
    DO              reduce using rule 85 (arrexp_uno -> CORIZQ r_push_arr expresion r_verifica_arrexp_uno CORDER .)
    PTOCOM          reduce using rule 85 (arrexp_uno -> CORIZQ r_push_arr expresion r_verifica_arrexp_uno CORDER .)


state 289

    (96) llamadafunc -> ID r_verifica_void PARIZQ r_era_funcion_void parametros r_terminar_parametro_void PARDER PTOCOM .

    ID              reduce using rule 96 (llamadafunc -> ID r_verifica_void PARIZQ r_era_funcion_void parametros r_terminar_parametro_void PARDER PTOCOM .)
    IF              reduce using rule 96 (llamadafunc -> ID r_verifica_void PARIZQ r_era_funcion_void parametros r_terminar_parametro_void PARDER PTOCOM .)
    WRITE           reduce using rule 96 (llamadafunc -> ID r_verifica_void PARIZQ r_era_funcion_void parametros r_terminar_parametro_void PARDER PTOCOM .)
    READ            reduce using rule 96 (llamadafunc -> ID r_verifica_void PARIZQ r_era_funcion_void parametros r_terminar_parametro_void PARDER PTOCOM .)
    WHILE           reduce using rule 96 (llamadafunc -> ID r_verifica_void PARIZQ r_era_funcion_void parametros r_terminar_parametro_void PARDER PTOCOM .)
    FOR             reduce using rule 96 (llamadafunc -> ID r_verifica_void PARIZQ r_era_funcion_void parametros r_terminar_parametro_void PARDER PTOCOM .)
    KEYDER          reduce using rule 96 (llamadafunc -> ID r_verifica_void PARIZQ r_era_funcion_void parametros r_terminar_parametro_void PARDER PTOCOM .)
    RETURN          reduce using rule 96 (llamadafunc -> ID r_verifica_void PARIZQ r_era_funcion_void parametros r_terminar_parametro_void PARDER PTOCOM .)


state 290

    (94) cicloparametros -> COMA expresion . r_extraer_parametro cicloparametros
    (139) r_extraer_parametro -> .

    COMA            reduce using rule 139 (r_extraer_parametro -> .)
    PARDER          reduce using rule 139 (r_extraer_parametro -> .)

    r_extraer_parametro            shift and go to state 323

state 291

    (97) decision -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloque decision_else . r_if_paso_3
    (154) r_if_paso_3 -> .

    ID              reduce using rule 154 (r_if_paso_3 -> .)
    IF              reduce using rule 154 (r_if_paso_3 -> .)
    WRITE           reduce using rule 154 (r_if_paso_3 -> .)
    READ            reduce using rule 154 (r_if_paso_3 -> .)
    WHILE           reduce using rule 154 (r_if_paso_3 -> .)
    FOR             reduce using rule 154 (r_if_paso_3 -> .)
    KEYDER          reduce using rule 154 (r_if_paso_3 -> .)

    r_if_paso_3                    shift and go to state 324

state 292

    (98) decision_else -> ELSE . r_if_paso_2 bloque
    (153) r_if_paso_2 -> .

    KEYIZQ          reduce using rule 153 (r_if_paso_2 -> .)

    r_if_paso_2                    shift and go to state 325

state 293

    (99) decision_else -> empty .

    ID              reduce using rule 99 (decision_else -> empty .)
    IF              reduce using rule 99 (decision_else -> empty .)
    WRITE           reduce using rule 99 (decision_else -> empty .)
    READ            reduce using rule 99 (decision_else -> empty .)
    WHILE           reduce using rule 99 (decision_else -> empty .)
    FOR             reduce using rule 99 (decision_else -> empty .)
    KEYDER          reduce using rule 99 (decision_else -> empty .)


state 294

    (58) expresionsig -> MAY r_pila_operadores_push_may expresionsigequal expresion .

    PARDER          reduce using rule 58 (expresionsig -> MAY r_pila_operadores_push_may expresionsigequal expresion .)
    COMA            reduce using rule 58 (expresionsig -> MAY r_pila_operadores_push_may expresionsigequal expresion .)
    TO              reduce using rule 58 (expresionsig -> MAY r_pila_operadores_push_may expresionsigequal expresion .)
    CORDER          reduce using rule 58 (expresionsig -> MAY r_pila_operadores_push_may expresionsigequal expresion .)
    DO              reduce using rule 58 (expresionsig -> MAY r_pila_operadores_push_may expresionsigequal expresion .)
    PTOCOM          reduce using rule 58 (expresionsig -> MAY r_pila_operadores_push_may expresionsigequal expresion .)


state 295

    (59) expresionsig -> MEN r_pila_operadores_push_men expresionsigequal expresion .

    PARDER          reduce using rule 59 (expresionsig -> MEN r_pila_operadores_push_men expresionsigequal expresion .)
    COMA            reduce using rule 59 (expresionsig -> MEN r_pila_operadores_push_men expresionsigequal expresion .)
    TO              reduce using rule 59 (expresionsig -> MEN r_pila_operadores_push_men expresionsigequal expresion .)
    CORDER          reduce using rule 59 (expresionsig -> MEN r_pila_operadores_push_men expresionsigequal expresion .)
    DO              reduce using rule 59 (expresionsig -> MEN r_pila_operadores_push_men expresionsigequal expresion .)
    PTOCOM          reduce using rule 59 (expresionsig -> MEN r_pila_operadores_push_men expresionsigequal expresion .)


state 296

    (64) expresionsig -> MAYIGU r_pila_operadores_push_mayigu expresionsigequal expresion .

    PARDER          reduce using rule 64 (expresionsig -> MAYIGU r_pila_operadores_push_mayigu expresionsigequal expresion .)
    COMA            reduce using rule 64 (expresionsig -> MAYIGU r_pila_operadores_push_mayigu expresionsigequal expresion .)
    TO              reduce using rule 64 (expresionsig -> MAYIGU r_pila_operadores_push_mayigu expresionsigequal expresion .)
    CORDER          reduce using rule 64 (expresionsig -> MAYIGU r_pila_operadores_push_mayigu expresionsigequal expresion .)
    DO              reduce using rule 64 (expresionsig -> MAYIGU r_pila_operadores_push_mayigu expresionsigequal expresion .)
    PTOCOM          reduce using rule 64 (expresionsig -> MAYIGU r_pila_operadores_push_mayigu expresionsigequal expresion .)


state 297

    (65) expresionsig -> MENIGU r_pila_operadores_push_menigu expresionsigequal expresion .

    PARDER          reduce using rule 65 (expresionsig -> MENIGU r_pila_operadores_push_menigu expresionsigequal expresion .)
    COMA            reduce using rule 65 (expresionsig -> MENIGU r_pila_operadores_push_menigu expresionsigequal expresion .)
    TO              reduce using rule 65 (expresionsig -> MENIGU r_pila_operadores_push_menigu expresionsigequal expresion .)
    CORDER          reduce using rule 65 (expresionsig -> MENIGU r_pila_operadores_push_menigu expresionsigequal expresion .)
    DO              reduce using rule 65 (expresionsig -> MENIGU r_pila_operadores_push_menigu expresionsigequal expresion .)
    PTOCOM          reduce using rule 65 (expresionsig -> MENIGU r_pila_operadores_push_menigu expresionsigequal expresion .)


state 298

    (83) opcionid -> PARIZQ r_era_funcion_retorno parametros . r_terminar_parametro PARDER
    (137) r_terminar_parametro -> .

    PARDER          reduce using rule 137 (r_terminar_parametro -> .)

    r_terminar_parametro           shift and go to state 326

state 299

    (106) ciclodim -> COMA iddim r_genera_lectura ciclodim .

    PARDER          reduce using rule 106 (ciclodim -> COMA iddim r_genera_lectura ciclodim .)


state 300

    (113) condicional -> WHILE r_while_paso_1 PARIZQ expresion PARDER r_while_paso_2 DO bloque . r_while_paso_3
    (157) r_while_paso_3 -> .

    ID              reduce using rule 157 (r_while_paso_3 -> .)
    IF              reduce using rule 157 (r_while_paso_3 -> .)
    WRITE           reduce using rule 157 (r_while_paso_3 -> .)
    READ            reduce using rule 157 (r_while_paso_3 -> .)
    WHILE           reduce using rule 157 (r_while_paso_3 -> .)
    FOR             reduce using rule 157 (r_while_paso_3 -> .)
    KEYDER          reduce using rule 157 (r_while_paso_3 -> .)

    r_while_paso_3                 shift and go to state 327

state 301

    (114) nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion . r_for_paso_1 DO bloque r_for_paso_2
    (159) r_for_paso_1 -> .

    DO              reduce using rule 159 (r_for_paso_1 -> .)

    r_for_paso_1                   shift and go to state 328

state 302

    (28) funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloque . r_endfunc
    (143) r_endfunc -> .

    VOID            reduce using rule 143 (r_endfunc -> .)
    INT             reduce using rule 143 (r_endfunc -> .)
    FLT             reduce using rule 143 (r_endfunc -> .)
    CHAR            reduce using rule 143 (r_endfunc -> .)
    MAIN            reduce using rule 143 (r_endfunc -> .)

    r_endfunc                      shift and go to state 329

state 303

    (33) funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc . r_asegurar_return
    (136) r_asegurar_return -> .

    VOID            reduce using rule 136 (r_asegurar_return -> .)
    INT             reduce using rule 136 (r_asegurar_return -> .)
    FLT             reduce using rule 136 (r_asegurar_return -> .)
    CHAR            reduce using rule 136 (r_asegurar_return -> .)
    MAIN            reduce using rule 136 (r_asegurar_return -> .)

    r_asegurar_return              shift and go to state 330

state 304

    (40) bloquefunc -> KEYIZQ bloqueopcionfunc . KEYDER

    KEYDER          shift and go to state 331


state 305

    (41) bloqueopcionfunc -> estatutofunc . bloqueopcionfunc
    (41) bloqueopcionfunc -> . estatutofunc bloqueopcionfunc
    (42) bloqueopcionfunc -> . empty
    (49) estatutofunc -> . asignacion
    (50) estatutofunc -> . decisionfunc
    (51) estatutofunc -> . escritura
    (52) estatutofunc -> . llamadafunc
    (53) estatutofunc -> . repeticionfunc
    (54) estatutofunc -> . lectura
    (55) estatutofunc -> . RETURN PARIZQ expresion r_return_func PARDER PTOCOM
    (122) empty -> .
    (56) asignacion -> . ID r_verifica_variable_existe r_guardar_variable arrexp_uno arrexp_dos r_pila_operandos_push_id IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM
    (115) decisionfunc -> . IF PARIZQ expresion PARDER r_if_paso_1 THEN bloquefunc decisionfunc_else r_if_paso_3
    (100) escritura -> . WRITE PARIZQ escrituraciclo otro PARDER PTOCOM
    (96) llamadafunc -> . ID r_verifica_void PARIZQ r_era_funcion_void parametros r_terminar_parametro_void PARDER PTOCOM
    (118) repeticionfunc -> . condicionalfunc
    (119) repeticionfunc -> . nocondicionalfunc
    (105) lectura -> . READ PARIZQ iddim r_genera_lectura ciclodim PARDER PTOCOM
    (120) condicionalfunc -> . WHILE PARIZQ expresion PARDER DO bloquefunc
    (121) nocondicionalfunc -> . FOR iddim IGU expresion TO expresion DO bloquefunc

    RETURN          shift and go to state 313
    KEYDER          reduce using rule 122 (empty -> .)
    ID              shift and go to state 69
    IF              shift and go to state 314
    WRITE           shift and go to state 71
    READ            shift and go to state 74
    WHILE           shift and go to state 317
    FOR             shift and go to state 318

    estatutofunc                   shift and go to state 305
    bloqueopcionfunc               shift and go to state 332
    empty                          shift and go to state 306
    asignacion                     shift and go to state 307
    decisionfunc                   shift and go to state 308
    escritura                      shift and go to state 309
    llamadafunc                    shift and go to state 310
    repeticionfunc                 shift and go to state 311
    lectura                        shift and go to state 312
    condicionalfunc                shift and go to state 315
    nocondicionalfunc              shift and go to state 316

state 306

    (42) bloqueopcionfunc -> empty .

    KEYDER          reduce using rule 42 (bloqueopcionfunc -> empty .)


state 307

    (49) estatutofunc -> asignacion .

    RETURN          reduce using rule 49 (estatutofunc -> asignacion .)
    ID              reduce using rule 49 (estatutofunc -> asignacion .)
    IF              reduce using rule 49 (estatutofunc -> asignacion .)
    WRITE           reduce using rule 49 (estatutofunc -> asignacion .)
    READ            reduce using rule 49 (estatutofunc -> asignacion .)
    WHILE           reduce using rule 49 (estatutofunc -> asignacion .)
    FOR             reduce using rule 49 (estatutofunc -> asignacion .)
    KEYDER          reduce using rule 49 (estatutofunc -> asignacion .)


state 308

    (50) estatutofunc -> decisionfunc .

    RETURN          reduce using rule 50 (estatutofunc -> decisionfunc .)
    ID              reduce using rule 50 (estatutofunc -> decisionfunc .)
    IF              reduce using rule 50 (estatutofunc -> decisionfunc .)
    WRITE           reduce using rule 50 (estatutofunc -> decisionfunc .)
    READ            reduce using rule 50 (estatutofunc -> decisionfunc .)
    WHILE           reduce using rule 50 (estatutofunc -> decisionfunc .)
    FOR             reduce using rule 50 (estatutofunc -> decisionfunc .)
    KEYDER          reduce using rule 50 (estatutofunc -> decisionfunc .)


state 309

    (51) estatutofunc -> escritura .

    RETURN          reduce using rule 51 (estatutofunc -> escritura .)
    ID              reduce using rule 51 (estatutofunc -> escritura .)
    IF              reduce using rule 51 (estatutofunc -> escritura .)
    WRITE           reduce using rule 51 (estatutofunc -> escritura .)
    READ            reduce using rule 51 (estatutofunc -> escritura .)
    WHILE           reduce using rule 51 (estatutofunc -> escritura .)
    FOR             reduce using rule 51 (estatutofunc -> escritura .)
    KEYDER          reduce using rule 51 (estatutofunc -> escritura .)


state 310

    (52) estatutofunc -> llamadafunc .

    RETURN          reduce using rule 52 (estatutofunc -> llamadafunc .)
    ID              reduce using rule 52 (estatutofunc -> llamadafunc .)
    IF              reduce using rule 52 (estatutofunc -> llamadafunc .)
    WRITE           reduce using rule 52 (estatutofunc -> llamadafunc .)
    READ            reduce using rule 52 (estatutofunc -> llamadafunc .)
    WHILE           reduce using rule 52 (estatutofunc -> llamadafunc .)
    FOR             reduce using rule 52 (estatutofunc -> llamadafunc .)
    KEYDER          reduce using rule 52 (estatutofunc -> llamadafunc .)


state 311

    (53) estatutofunc -> repeticionfunc .

    RETURN          reduce using rule 53 (estatutofunc -> repeticionfunc .)
    ID              reduce using rule 53 (estatutofunc -> repeticionfunc .)
    IF              reduce using rule 53 (estatutofunc -> repeticionfunc .)
    WRITE           reduce using rule 53 (estatutofunc -> repeticionfunc .)
    READ            reduce using rule 53 (estatutofunc -> repeticionfunc .)
    WHILE           reduce using rule 53 (estatutofunc -> repeticionfunc .)
    FOR             reduce using rule 53 (estatutofunc -> repeticionfunc .)
    KEYDER          reduce using rule 53 (estatutofunc -> repeticionfunc .)


state 312

    (54) estatutofunc -> lectura .

    RETURN          reduce using rule 54 (estatutofunc -> lectura .)
    ID              reduce using rule 54 (estatutofunc -> lectura .)
    IF              reduce using rule 54 (estatutofunc -> lectura .)
    WRITE           reduce using rule 54 (estatutofunc -> lectura .)
    READ            reduce using rule 54 (estatutofunc -> lectura .)
    WHILE           reduce using rule 54 (estatutofunc -> lectura .)
    FOR             reduce using rule 54 (estatutofunc -> lectura .)
    KEYDER          reduce using rule 54 (estatutofunc -> lectura .)


state 313

    (55) estatutofunc -> RETURN . PARIZQ expresion r_return_func PARDER PTOCOM

    PARIZQ          shift and go to state 333


state 314

    (115) decisionfunc -> IF . PARIZQ expresion PARDER r_if_paso_1 THEN bloquefunc decisionfunc_else r_if_paso_3

    PARIZQ          shift and go to state 334


state 315

    (118) repeticionfunc -> condicionalfunc .

    RETURN          reduce using rule 118 (repeticionfunc -> condicionalfunc .)
    ID              reduce using rule 118 (repeticionfunc -> condicionalfunc .)
    IF              reduce using rule 118 (repeticionfunc -> condicionalfunc .)
    WRITE           reduce using rule 118 (repeticionfunc -> condicionalfunc .)
    READ            reduce using rule 118 (repeticionfunc -> condicionalfunc .)
    WHILE           reduce using rule 118 (repeticionfunc -> condicionalfunc .)
    FOR             reduce using rule 118 (repeticionfunc -> condicionalfunc .)
    KEYDER          reduce using rule 118 (repeticionfunc -> condicionalfunc .)


state 316

    (119) repeticionfunc -> nocondicionalfunc .

    RETURN          reduce using rule 119 (repeticionfunc -> nocondicionalfunc .)
    ID              reduce using rule 119 (repeticionfunc -> nocondicionalfunc .)
    IF              reduce using rule 119 (repeticionfunc -> nocondicionalfunc .)
    WRITE           reduce using rule 119 (repeticionfunc -> nocondicionalfunc .)
    READ            reduce using rule 119 (repeticionfunc -> nocondicionalfunc .)
    WHILE           reduce using rule 119 (repeticionfunc -> nocondicionalfunc .)
    FOR             reduce using rule 119 (repeticionfunc -> nocondicionalfunc .)
    KEYDER          reduce using rule 119 (repeticionfunc -> nocondicionalfunc .)


state 317

    (120) condicionalfunc -> WHILE . PARIZQ expresion PARDER DO bloquefunc

    PARIZQ          shift and go to state 335


state 318

    (121) nocondicionalfunc -> FOR . iddim IGU expresion TO expresion DO bloquefunc
    (108) iddim -> . ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp

    ID              shift and go to state 96

    iddim                          shift and go to state 336

state 319

    (17) opciontipo -> ID r_register_variable_name arr_uno arr_dos r_verify_array . varciclo PTOCOM tipociclo
    (7) varciclo -> . COMA ID r_register_variable_name arr_uno arr_dos r_verify_array varciclo
    (8) varciclo -> . empty
    (122) empty -> .

    COMA            shift and go to state 83
    PTOCOM          reduce using rule 122 (empty -> .)

    varciclo                       shift and go to state 337
    empty                          shift and go to state 84

state 320

    (18) opciontipo -> MODULE ID r_update_func_type r_update_curr_function_name_especial PARIZQ . r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return
    (141) r_marcar_funcion -> .

    INT             reduce using rule 141 (r_marcar_funcion -> .)
    FLT             reduce using rule 141 (r_marcar_funcion -> .)
    CHAR            reduce using rule 141 (r_marcar_funcion -> .)
    PARDER          reduce using rule 141 (r_marcar_funcion -> .)

    r_marcar_funcion               shift and go to state 338

state 321

    (56) asignacion -> ID r_verifica_variable_existe r_guardar_variable arrexp_uno arrexp_dos r_pila_operandos_push_id IGU r_pila_operadores_push_igu expresion . r_pop_igu PTOCOM
    (173) r_pop_igu -> .

    PTOCOM          reduce using rule 173 (r_pop_igu -> .)

    r_pop_igu                      shift and go to state 339

state 322

    (87) arrexp_dos -> CORIZQ r_push_arr expresion r_verifica_arrexp_dos CORDER .

    IGU             reduce using rule 87 (arrexp_dos -> CORIZQ r_push_arr expresion r_verifica_arrexp_dos CORDER .)
    MULT            reduce using rule 87 (arrexp_dos -> CORIZQ r_push_arr expresion r_verifica_arrexp_dos CORDER .)
    DIV             reduce using rule 87 (arrexp_dos -> CORIZQ r_push_arr expresion r_verifica_arrexp_dos CORDER .)
    MAS             reduce using rule 87 (arrexp_dos -> CORIZQ r_push_arr expresion r_verifica_arrexp_dos CORDER .)
    MENOS           reduce using rule 87 (arrexp_dos -> CORIZQ r_push_arr expresion r_verifica_arrexp_dos CORDER .)
    MAY             reduce using rule 87 (arrexp_dos -> CORIZQ r_push_arr expresion r_verifica_arrexp_dos CORDER .)
    MEN             reduce using rule 87 (arrexp_dos -> CORIZQ r_push_arr expresion r_verifica_arrexp_dos CORDER .)
    DIF             reduce using rule 87 (arrexp_dos -> CORIZQ r_push_arr expresion r_verifica_arrexp_dos CORDER .)
    IGUIGU          reduce using rule 87 (arrexp_dos -> CORIZQ r_push_arr expresion r_verifica_arrexp_dos CORDER .)
    AND             reduce using rule 87 (arrexp_dos -> CORIZQ r_push_arr expresion r_verifica_arrexp_dos CORDER .)
    OR              reduce using rule 87 (arrexp_dos -> CORIZQ r_push_arr expresion r_verifica_arrexp_dos CORDER .)
    MAYIGU          reduce using rule 87 (arrexp_dos -> CORIZQ r_push_arr expresion r_verifica_arrexp_dos CORDER .)
    MENIGU          reduce using rule 87 (arrexp_dos -> CORIZQ r_push_arr expresion r_verifica_arrexp_dos CORDER .)
    PARDER          reduce using rule 87 (arrexp_dos -> CORIZQ r_push_arr expresion r_verifica_arrexp_dos CORDER .)
    COMA            reduce using rule 87 (arrexp_dos -> CORIZQ r_push_arr expresion r_verifica_arrexp_dos CORDER .)
    TO              reduce using rule 87 (arrexp_dos -> CORIZQ r_push_arr expresion r_verifica_arrexp_dos CORDER .)
    CORDER          reduce using rule 87 (arrexp_dos -> CORIZQ r_push_arr expresion r_verifica_arrexp_dos CORDER .)
    DO              reduce using rule 87 (arrexp_dos -> CORIZQ r_push_arr expresion r_verifica_arrexp_dos CORDER .)
    PTOCOM          reduce using rule 87 (arrexp_dos -> CORIZQ r_push_arr expresion r_verifica_arrexp_dos CORDER .)


state 323

    (94) cicloparametros -> COMA expresion r_extraer_parametro . cicloparametros
    (94) cicloparametros -> . COMA expresion r_extraer_parametro cicloparametros
    (95) cicloparametros -> . empty
    (122) empty -> .

    COMA            shift and go to state 254
    PARDER          reduce using rule 122 (empty -> .)

    cicloparametros                shift and go to state 340
    empty                          shift and go to state 255

state 324

    (97) decision -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloque decision_else r_if_paso_3 .

    ID              reduce using rule 97 (decision -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloque decision_else r_if_paso_3 .)
    IF              reduce using rule 97 (decision -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloque decision_else r_if_paso_3 .)
    WRITE           reduce using rule 97 (decision -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloque decision_else r_if_paso_3 .)
    READ            reduce using rule 97 (decision -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloque decision_else r_if_paso_3 .)
    WHILE           reduce using rule 97 (decision -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloque decision_else r_if_paso_3 .)
    FOR             reduce using rule 97 (decision -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloque decision_else r_if_paso_3 .)
    KEYDER          reduce using rule 97 (decision -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloque decision_else r_if_paso_3 .)


state 325

    (98) decision_else -> ELSE r_if_paso_2 . bloque
    (37) bloque -> . KEYIZQ bloqueopcion KEYDER

    KEYIZQ          shift and go to state 54

    bloque                         shift and go to state 341

state 326

    (83) opcionid -> PARIZQ r_era_funcion_retorno parametros r_terminar_parametro . PARDER

    PARDER          shift and go to state 342


state 327

    (113) condicional -> WHILE r_while_paso_1 PARIZQ expresion PARDER r_while_paso_2 DO bloque r_while_paso_3 .

    ID              reduce using rule 113 (condicional -> WHILE r_while_paso_1 PARIZQ expresion PARDER r_while_paso_2 DO bloque r_while_paso_3 .)
    IF              reduce using rule 113 (condicional -> WHILE r_while_paso_1 PARIZQ expresion PARDER r_while_paso_2 DO bloque r_while_paso_3 .)
    WRITE           reduce using rule 113 (condicional -> WHILE r_while_paso_1 PARIZQ expresion PARDER r_while_paso_2 DO bloque r_while_paso_3 .)
    READ            reduce using rule 113 (condicional -> WHILE r_while_paso_1 PARIZQ expresion PARDER r_while_paso_2 DO bloque r_while_paso_3 .)
    WHILE           reduce using rule 113 (condicional -> WHILE r_while_paso_1 PARIZQ expresion PARDER r_while_paso_2 DO bloque r_while_paso_3 .)
    FOR             reduce using rule 113 (condicional -> WHILE r_while_paso_1 PARIZQ expresion PARDER r_while_paso_2 DO bloque r_while_paso_3 .)
    KEYDER          reduce using rule 113 (condicional -> WHILE r_while_paso_1 PARIZQ expresion PARDER r_while_paso_2 DO bloque r_while_paso_3 .)


state 328

    (114) nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 . DO bloque r_for_paso_2

    DO              shift and go to state 343


state 329

    (28) funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloque r_endfunc .

    VOID            reduce using rule 28 (funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloque r_endfunc .)
    INT             reduce using rule 28 (funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloque r_endfunc .)
    FLT             reduce using rule 28 (funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloque r_endfunc .)
    CHAR            reduce using rule 28 (funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloque r_endfunc .)
    MAIN            reduce using rule 28 (funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloque r_endfunc .)


state 330

    (33) funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return .

    VOID            reduce using rule 33 (funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return .)
    INT             reduce using rule 33 (funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return .)
    FLT             reduce using rule 33 (funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return .)
    CHAR            reduce using rule 33 (funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return .)
    MAIN            reduce using rule 33 (funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return .)


state 331

    (40) bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .

    VOID            reduce using rule 40 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    INT             reduce using rule 40 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    FLT             reduce using rule 40 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    CHAR            reduce using rule 40 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    MAIN            reduce using rule 40 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    RETURN          reduce using rule 40 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    ID              reduce using rule 40 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    IF              reduce using rule 40 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    WRITE           reduce using rule 40 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    READ            reduce using rule 40 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    WHILE           reduce using rule 40 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    FOR             reduce using rule 40 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    KEYDER          reduce using rule 40 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    ELSE            reduce using rule 40 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    KEYIZQ          reduce using rule 40 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)


state 332

    (41) bloqueopcionfunc -> estatutofunc bloqueopcionfunc .

    KEYDER          reduce using rule 41 (bloqueopcionfunc -> estatutofunc bloqueopcionfunc .)


state 333

    (55) estatutofunc -> RETURN PARIZQ . expresion r_return_func PARDER PTOCOM
    (57) expresion -> . exp r_pop_comp expresionsig
    (69) exp -> . termino r_pop_mas expciclo
    (73) termino -> . factor r_pop_mult factorciclo
    (77) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (78) factor -> . masomenos varcte
    (79) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (80) masomenos -> . MAS
    (81) masomenos -> . MENOS
    (82) masomenos -> . empty
    (122) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 109
    ID              shift and go to state 115
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    CTEI            reduce using rule 122 (empty -> .)
    CTEF            reduce using rule 122 (empty -> .)

  ! ID              [ reduce using rule 122 (empty -> .) ]

    expresion                      shift and go to state 344
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    masomenos                      shift and go to state 114
    empty                          shift and go to state 118

state 334

    (115) decisionfunc -> IF PARIZQ . expresion PARDER r_if_paso_1 THEN bloquefunc decisionfunc_else r_if_paso_3
    (57) expresion -> . exp r_pop_comp expresionsig
    (69) exp -> . termino r_pop_mas expciclo
    (73) termino -> . factor r_pop_mult factorciclo
    (77) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (78) factor -> . masomenos varcte
    (79) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (80) masomenos -> . MAS
    (81) masomenos -> . MENOS
    (82) masomenos -> . empty
    (122) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 109
    ID              shift and go to state 115
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    CTEI            reduce using rule 122 (empty -> .)
    CTEF            reduce using rule 122 (empty -> .)

  ! ID              [ reduce using rule 122 (empty -> .) ]

    expresion                      shift and go to state 345
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    masomenos                      shift and go to state 114
    empty                          shift and go to state 118

state 335

    (120) condicionalfunc -> WHILE PARIZQ . expresion PARDER DO bloquefunc
    (57) expresion -> . exp r_pop_comp expresionsig
    (69) exp -> . termino r_pop_mas expciclo
    (73) termino -> . factor r_pop_mult factorciclo
    (77) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (78) factor -> . masomenos varcte
    (79) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (80) masomenos -> . MAS
    (81) masomenos -> . MENOS
    (82) masomenos -> . empty
    (122) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 109
    ID              shift and go to state 115
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    CTEI            reduce using rule 122 (empty -> .)
    CTEF            reduce using rule 122 (empty -> .)

  ! ID              [ reduce using rule 122 (empty -> .) ]

    expresion                      shift and go to state 346
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    masomenos                      shift and go to state 114
    empty                          shift and go to state 118

state 336

    (121) nocondicionalfunc -> FOR iddim . IGU expresion TO expresion DO bloquefunc

    IGU             shift and go to state 347


state 337

    (17) opciontipo -> ID r_register_variable_name arr_uno arr_dos r_verify_array varciclo . PTOCOM tipociclo

    PTOCOM          shift and go to state 348


state 338

    (18) opciontipo -> MODULE ID r_update_func_type r_update_curr_function_name_especial PARIZQ r_marcar_funcion . opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return
    (29) opcionvarsimple -> . varsimple ciclovarsimple
    (30) opcionvarsimple -> . empty
    (25) varsimple -> . tipo ident
    (122) empty -> .
    (19) tipo -> . INT r_register_variable_type
    (20) tipo -> . FLT r_register_variable_type
    (21) tipo -> . CHAR r_register_variable_type

    PARDER          reduce using rule 122 (empty -> .)
    INT             shift and go to state 22
    FLT             shift and go to state 23
    CHAR            shift and go to state 24

    opcionvarsimple                shift and go to state 349
    varsimple                      shift and go to state 79
    empty                          shift and go to state 80
    tipo                           shift and go to state 81

state 339

    (56) asignacion -> ID r_verifica_variable_existe r_guardar_variable arrexp_uno arrexp_dos r_pila_operandos_push_id IGU r_pila_operadores_push_igu expresion r_pop_igu . PTOCOM

    PTOCOM          shift and go to state 350


state 340

    (94) cicloparametros -> COMA expresion r_extraer_parametro cicloparametros .

    PARDER          reduce using rule 94 (cicloparametros -> COMA expresion r_extraer_parametro cicloparametros .)


state 341

    (98) decision_else -> ELSE r_if_paso_2 bloque .

    ID              reduce using rule 98 (decision_else -> ELSE r_if_paso_2 bloque .)
    IF              reduce using rule 98 (decision_else -> ELSE r_if_paso_2 bloque .)
    WRITE           reduce using rule 98 (decision_else -> ELSE r_if_paso_2 bloque .)
    READ            reduce using rule 98 (decision_else -> ELSE r_if_paso_2 bloque .)
    WHILE           reduce using rule 98 (decision_else -> ELSE r_if_paso_2 bloque .)
    FOR             reduce using rule 98 (decision_else -> ELSE r_if_paso_2 bloque .)
    KEYDER          reduce using rule 98 (decision_else -> ELSE r_if_paso_2 bloque .)


state 342

    (83) opcionid -> PARIZQ r_era_funcion_retorno parametros r_terminar_parametro PARDER .

    MULT            reduce using rule 83 (opcionid -> PARIZQ r_era_funcion_retorno parametros r_terminar_parametro PARDER .)
    DIV             reduce using rule 83 (opcionid -> PARIZQ r_era_funcion_retorno parametros r_terminar_parametro PARDER .)
    MAS             reduce using rule 83 (opcionid -> PARIZQ r_era_funcion_retorno parametros r_terminar_parametro PARDER .)
    MENOS           reduce using rule 83 (opcionid -> PARIZQ r_era_funcion_retorno parametros r_terminar_parametro PARDER .)
    MAY             reduce using rule 83 (opcionid -> PARIZQ r_era_funcion_retorno parametros r_terminar_parametro PARDER .)
    MEN             reduce using rule 83 (opcionid -> PARIZQ r_era_funcion_retorno parametros r_terminar_parametro PARDER .)
    DIF             reduce using rule 83 (opcionid -> PARIZQ r_era_funcion_retorno parametros r_terminar_parametro PARDER .)
    IGUIGU          reduce using rule 83 (opcionid -> PARIZQ r_era_funcion_retorno parametros r_terminar_parametro PARDER .)
    AND             reduce using rule 83 (opcionid -> PARIZQ r_era_funcion_retorno parametros r_terminar_parametro PARDER .)
    OR              reduce using rule 83 (opcionid -> PARIZQ r_era_funcion_retorno parametros r_terminar_parametro PARDER .)
    MAYIGU          reduce using rule 83 (opcionid -> PARIZQ r_era_funcion_retorno parametros r_terminar_parametro PARDER .)
    MENIGU          reduce using rule 83 (opcionid -> PARIZQ r_era_funcion_retorno parametros r_terminar_parametro PARDER .)
    PARDER          reduce using rule 83 (opcionid -> PARIZQ r_era_funcion_retorno parametros r_terminar_parametro PARDER .)
    COMA            reduce using rule 83 (opcionid -> PARIZQ r_era_funcion_retorno parametros r_terminar_parametro PARDER .)
    TO              reduce using rule 83 (opcionid -> PARIZQ r_era_funcion_retorno parametros r_terminar_parametro PARDER .)
    CORDER          reduce using rule 83 (opcionid -> PARIZQ r_era_funcion_retorno parametros r_terminar_parametro PARDER .)
    DO              reduce using rule 83 (opcionid -> PARIZQ r_era_funcion_retorno parametros r_terminar_parametro PARDER .)
    PTOCOM          reduce using rule 83 (opcionid -> PARIZQ r_era_funcion_retorno parametros r_terminar_parametro PARDER .)


state 343

    (114) nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO . bloque r_for_paso_2
    (37) bloque -> . KEYIZQ bloqueopcion KEYDER

    KEYIZQ          shift and go to state 54

    bloque                         shift and go to state 351

state 344

    (55) estatutofunc -> RETURN PARIZQ expresion . r_return_func PARDER PTOCOM
    (152) r_return_func -> .

    PARDER          reduce using rule 152 (r_return_func -> .)

    r_return_func                  shift and go to state 352

state 345

    (115) decisionfunc -> IF PARIZQ expresion . PARDER r_if_paso_1 THEN bloquefunc decisionfunc_else r_if_paso_3

    PARDER          shift and go to state 353


state 346

    (120) condicionalfunc -> WHILE PARIZQ expresion . PARDER DO bloquefunc

    PARDER          shift and go to state 354


state 347

    (121) nocondicionalfunc -> FOR iddim IGU . expresion TO expresion DO bloquefunc
    (57) expresion -> . exp r_pop_comp expresionsig
    (69) exp -> . termino r_pop_mas expciclo
    (73) termino -> . factor r_pop_mult factorciclo
    (77) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (78) factor -> . masomenos varcte
    (79) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (80) masomenos -> . MAS
    (81) masomenos -> . MENOS
    (82) masomenos -> . empty
    (122) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 109
    ID              shift and go to state 115
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    CTEI            reduce using rule 122 (empty -> .)
    CTEF            reduce using rule 122 (empty -> .)

  ! ID              [ reduce using rule 122 (empty -> .) ]

    expresion                      shift and go to state 355
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    masomenos                      shift and go to state 114
    empty                          shift and go to state 118

state 348

    (17) opciontipo -> ID r_register_variable_name arr_uno arr_dos r_verify_array varciclo PTOCOM . tipociclo
    (15) tipociclo -> . tipo opciontipo
    (16) tipociclo -> . empty
    (19) tipo -> . INT r_register_variable_type
    (20) tipo -> . FLT r_register_variable_type
    (21) tipo -> . CHAR r_register_variable_type
    (122) empty -> .

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    INT             shift and go to state 22
    FLT             shift and go to state 23
    CHAR            shift and go to state 24
    VOID            reduce using rule 122 (empty -> .)
    MAIN            reduce using rule 122 (empty -> .)
    KEYIZQ          reduce using rule 122 (empty -> .)

  ! INT             [ reduce using rule 122 (empty -> .) ]
  ! FLT             [ reduce using rule 122 (empty -> .) ]
  ! CHAR            [ reduce using rule 122 (empty -> .) ]

    tipociclo                      shift and go to state 356
    tipo                           shift and go to state 130
    empty                          shift and go to state 132

state 349

    (18) opciontipo -> MODULE ID r_update_func_type r_update_curr_function_name_especial PARIZQ r_marcar_funcion opcionvarsimple . r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return
    (142) r_desmarcar_funcion -> .

    PARDER          reduce using rule 142 (r_desmarcar_funcion -> .)

    r_desmarcar_funcion            shift and go to state 357

state 350

    (56) asignacion -> ID r_verifica_variable_existe r_guardar_variable arrexp_uno arrexp_dos r_pila_operandos_push_id IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM .

    ID              reduce using rule 56 (asignacion -> ID r_verifica_variable_existe r_guardar_variable arrexp_uno arrexp_dos r_pila_operandos_push_id IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM .)
    IF              reduce using rule 56 (asignacion -> ID r_verifica_variable_existe r_guardar_variable arrexp_uno arrexp_dos r_pila_operandos_push_id IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM .)
    WRITE           reduce using rule 56 (asignacion -> ID r_verifica_variable_existe r_guardar_variable arrexp_uno arrexp_dos r_pila_operandos_push_id IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM .)
    READ            reduce using rule 56 (asignacion -> ID r_verifica_variable_existe r_guardar_variable arrexp_uno arrexp_dos r_pila_operandos_push_id IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM .)
    WHILE           reduce using rule 56 (asignacion -> ID r_verifica_variable_existe r_guardar_variable arrexp_uno arrexp_dos r_pila_operandos_push_id IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM .)
    FOR             reduce using rule 56 (asignacion -> ID r_verifica_variable_existe r_guardar_variable arrexp_uno arrexp_dos r_pila_operandos_push_id IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM .)
    KEYDER          reduce using rule 56 (asignacion -> ID r_verifica_variable_existe r_guardar_variable arrexp_uno arrexp_dos r_pila_operandos_push_id IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM .)
    RETURN          reduce using rule 56 (asignacion -> ID r_verifica_variable_existe r_guardar_variable arrexp_uno arrexp_dos r_pila_operandos_push_id IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM .)


state 351

    (114) nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque . r_for_paso_2
    (160) r_for_paso_2 -> .

    ID              reduce using rule 160 (r_for_paso_2 -> .)
    IF              reduce using rule 160 (r_for_paso_2 -> .)
    WRITE           reduce using rule 160 (r_for_paso_2 -> .)
    READ            reduce using rule 160 (r_for_paso_2 -> .)
    WHILE           reduce using rule 160 (r_for_paso_2 -> .)
    FOR             reduce using rule 160 (r_for_paso_2 -> .)
    KEYDER          reduce using rule 160 (r_for_paso_2 -> .)

    r_for_paso_2                   shift and go to state 358

state 352

    (55) estatutofunc -> RETURN PARIZQ expresion r_return_func . PARDER PTOCOM

    PARDER          shift and go to state 359


state 353

    (115) decisionfunc -> IF PARIZQ expresion PARDER . r_if_paso_1 THEN bloquefunc decisionfunc_else r_if_paso_3
    (144) r_if_paso_1 -> .

    THEN            reduce using rule 144 (r_if_paso_1 -> .)

    r_if_paso_1                    shift and go to state 360

state 354

    (120) condicionalfunc -> WHILE PARIZQ expresion PARDER . DO bloquefunc

    DO              shift and go to state 361


state 355

    (121) nocondicionalfunc -> FOR iddim IGU expresion . TO expresion DO bloquefunc

    TO              shift and go to state 362


state 356

    (17) opciontipo -> ID r_register_variable_name arr_uno arr_dos r_verify_array varciclo PTOCOM tipociclo .

    VOID            reduce using rule 17 (opciontipo -> ID r_register_variable_name arr_uno arr_dos r_verify_array varciclo PTOCOM tipociclo .)
    INT             reduce using rule 17 (opciontipo -> ID r_register_variable_name arr_uno arr_dos r_verify_array varciclo PTOCOM tipociclo .)
    FLT             reduce using rule 17 (opciontipo -> ID r_register_variable_name arr_uno arr_dos r_verify_array varciclo PTOCOM tipociclo .)
    CHAR            reduce using rule 17 (opciontipo -> ID r_register_variable_name arr_uno arr_dos r_verify_array varciclo PTOCOM tipociclo .)
    MAIN            reduce using rule 17 (opciontipo -> ID r_register_variable_name arr_uno arr_dos r_verify_array varciclo PTOCOM tipociclo .)
    KEYIZQ          reduce using rule 17 (opciontipo -> ID r_register_variable_name arr_uno arr_dos r_verify_array varciclo PTOCOM tipociclo .)


state 357

    (18) opciontipo -> MODULE ID r_update_func_type r_update_curr_function_name_especial PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion . PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return

    PARDER          shift and go to state 363


state 358

    (114) nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2 .

    ID              reduce using rule 114 (nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2 .)
    IF              reduce using rule 114 (nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2 .)
    WRITE           reduce using rule 114 (nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2 .)
    READ            reduce using rule 114 (nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2 .)
    WHILE           reduce using rule 114 (nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2 .)
    FOR             reduce using rule 114 (nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2 .)
    KEYDER          reduce using rule 114 (nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2 .)


state 359

    (55) estatutofunc -> RETURN PARIZQ expresion r_return_func PARDER . PTOCOM

    PTOCOM          shift and go to state 364


state 360

    (115) decisionfunc -> IF PARIZQ expresion PARDER r_if_paso_1 . THEN bloquefunc decisionfunc_else r_if_paso_3

    THEN            shift and go to state 365


state 361

    (120) condicionalfunc -> WHILE PARIZQ expresion PARDER DO . bloquefunc
    (40) bloquefunc -> . KEYIZQ bloqueopcionfunc KEYDER

    KEYIZQ          shift and go to state 282

    bloquefunc                     shift and go to state 366

state 362

    (121) nocondicionalfunc -> FOR iddim IGU expresion TO . expresion DO bloquefunc
    (57) expresion -> . exp r_pop_comp expresionsig
    (69) exp -> . termino r_pop_mas expciclo
    (73) termino -> . factor r_pop_mult factorciclo
    (77) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (78) factor -> . masomenos varcte
    (79) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (80) masomenos -> . MAS
    (81) masomenos -> . MENOS
    (82) masomenos -> . empty
    (122) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 109
    ID              shift and go to state 115
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    CTEI            reduce using rule 122 (empty -> .)
    CTEF            reduce using rule 122 (empty -> .)

  ! ID              [ reduce using rule 122 (empty -> .) ]

    expresion                      shift and go to state 367
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    masomenos                      shift and go to state 114
    empty                          shift and go to state 118

state 363

    (18) opciontipo -> MODULE ID r_update_func_type r_update_curr_function_name_especial PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER . r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return
    (130) r_register_param_types -> .

    VARTOKEN        reduce using rule 130 (r_register_param_types -> .)
    KEYIZQ          reduce using rule 130 (r_register_param_types -> .)

    r_register_param_types         shift and go to state 368

state 364

    (55) estatutofunc -> RETURN PARIZQ expresion r_return_func PARDER PTOCOM .

    RETURN          reduce using rule 55 (estatutofunc -> RETURN PARIZQ expresion r_return_func PARDER PTOCOM .)
    ID              reduce using rule 55 (estatutofunc -> RETURN PARIZQ expresion r_return_func PARDER PTOCOM .)
    IF              reduce using rule 55 (estatutofunc -> RETURN PARIZQ expresion r_return_func PARDER PTOCOM .)
    WRITE           reduce using rule 55 (estatutofunc -> RETURN PARIZQ expresion r_return_func PARDER PTOCOM .)
    READ            reduce using rule 55 (estatutofunc -> RETURN PARIZQ expresion r_return_func PARDER PTOCOM .)
    WHILE           reduce using rule 55 (estatutofunc -> RETURN PARIZQ expresion r_return_func PARDER PTOCOM .)
    FOR             reduce using rule 55 (estatutofunc -> RETURN PARIZQ expresion r_return_func PARDER PTOCOM .)
    KEYDER          reduce using rule 55 (estatutofunc -> RETURN PARIZQ expresion r_return_func PARDER PTOCOM .)


state 365

    (115) decisionfunc -> IF PARIZQ expresion PARDER r_if_paso_1 THEN . bloquefunc decisionfunc_else r_if_paso_3
    (40) bloquefunc -> . KEYIZQ bloqueopcionfunc KEYDER

    KEYIZQ          shift and go to state 282

    bloquefunc                     shift and go to state 369

state 366

    (120) condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc .

    RETURN          reduce using rule 120 (condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc .)
    ID              reduce using rule 120 (condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc .)
    IF              reduce using rule 120 (condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc .)
    WRITE           reduce using rule 120 (condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc .)
    READ            reduce using rule 120 (condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc .)
    WHILE           reduce using rule 120 (condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc .)
    FOR             reduce using rule 120 (condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc .)
    KEYDER          reduce using rule 120 (condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc .)


state 367

    (121) nocondicionalfunc -> FOR iddim IGU expresion TO expresion . DO bloquefunc

    DO              shift and go to state 370


state 368

    (18) opciontipo -> MODULE ID r_update_func_type r_update_curr_function_name_especial PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types . opvars r_register_quad bloquefunc r_endfunc r_asegurar_return
    (2) opvars -> . vars
    (3) opvars -> . empty
    (6) vars -> . VARTOKEN tipo ID r_register_variable_name arr_uno arr_dos r_verify_array varciclo PTOCOM tipociclo
    (122) empty -> .

    VARTOKEN        shift and go to state 10
    KEYIZQ          reduce using rule 122 (empty -> .)

    opvars                         shift and go to state 371
    vars                           shift and go to state 8
    empty                          shift and go to state 9

state 369

    (115) decisionfunc -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloquefunc . decisionfunc_else r_if_paso_3
    (116) decisionfunc_else -> . ELSE r_if_paso_2 bloquefunc
    (117) decisionfunc_else -> . empty
    (122) empty -> .

    ELSE            shift and go to state 373
    RETURN          reduce using rule 122 (empty -> .)
    ID              reduce using rule 122 (empty -> .)
    IF              reduce using rule 122 (empty -> .)
    WRITE           reduce using rule 122 (empty -> .)
    READ            reduce using rule 122 (empty -> .)
    WHILE           reduce using rule 122 (empty -> .)
    FOR             reduce using rule 122 (empty -> .)
    KEYDER          reduce using rule 122 (empty -> .)

    decisionfunc_else              shift and go to state 372
    empty                          shift and go to state 374

state 370

    (121) nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO . bloquefunc
    (40) bloquefunc -> . KEYIZQ bloqueopcionfunc KEYDER

    KEYIZQ          shift and go to state 282

    bloquefunc                     shift and go to state 375

state 371

    (18) opciontipo -> MODULE ID r_update_func_type r_update_curr_function_name_especial PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars . r_register_quad bloquefunc r_endfunc r_asegurar_return
    (133) r_register_quad -> .

    KEYIZQ          reduce using rule 133 (r_register_quad -> .)

    r_register_quad                shift and go to state 376

state 372

    (115) decisionfunc -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloquefunc decisionfunc_else . r_if_paso_3
    (154) r_if_paso_3 -> .

    RETURN          reduce using rule 154 (r_if_paso_3 -> .)
    ID              reduce using rule 154 (r_if_paso_3 -> .)
    IF              reduce using rule 154 (r_if_paso_3 -> .)
    WRITE           reduce using rule 154 (r_if_paso_3 -> .)
    READ            reduce using rule 154 (r_if_paso_3 -> .)
    WHILE           reduce using rule 154 (r_if_paso_3 -> .)
    FOR             reduce using rule 154 (r_if_paso_3 -> .)
    KEYDER          reduce using rule 154 (r_if_paso_3 -> .)

    r_if_paso_3                    shift and go to state 377

state 373

    (116) decisionfunc_else -> ELSE . r_if_paso_2 bloquefunc
    (153) r_if_paso_2 -> .

    KEYIZQ          reduce using rule 153 (r_if_paso_2 -> .)

    r_if_paso_2                    shift and go to state 378

state 374

    (117) decisionfunc_else -> empty .

    RETURN          reduce using rule 117 (decisionfunc_else -> empty .)
    ID              reduce using rule 117 (decisionfunc_else -> empty .)
    IF              reduce using rule 117 (decisionfunc_else -> empty .)
    WRITE           reduce using rule 117 (decisionfunc_else -> empty .)
    READ            reduce using rule 117 (decisionfunc_else -> empty .)
    WHILE           reduce using rule 117 (decisionfunc_else -> empty .)
    FOR             reduce using rule 117 (decisionfunc_else -> empty .)
    KEYDER          reduce using rule 117 (decisionfunc_else -> empty .)


state 375

    (121) nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc .

    RETURN          reduce using rule 121 (nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc .)
    ID              reduce using rule 121 (nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc .)
    IF              reduce using rule 121 (nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc .)
    WRITE           reduce using rule 121 (nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc .)
    READ            reduce using rule 121 (nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc .)
    WHILE           reduce using rule 121 (nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc .)
    FOR             reduce using rule 121 (nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc .)
    KEYDER          reduce using rule 121 (nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc .)


state 376

    (18) opciontipo -> MODULE ID r_update_func_type r_update_curr_function_name_especial PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad . bloquefunc r_endfunc r_asegurar_return
    (40) bloquefunc -> . KEYIZQ bloqueopcionfunc KEYDER

    KEYIZQ          shift and go to state 282

    bloquefunc                     shift and go to state 379

state 377

    (115) decisionfunc -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloquefunc decisionfunc_else r_if_paso_3 .

    RETURN          reduce using rule 115 (decisionfunc -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloquefunc decisionfunc_else r_if_paso_3 .)
    ID              reduce using rule 115 (decisionfunc -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloquefunc decisionfunc_else r_if_paso_3 .)
    IF              reduce using rule 115 (decisionfunc -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloquefunc decisionfunc_else r_if_paso_3 .)
    WRITE           reduce using rule 115 (decisionfunc -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloquefunc decisionfunc_else r_if_paso_3 .)
    READ            reduce using rule 115 (decisionfunc -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloquefunc decisionfunc_else r_if_paso_3 .)
    WHILE           reduce using rule 115 (decisionfunc -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloquefunc decisionfunc_else r_if_paso_3 .)
    FOR             reduce using rule 115 (decisionfunc -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloquefunc decisionfunc_else r_if_paso_3 .)
    KEYDER          reduce using rule 115 (decisionfunc -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloquefunc decisionfunc_else r_if_paso_3 .)


state 378

    (116) decisionfunc_else -> ELSE r_if_paso_2 . bloquefunc
    (40) bloquefunc -> . KEYIZQ bloqueopcionfunc KEYDER

    KEYIZQ          shift and go to state 282

    bloquefunc                     shift and go to state 380

state 379

    (18) opciontipo -> MODULE ID r_update_func_type r_update_curr_function_name_especial PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc . r_endfunc r_asegurar_return
    (143) r_endfunc -> .

    VOID            reduce using rule 143 (r_endfunc -> .)
    INT             reduce using rule 143 (r_endfunc -> .)
    FLT             reduce using rule 143 (r_endfunc -> .)
    CHAR            reduce using rule 143 (r_endfunc -> .)
    MAIN            reduce using rule 143 (r_endfunc -> .)
    KEYIZQ          reduce using rule 143 (r_endfunc -> .)

    r_endfunc                      shift and go to state 381

state 380

    (116) decisionfunc_else -> ELSE r_if_paso_2 bloquefunc .

    RETURN          reduce using rule 116 (decisionfunc_else -> ELSE r_if_paso_2 bloquefunc .)
    ID              reduce using rule 116 (decisionfunc_else -> ELSE r_if_paso_2 bloquefunc .)
    IF              reduce using rule 116 (decisionfunc_else -> ELSE r_if_paso_2 bloquefunc .)
    WRITE           reduce using rule 116 (decisionfunc_else -> ELSE r_if_paso_2 bloquefunc .)
    READ            reduce using rule 116 (decisionfunc_else -> ELSE r_if_paso_2 bloquefunc .)
    WHILE           reduce using rule 116 (decisionfunc_else -> ELSE r_if_paso_2 bloquefunc .)
    FOR             reduce using rule 116 (decisionfunc_else -> ELSE r_if_paso_2 bloquefunc .)
    KEYDER          reduce using rule 116 (decisionfunc_else -> ELSE r_if_paso_2 bloquefunc .)


state 381

    (18) opciontipo -> MODULE ID r_update_func_type r_update_curr_function_name_especial PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc . r_asegurar_return
    (136) r_asegurar_return -> .

    VOID            reduce using rule 136 (r_asegurar_return -> .)
    INT             reduce using rule 136 (r_asegurar_return -> .)
    FLT             reduce using rule 136 (r_asegurar_return -> .)
    CHAR            reduce using rule 136 (r_asegurar_return -> .)
    MAIN            reduce using rule 136 (r_asegurar_return -> .)
    KEYIZQ          reduce using rule 136 (r_asegurar_return -> .)

    r_asegurar_return              shift and go to state 382

state 382

    (18) opciontipo -> MODULE ID r_update_func_type r_update_curr_function_name_especial PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return .

    VOID            reduce using rule 18 (opciontipo -> MODULE ID r_update_func_type r_update_curr_function_name_especial PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return .)
    INT             reduce using rule 18 (opciontipo -> MODULE ID r_update_func_type r_update_curr_function_name_especial PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return .)
    FLT             reduce using rule 18 (opciontipo -> MODULE ID r_update_func_type r_update_curr_function_name_especial PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return .)
    CHAR            reduce using rule 18 (opciontipo -> MODULE ID r_update_func_type r_update_curr_function_name_especial PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return .)
    MAIN            reduce using rule 18 (opciontipo -> MODULE ID r_update_func_type r_update_curr_function_name_especial PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return .)
    KEYIZQ          reduce using rule 18 (opciontipo -> MODULE ID r_update_func_type r_update_curr_function_name_especial PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for CORIZQ in state 39 resolved as shift
WARNING: shift/reduce conflict for ID in state 91 resolved as shift
WARNING: shift/reduce conflict for ID in state 92 resolved as shift
WARNING: shift/reduce conflict for INT in state 104 resolved as shift
WARNING: shift/reduce conflict for FLT in state 104 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 104 resolved as shift
WARNING: shift/reduce conflict for CORIZQ in state 107 resolved as shift
WARNING: shift/reduce conflict for ID in state 123 resolved as shift
WARNING: shift/reduce conflict for CORIZQ in state 129 resolved as shift
WARNING: shift/reduce conflict for CORIZQ in state 133 resolved as shift
WARNING: shift/reduce conflict for ID in state 137 resolved as shift
WARNING: shift/reduce conflict for ID in state 138 resolved as shift
WARNING: shift/reduce conflict for ID in state 149 resolved as shift
WARNING: shift/reduce conflict for ID in state 155 resolved as shift
WARNING: shift/reduce conflict for CORIZQ in state 156 resolved as shift
WARNING: shift/reduce conflict for ID in state 170 resolved as shift
WARNING: shift/reduce conflict for CORIZQ in state 196 resolved as shift
WARNING: shift/reduce conflict for ID in state 205 resolved as shift
WARNING: shift/reduce conflict for CORIZQ in state 211 resolved as shift
WARNING: shift/reduce conflict for ID in state 215 resolved as shift
WARNING: shift/reduce conflict for ID in state 223 resolved as shift
WARNING: shift/reduce conflict for ID in state 224 resolved as shift
WARNING: shift/reduce conflict for ID in state 225 resolved as shift
WARNING: shift/reduce conflict for ID in state 226 resolved as shift
WARNING: shift/reduce conflict for ID in state 229 resolved as shift
WARNING: shift/reduce conflict for ID in state 230 resolved as shift
WARNING: shift/reduce conflict for ID in state 231 resolved as shift
WARNING: shift/reduce conflict for ID in state 232 resolved as shift
WARNING: shift/reduce conflict for ID in state 254 resolved as shift
WARNING: shift/reduce conflict for ID in state 258 resolved as shift
WARNING: shift/reduce conflict for ID in state 261 resolved as shift
WARNING: shift/reduce conflict for ID in state 266 resolved as shift
WARNING: shift/reduce conflict for ID in state 267 resolved as shift
WARNING: shift/reduce conflict for ID in state 273 resolved as shift
WARNING: shift/reduce conflict for ID in state 278 resolved as shift
WARNING: shift/reduce conflict for ID in state 286 resolved as shift
WARNING: shift/reduce conflict for ID in state 333 resolved as shift
WARNING: shift/reduce conflict for ID in state 334 resolved as shift
WARNING: shift/reduce conflict for ID in state 335 resolved as shift
WARNING: shift/reduce conflict for ID in state 347 resolved as shift
WARNING: shift/reduce conflict for INT in state 348 resolved as shift
WARNING: shift/reduce conflict for FLT in state 348 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 348 resolved as shift
WARNING: shift/reduce conflict for ID in state 362 resolved as shift
