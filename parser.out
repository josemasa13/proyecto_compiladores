Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DOSPTS

Grammar

Rule 0     S' -> program
Rule 1     program -> PRO ID r_register_global PTOCOM opvars opfunciones MAIN PARIZQ PARDER bloque
Rule 2     opvars -> vars
Rule 3     opvars -> empty
Rule 4     opfunciones -> funciones opfunciones
Rule 5     opfunciones -> empty
Rule 6     vars -> VARTOKEN tipo ID r_register_variable_name arr arr varciclo PTOCOM tipociclo
Rule 7     varciclo -> COMA ID r_register_variable_name arr arr varciclo
Rule 8     varciclo -> empty
Rule 9     arr -> CORIZQ CTEI CORDER
Rule 10    arr -> empty
Rule 11    tipociclo -> tipo opciontipo
Rule 12    tipociclo -> empty
Rule 13    opciontipo -> ID r_register_variable_name arr arr varciclo PTOCOM tipociclo
Rule 14    opciontipo -> MODULE ID PARIZQ opcionvarsimple PARDER opvars bloquefunc
Rule 15    tipo -> INT r_register_variable_type
Rule 16    tipo -> FLT r_register_variable_type
Rule 17    tipo -> CHAR r_register_variable_type
Rule 18    tipo_func -> INT r_register_function
Rule 19    tipo_func -> FLT r_register_function
Rule 20    tipo_func -> CHAR r_register_function
Rule 21    varsimple -> tipo ident
Rule 22    funciones -> funcionvoid
Rule 23    funciones -> funcion
Rule 24    funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloque
Rule 25    opcionvarsimple -> varsimple ciclovarsimple
Rule 26    opcionvarsimple -> empty
Rule 27    ciclovarsimple -> COMA varsimple ciclovarsimple
Rule 28    ciclovarsimple -> empty
Rule 29    funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloquefunc
Rule 30    ident -> ID r_register_variable_name arrini arrini
Rule 31    arrini -> CORIZQ CORDER
Rule 32    arrini -> empty
Rule 33    bloque -> KEYIZQ bloqueopcion KEYDER
Rule 34    bloqueopcion -> estatuto bloqueopcion
Rule 35    bloqueopcion -> empty
Rule 36    bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER
Rule 37    bloqueopcionfunc -> estatutofunc bloqueopcionfunc
Rule 38    bloqueopcionfunc -> empty
Rule 39    estatuto -> asignacion
Rule 40    estatuto -> decision
Rule 41    estatuto -> escritura
Rule 42    estatuto -> llamadafunc
Rule 43    estatuto -> repeticion
Rule 44    estatuto -> lectura
Rule 45    estatutofunc -> asignacion
Rule 46    estatutofunc -> decisionfunc
Rule 47    estatutofunc -> escritura
Rule 48    estatutofunc -> llamadafunc
Rule 49    estatutofunc -> repeticionfunc
Rule 50    estatutofunc -> lectura
Rule 51    estatutofunc -> RETURN PARIZQ expresion PARDER PTOCOM
Rule 52    asignacion -> ID r_verifica_variable_existe r_pila_operandos_push asignacionarr asignacionarr IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM
Rule 53    asignacionarr -> CORIZQ expresion CORDER
Rule 54    asignacionarr -> empty
Rule 55    expresion -> exp r_pop_comp expresionsig
Rule 56    expresionsig -> MAY r_pila_operadores_push_may expresionsigequal expresion
Rule 57    expresionsig -> MEN r_pila_operadores_push_men expresionsigequal expresion
Rule 58    expresionsig -> DIF r_pila_operadores_push_dif expresion
Rule 59    expresionsig -> IGUIGU r_pila_operadores_push_iguigu expresion
Rule 60    expresionsig -> AND r_pila_operadores_push_and expresion
Rule 61    expresionsig -> OR r_pila_operadores_push_or expresion
Rule 62    expresionsig -> empty
Rule 63    expresionsigequal -> IGU
Rule 64    expresionsigequal -> empty
Rule 65    exp -> termino r_pop_mas expciclo
Rule 66    expciclo -> MAS r_pila_operadores_push_mas exp
Rule 67    expciclo -> MENOS r_pila_operadores_push_menos exp
Rule 68    expciclo -> empty
Rule 69    termino -> factor r_pop_mult factorciclo
Rule 70    factorciclo -> MULT r_pila_operadores_push_mult termino
Rule 71    factorciclo -> DIV r_pila_operadores_push_div termino
Rule 72    factorciclo -> empty
Rule 73    factor -> PARIZQ expresion PARDER
Rule 74    factor -> masomenos varcte
Rule 75    factor -> ID r_verifica_variable_existe r_pila_operandos_push opcionid
Rule 76    masomenos -> MAS
Rule 77    masomenos -> MENOS
Rule 78    masomenos -> empty
Rule 79    opcionid -> arrexp arrexp
Rule 80    opcionid -> PARIZQ parametros PARDER
Rule 81    varcte -> iddim
Rule 82    varcte -> CTEI r_pila_operandos_push_cte_int
Rule 83    varcte -> CTEF r_pila_operandos_push_cte_flt
Rule 84    parametros -> expresion cicloparametros
Rule 85    parametros -> empty
Rule 86    cicloparametros -> COMA expresion cicloparametros
Rule 87    cicloparametros -> empty
Rule 88    decision -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloque ELSE r_if_paso_2 bloque r_if_paso_3
Rule 89    escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM
Rule 90    escrituraciclo -> CTE_STRING
Rule 91    escrituraciclo -> expresion
Rule 92    otro -> COMA escrituraciclo otro
Rule 93    otro -> empty
Rule 94    llamadafunc -> ID PARIZQ parametros PARDER PTOCOM
Rule 95    lectura -> READ PARIZQ iddim ciclodim PARDER PTOCOM
Rule 96    ciclodim -> COMA iddim ciclodim
Rule 97    ciclodim -> empty
Rule 98    iddim -> ID r_verifica_variable_existe r_pila_operandos_push arrexp arrexp
Rule 99    arrexp -> CORIZQ expresion CORDER
Rule 100   arrexp -> empty
Rule 101   repeticion -> condicional
Rule 102   repeticion -> nocondicional
Rule 103   condicional -> WHILE r_while_paso_1 PARIZQ expresion PARDER r_while_paso_2 DO bloque r_while_paso_3
Rule 104   nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2
Rule 105   decisionfunc -> IF PARIZQ expresion PARDER THEN bloquefunc ELSE bloquefunc
Rule 106   repeticionfunc -> condicionalfunc
Rule 107   repeticionfunc -> nocondicionalfunc
Rule 108   condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc
Rule 109   nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc
Rule 110   empty -> <empty>
Rule 111   r_register_global -> <empty>
Rule 112   r_register_function -> <empty>
Rule 113   r_update_curr_function_name -> <empty>
Rule 114   r_register_variable_type -> <empty>
Rule 115   r_register_variable_name -> <empty>
Rule 116   r_verifica_variable_existe -> <empty>
Rule 117   r_if_paso_1 -> <empty>
Rule 118   r_if_paso_2 -> <empty>
Rule 119   r_if_paso_3 -> <empty>
Rule 120   r_while_paso_1 -> <empty>
Rule 121   r_while_paso_2 -> <empty>
Rule 122   r_while_paso_3 -> <empty>
Rule 123   r_pop_igu_for -> <empty>
Rule 124   r_for_paso_1 -> <empty>
Rule 125   r_for_paso_2 -> <empty>
Rule 126   r_pila_operandos_push -> <empty>
Rule 127   r_pila_operandos_push_cte_int -> <empty>
Rule 128   r_pila_operandos_push_cte_flt -> <empty>
Rule 129   r_pop_mult -> <empty>
Rule 130   r_pop_mas -> <empty>
Rule 131   r_pop_comp -> <empty>
Rule 132   r_pop_igu -> <empty>
Rule 133   r_pila_operadores_push_mult -> <empty>
Rule 134   r_pila_operadores_push_div -> <empty>
Rule 135   r_pila_operadores_push_mas -> <empty>
Rule 136   r_pila_operadores_push_menos -> <empty>
Rule 137   r_pila_operadores_push_may -> <empty>
Rule 138   r_pila_operadores_push_men -> <empty>
Rule 139   r_pila_operadores_push_dif -> <empty>
Rule 140   r_pila_operadores_push_iguigu -> <empty>
Rule 141   r_pila_operadores_push_and -> <empty>
Rule 142   r_pila_operadores_push_or -> <empty>
Rule 143   r_pila_operadores_push_igu -> <empty>

Terminals, with rules where they appear

AND                  : 60
CHAR                 : 17 20
COMA                 : 7 27 86 92 96
CORDER               : 9 31 53 99
CORIZQ               : 9 31 53 99
CTEF                 : 83
CTEI                 : 9 82
CTE_STRING           : 90
DIF                  : 58
DIV                  : 71
DO                   : 103 104 108 109
DOSPTS               : 
ELSE                 : 88 105
FLT                  : 16 19
FOR                  : 104 109
ID                   : 1 6 7 13 14 24 29 30 52 75 94 98
IF                   : 88 105
IGU                  : 52 63 104 109
IGUIGU               : 59
INT                  : 15 18
KEYDER               : 33 36
KEYIZQ               : 33 36
MAIN                 : 1
MAS                  : 66 76
MAY                  : 56
MEN                  : 57
MENOS                : 67 77
MODULE               : 14 24 29
MULT                 : 70
OR                   : 61
PARDER               : 1 14 24 29 51 73 80 88 89 94 95 103 105 108
PARIZQ               : 1 14 24 29 51 73 80 88 89 94 95 103 105 108
PRO                  : 1
PTOCOM               : 1 6 13 51 52 89 94 95
READ                 : 95
RETURN               : 51
THEN                 : 88 105
TO                   : 104 109
VARTOKEN             : 6
VOID                 : 24
WHILE                : 103 108
WRITE                : 89
error                : 

Nonterminals, with rules where they appear

arr                  : 6 6 7 7 13 13
arrexp               : 79 79 98 98
arrini               : 30 30
asignacion           : 39 45
asignacionarr        : 52 52
bloque               : 1 24 88 88 103 104
bloquefunc           : 14 29 105 105 108 109
bloqueopcion         : 33 34
bloqueopcionfunc     : 36 37
ciclodim             : 95 96
cicloparametros      : 84 86
ciclovarsimple       : 25 27
condicional          : 101
condicionalfunc      : 106
decision             : 40
decisionfunc         : 46
empty                : 3 5 8 10 12 26 28 32 35 38 54 62 64 68 72 78 85 87 93 97 100
escritura            : 41 47
escrituraciclo       : 89 92
estatuto             : 34
estatutofunc         : 37
exp                  : 55 66 67
expciclo             : 65
expresion            : 51 52 53 56 57 58 59 60 61 73 84 86 88 91 99 103 104 104 105 108 109 109
expresionsig         : 55
expresionsigequal    : 56 57
factor               : 69
factorciclo          : 69
funcion              : 23
funciones            : 4
funcionvoid          : 22
iddim                : 81 95 96 104 109
ident                : 21
lectura              : 44 50
llamadafunc          : 42 48
masomenos            : 74
nocondicional        : 102
nocondicionalfunc    : 107
opcionid             : 75
opciontipo           : 11
opcionvarsimple      : 14 24 29
opfunciones          : 1 4
opvars               : 1 14 24 29
otro                 : 89 92
parametros           : 80 94
program              : 0
r_for_paso_1         : 104
r_for_paso_2         : 104
r_if_paso_1          : 88
r_if_paso_2          : 88
r_if_paso_3          : 88
r_pila_operadores_push_and : 60
r_pila_operadores_push_dif : 58
r_pila_operadores_push_div : 71
r_pila_operadores_push_igu : 52 104
r_pila_operadores_push_iguigu : 59
r_pila_operadores_push_mas : 66
r_pila_operadores_push_may : 56
r_pila_operadores_push_men : 57
r_pila_operadores_push_menos : 67
r_pila_operadores_push_mult : 70
r_pila_operadores_push_or : 61
r_pila_operandos_push : 52 75 98
r_pila_operandos_push_cte_flt : 83
r_pila_operandos_push_cte_int : 82
r_pop_comp           : 55
r_pop_igu            : 52
r_pop_igu_for        : 104
r_pop_mas            : 65
r_pop_mult           : 69
r_register_function  : 18 19 20 24
r_register_global    : 1
r_register_variable_name : 6 7 13 30
r_register_variable_type : 15 16 17
r_update_curr_function_name : 24 29
r_verifica_variable_existe : 52 75 98
r_while_paso_1       : 103
r_while_paso_2       : 103
r_while_paso_3       : 103
repeticion           : 43
repeticionfunc       : 49
termino              : 65 70 71
tipo                 : 6 11 21
tipo_func            : 29
tipociclo            : 6 13
varciclo             : 6 7 13
varcte               : 74
vars                 : 2
varsimple            : 25 27

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PRO ID r_register_global PTOCOM opvars opfunciones MAIN PARIZQ PARDER bloque

    PRO             shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PRO . ID r_register_global PTOCOM opvars opfunciones MAIN PARIZQ PARDER bloque

    ID              shift and go to state 3


state 3

    (1) program -> PRO ID . r_register_global PTOCOM opvars opfunciones MAIN PARIZQ PARDER bloque
    (111) r_register_global -> .

    PTOCOM          reduce using rule 111 (r_register_global -> .)

    r_register_global              shift and go to state 4

state 4

    (1) program -> PRO ID r_register_global . PTOCOM opvars opfunciones MAIN PARIZQ PARDER bloque

    PTOCOM          shift and go to state 5


state 5

    (1) program -> PRO ID r_register_global PTOCOM . opvars opfunciones MAIN PARIZQ PARDER bloque
    (2) opvars -> . vars
    (3) opvars -> . empty
    (6) vars -> . VARTOKEN tipo ID r_register_variable_name arr arr varciclo PTOCOM tipociclo
    (110) empty -> .

    VARTOKEN        shift and go to state 9
    VOID            reduce using rule 110 (empty -> .)
    INT             reduce using rule 110 (empty -> .)
    FLT             reduce using rule 110 (empty -> .)
    CHAR            reduce using rule 110 (empty -> .)
    MAIN            reduce using rule 110 (empty -> .)

    opvars                         shift and go to state 6
    vars                           shift and go to state 7
    empty                          shift and go to state 8

state 6

    (1) program -> PRO ID r_register_global PTOCOM opvars . opfunciones MAIN PARIZQ PARDER bloque
    (4) opfunciones -> . funciones opfunciones
    (5) opfunciones -> . empty
    (22) funciones -> . funcionvoid
    (23) funciones -> . funcion
    (110) empty -> .
    (24) funcionvoid -> . VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloque
    (29) funcion -> . tipo_func MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloquefunc
    (18) tipo_func -> . INT r_register_function
    (19) tipo_func -> . FLT r_register_function
    (20) tipo_func -> . CHAR r_register_function

    MAIN            reduce using rule 110 (empty -> .)
    VOID            shift and go to state 15
    INT             shift and go to state 17
    FLT             shift and go to state 18
    CHAR            shift and go to state 19

    opfunciones                    shift and go to state 10
    funciones                      shift and go to state 11
    empty                          shift and go to state 12
    funcionvoid                    shift and go to state 13
    funcion                        shift and go to state 14
    tipo_func                      shift and go to state 16

state 7

    (2) opvars -> vars .

    VOID            reduce using rule 2 (opvars -> vars .)
    INT             reduce using rule 2 (opvars -> vars .)
    FLT             reduce using rule 2 (opvars -> vars .)
    CHAR            reduce using rule 2 (opvars -> vars .)
    MAIN            reduce using rule 2 (opvars -> vars .)
    KEYIZQ          reduce using rule 2 (opvars -> vars .)


state 8

    (3) opvars -> empty .

    VOID            reduce using rule 3 (opvars -> empty .)
    INT             reduce using rule 3 (opvars -> empty .)
    FLT             reduce using rule 3 (opvars -> empty .)
    CHAR            reduce using rule 3 (opvars -> empty .)
    MAIN            reduce using rule 3 (opvars -> empty .)
    KEYIZQ          reduce using rule 3 (opvars -> empty .)


state 9

    (6) vars -> VARTOKEN . tipo ID r_register_variable_name arr arr varciclo PTOCOM tipociclo
    (15) tipo -> . INT r_register_variable_type
    (16) tipo -> . FLT r_register_variable_type
    (17) tipo -> . CHAR r_register_variable_type

    INT             shift and go to state 21
    FLT             shift and go to state 22
    CHAR            shift and go to state 23

    tipo                           shift and go to state 20

state 10

    (1) program -> PRO ID r_register_global PTOCOM opvars opfunciones . MAIN PARIZQ PARDER bloque

    MAIN            shift and go to state 24


state 11

    (4) opfunciones -> funciones . opfunciones
    (4) opfunciones -> . funciones opfunciones
    (5) opfunciones -> . empty
    (22) funciones -> . funcionvoid
    (23) funciones -> . funcion
    (110) empty -> .
    (24) funcionvoid -> . VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloque
    (29) funcion -> . tipo_func MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloquefunc
    (18) tipo_func -> . INT r_register_function
    (19) tipo_func -> . FLT r_register_function
    (20) tipo_func -> . CHAR r_register_function

    MAIN            reduce using rule 110 (empty -> .)
    VOID            shift and go to state 15
    INT             shift and go to state 17
    FLT             shift and go to state 18
    CHAR            shift and go to state 19

    funciones                      shift and go to state 11
    opfunciones                    shift and go to state 25
    empty                          shift and go to state 12
    funcionvoid                    shift and go to state 13
    funcion                        shift and go to state 14
    tipo_func                      shift and go to state 16

state 12

    (5) opfunciones -> empty .

    MAIN            reduce using rule 5 (opfunciones -> empty .)


state 13

    (22) funciones -> funcionvoid .

    VOID            reduce using rule 22 (funciones -> funcionvoid .)
    INT             reduce using rule 22 (funciones -> funcionvoid .)
    FLT             reduce using rule 22 (funciones -> funcionvoid .)
    CHAR            reduce using rule 22 (funciones -> funcionvoid .)
    MAIN            reduce using rule 22 (funciones -> funcionvoid .)


state 14

    (23) funciones -> funcion .

    VOID            reduce using rule 23 (funciones -> funcion .)
    INT             reduce using rule 23 (funciones -> funcion .)
    FLT             reduce using rule 23 (funciones -> funcion .)
    CHAR            reduce using rule 23 (funciones -> funcion .)
    MAIN            reduce using rule 23 (funciones -> funcion .)


state 15

    (24) funcionvoid -> VOID . r_register_function MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloque
    (112) r_register_function -> .

    MODULE          reduce using rule 112 (r_register_function -> .)

    r_register_function            shift and go to state 26

state 16

    (29) funcion -> tipo_func . MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloquefunc

    MODULE          shift and go to state 27


state 17

    (18) tipo_func -> INT . r_register_function
    (112) r_register_function -> .

    MODULE          reduce using rule 112 (r_register_function -> .)

    r_register_function            shift and go to state 28

state 18

    (19) tipo_func -> FLT . r_register_function
    (112) r_register_function -> .

    MODULE          reduce using rule 112 (r_register_function -> .)

    r_register_function            shift and go to state 29

state 19

    (20) tipo_func -> CHAR . r_register_function
    (112) r_register_function -> .

    MODULE          reduce using rule 112 (r_register_function -> .)

    r_register_function            shift and go to state 30

state 20

    (6) vars -> VARTOKEN tipo . ID r_register_variable_name arr arr varciclo PTOCOM tipociclo

    ID              shift and go to state 31


state 21

    (15) tipo -> INT . r_register_variable_type
    (114) r_register_variable_type -> .

    ID              reduce using rule 114 (r_register_variable_type -> .)
    MODULE          reduce using rule 114 (r_register_variable_type -> .)

    r_register_variable_type       shift and go to state 32

state 22

    (16) tipo -> FLT . r_register_variable_type
    (114) r_register_variable_type -> .

    ID              reduce using rule 114 (r_register_variable_type -> .)
    MODULE          reduce using rule 114 (r_register_variable_type -> .)

    r_register_variable_type       shift and go to state 33

state 23

    (17) tipo -> CHAR . r_register_variable_type
    (114) r_register_variable_type -> .

    ID              reduce using rule 114 (r_register_variable_type -> .)
    MODULE          reduce using rule 114 (r_register_variable_type -> .)

    r_register_variable_type       shift and go to state 34

state 24

    (1) program -> PRO ID r_register_global PTOCOM opvars opfunciones MAIN . PARIZQ PARDER bloque

    PARIZQ          shift and go to state 35


state 25

    (4) opfunciones -> funciones opfunciones .

    MAIN            reduce using rule 4 (opfunciones -> funciones opfunciones .)


state 26

    (24) funcionvoid -> VOID r_register_function . MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloque

    MODULE          shift and go to state 36


state 27

    (29) funcion -> tipo_func MODULE . ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloquefunc

    ID              shift and go to state 37


state 28

    (18) tipo_func -> INT r_register_function .

    MODULE          reduce using rule 18 (tipo_func -> INT r_register_function .)


state 29

    (19) tipo_func -> FLT r_register_function .

    MODULE          reduce using rule 19 (tipo_func -> FLT r_register_function .)


state 30

    (20) tipo_func -> CHAR r_register_function .

    MODULE          reduce using rule 20 (tipo_func -> CHAR r_register_function .)


state 31

    (6) vars -> VARTOKEN tipo ID . r_register_variable_name arr arr varciclo PTOCOM tipociclo
    (115) r_register_variable_name -> .

    CORIZQ          reduce using rule 115 (r_register_variable_name -> .)
    COMA            reduce using rule 115 (r_register_variable_name -> .)
    PTOCOM          reduce using rule 115 (r_register_variable_name -> .)

    r_register_variable_name       shift and go to state 38

state 32

    (15) tipo -> INT r_register_variable_type .

    ID              reduce using rule 15 (tipo -> INT r_register_variable_type .)
    MODULE          reduce using rule 15 (tipo -> INT r_register_variable_type .)


state 33

    (16) tipo -> FLT r_register_variable_type .

    ID              reduce using rule 16 (tipo -> FLT r_register_variable_type .)
    MODULE          reduce using rule 16 (tipo -> FLT r_register_variable_type .)


state 34

    (17) tipo -> CHAR r_register_variable_type .

    ID              reduce using rule 17 (tipo -> CHAR r_register_variable_type .)
    MODULE          reduce using rule 17 (tipo -> CHAR r_register_variable_type .)


state 35

    (1) program -> PRO ID r_register_global PTOCOM opvars opfunciones MAIN PARIZQ . PARDER bloque

    PARDER          shift and go to state 39


state 36

    (24) funcionvoid -> VOID r_register_function MODULE . ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloque

    ID              shift and go to state 40


state 37

    (29) funcion -> tipo_func MODULE ID . r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloquefunc
    (113) r_update_curr_function_name -> .

    PARIZQ          reduce using rule 113 (r_update_curr_function_name -> .)

    r_update_curr_function_name    shift and go to state 41

state 38

    (6) vars -> VARTOKEN tipo ID r_register_variable_name . arr arr varciclo PTOCOM tipociclo
    (9) arr -> . CORIZQ CTEI CORDER
    (10) arr -> . empty
    (110) empty -> .

  ! shift/reduce conflict for CORIZQ resolved as shift
    CORIZQ          shift and go to state 43
    COMA            reduce using rule 110 (empty -> .)
    PTOCOM          reduce using rule 110 (empty -> .)

  ! CORIZQ          [ reduce using rule 110 (empty -> .) ]

    arr                            shift and go to state 42
    empty                          shift and go to state 44

state 39

    (1) program -> PRO ID r_register_global PTOCOM opvars opfunciones MAIN PARIZQ PARDER . bloque
    (33) bloque -> . KEYIZQ bloqueopcion KEYDER

    KEYIZQ          shift and go to state 46

    bloque                         shift and go to state 45

state 40

    (24) funcionvoid -> VOID r_register_function MODULE ID . r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloque
    (113) r_update_curr_function_name -> .

    PARIZQ          reduce using rule 113 (r_update_curr_function_name -> .)

    r_update_curr_function_name    shift and go to state 47

state 41

    (29) funcion -> tipo_func MODULE ID r_update_curr_function_name . PARIZQ opcionvarsimple PARDER opvars bloquefunc

    PARIZQ          shift and go to state 48


state 42

    (6) vars -> VARTOKEN tipo ID r_register_variable_name arr . arr varciclo PTOCOM tipociclo
    (9) arr -> . CORIZQ CTEI CORDER
    (10) arr -> . empty
    (110) empty -> .

    CORIZQ          shift and go to state 43
    COMA            reduce using rule 110 (empty -> .)
    PTOCOM          reduce using rule 110 (empty -> .)

    arr                            shift and go to state 49
    empty                          shift and go to state 44

state 43

    (9) arr -> CORIZQ . CTEI CORDER

    CTEI            shift and go to state 50


state 44

    (10) arr -> empty .

    CORIZQ          reduce using rule 10 (arr -> empty .)
    COMA            reduce using rule 10 (arr -> empty .)
    PTOCOM          reduce using rule 10 (arr -> empty .)


state 45

    (1) program -> PRO ID r_register_global PTOCOM opvars opfunciones MAIN PARIZQ PARDER bloque .

    $end            reduce using rule 1 (program -> PRO ID r_register_global PTOCOM opvars opfunciones MAIN PARIZQ PARDER bloque .)


state 46

    (33) bloque -> KEYIZQ . bloqueopcion KEYDER
    (34) bloqueopcion -> . estatuto bloqueopcion
    (35) bloqueopcion -> . empty
    (39) estatuto -> . asignacion
    (40) estatuto -> . decision
    (41) estatuto -> . escritura
    (42) estatuto -> . llamadafunc
    (43) estatuto -> . repeticion
    (44) estatuto -> . lectura
    (110) empty -> .
    (52) asignacion -> . ID r_verifica_variable_existe r_pila_operandos_push asignacionarr asignacionarr IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM
    (88) decision -> . IF PARIZQ expresion PARDER r_if_paso_1 THEN bloque ELSE r_if_paso_2 bloque r_if_paso_3
    (89) escritura -> . WRITE PARIZQ escrituraciclo otro PARDER PTOCOM
    (94) llamadafunc -> . ID PARIZQ parametros PARDER PTOCOM
    (101) repeticion -> . condicional
    (102) repeticion -> . nocondicional
    (95) lectura -> . READ PARIZQ iddim ciclodim PARDER PTOCOM
    (103) condicional -> . WHILE r_while_paso_1 PARIZQ expresion PARDER r_while_paso_2 DO bloque r_while_paso_3
    (104) nocondicional -> . FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2

    KEYDER          reduce using rule 110 (empty -> .)
    ID              shift and go to state 60
    IF              shift and go to state 61
    WRITE           shift and go to state 62
    READ            shift and go to state 65
    WHILE           shift and go to state 66
    FOR             shift and go to state 67

    bloqueopcion                   shift and go to state 51
    estatuto                       shift and go to state 52
    empty                          shift and go to state 53
    asignacion                     shift and go to state 54
    decision                       shift and go to state 55
    escritura                      shift and go to state 56
    llamadafunc                    shift and go to state 57
    repeticion                     shift and go to state 58
    lectura                        shift and go to state 59
    condicional                    shift and go to state 63
    nocondicional                  shift and go to state 64

state 47

    (24) funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name . PARIZQ opcionvarsimple PARDER opvars bloque

    PARIZQ          shift and go to state 68


state 48

    (29) funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ . opcionvarsimple PARDER opvars bloquefunc
    (25) opcionvarsimple -> . varsimple ciclovarsimple
    (26) opcionvarsimple -> . empty
    (21) varsimple -> . tipo ident
    (110) empty -> .
    (15) tipo -> . INT r_register_variable_type
    (16) tipo -> . FLT r_register_variable_type
    (17) tipo -> . CHAR r_register_variable_type

    PARDER          reduce using rule 110 (empty -> .)
    INT             shift and go to state 21
    FLT             shift and go to state 22
    CHAR            shift and go to state 23

    opcionvarsimple                shift and go to state 69
    varsimple                      shift and go to state 70
    empty                          shift and go to state 71
    tipo                           shift and go to state 72

state 49

    (6) vars -> VARTOKEN tipo ID r_register_variable_name arr arr . varciclo PTOCOM tipociclo
    (7) varciclo -> . COMA ID r_register_variable_name arr arr varciclo
    (8) varciclo -> . empty
    (110) empty -> .

    COMA            shift and go to state 74
    PTOCOM          reduce using rule 110 (empty -> .)

    varciclo                       shift and go to state 73
    empty                          shift and go to state 75

state 50

    (9) arr -> CORIZQ CTEI . CORDER

    CORDER          shift and go to state 76


state 51

    (33) bloque -> KEYIZQ bloqueopcion . KEYDER

    KEYDER          shift and go to state 77


state 52

    (34) bloqueopcion -> estatuto . bloqueopcion
    (34) bloqueopcion -> . estatuto bloqueopcion
    (35) bloqueopcion -> . empty
    (39) estatuto -> . asignacion
    (40) estatuto -> . decision
    (41) estatuto -> . escritura
    (42) estatuto -> . llamadafunc
    (43) estatuto -> . repeticion
    (44) estatuto -> . lectura
    (110) empty -> .
    (52) asignacion -> . ID r_verifica_variable_existe r_pila_operandos_push asignacionarr asignacionarr IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM
    (88) decision -> . IF PARIZQ expresion PARDER r_if_paso_1 THEN bloque ELSE r_if_paso_2 bloque r_if_paso_3
    (89) escritura -> . WRITE PARIZQ escrituraciclo otro PARDER PTOCOM
    (94) llamadafunc -> . ID PARIZQ parametros PARDER PTOCOM
    (101) repeticion -> . condicional
    (102) repeticion -> . nocondicional
    (95) lectura -> . READ PARIZQ iddim ciclodim PARDER PTOCOM
    (103) condicional -> . WHILE r_while_paso_1 PARIZQ expresion PARDER r_while_paso_2 DO bloque r_while_paso_3
    (104) nocondicional -> . FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2

    KEYDER          reduce using rule 110 (empty -> .)
    ID              shift and go to state 60
    IF              shift and go to state 61
    WRITE           shift and go to state 62
    READ            shift and go to state 65
    WHILE           shift and go to state 66
    FOR             shift and go to state 67

    estatuto                       shift and go to state 52
    bloqueopcion                   shift and go to state 78
    empty                          shift and go to state 53
    asignacion                     shift and go to state 54
    decision                       shift and go to state 55
    escritura                      shift and go to state 56
    llamadafunc                    shift and go to state 57
    repeticion                     shift and go to state 58
    lectura                        shift and go to state 59
    condicional                    shift and go to state 63
    nocondicional                  shift and go to state 64

state 53

    (35) bloqueopcion -> empty .

    KEYDER          reduce using rule 35 (bloqueopcion -> empty .)


state 54

    (39) estatuto -> asignacion .

    ID              reduce using rule 39 (estatuto -> asignacion .)
    IF              reduce using rule 39 (estatuto -> asignacion .)
    WRITE           reduce using rule 39 (estatuto -> asignacion .)
    READ            reduce using rule 39 (estatuto -> asignacion .)
    WHILE           reduce using rule 39 (estatuto -> asignacion .)
    FOR             reduce using rule 39 (estatuto -> asignacion .)
    KEYDER          reduce using rule 39 (estatuto -> asignacion .)


state 55

    (40) estatuto -> decision .

    ID              reduce using rule 40 (estatuto -> decision .)
    IF              reduce using rule 40 (estatuto -> decision .)
    WRITE           reduce using rule 40 (estatuto -> decision .)
    READ            reduce using rule 40 (estatuto -> decision .)
    WHILE           reduce using rule 40 (estatuto -> decision .)
    FOR             reduce using rule 40 (estatuto -> decision .)
    KEYDER          reduce using rule 40 (estatuto -> decision .)


state 56

    (41) estatuto -> escritura .

    ID              reduce using rule 41 (estatuto -> escritura .)
    IF              reduce using rule 41 (estatuto -> escritura .)
    WRITE           reduce using rule 41 (estatuto -> escritura .)
    READ            reduce using rule 41 (estatuto -> escritura .)
    WHILE           reduce using rule 41 (estatuto -> escritura .)
    FOR             reduce using rule 41 (estatuto -> escritura .)
    KEYDER          reduce using rule 41 (estatuto -> escritura .)


state 57

    (42) estatuto -> llamadafunc .

    ID              reduce using rule 42 (estatuto -> llamadafunc .)
    IF              reduce using rule 42 (estatuto -> llamadafunc .)
    WRITE           reduce using rule 42 (estatuto -> llamadafunc .)
    READ            reduce using rule 42 (estatuto -> llamadafunc .)
    WHILE           reduce using rule 42 (estatuto -> llamadafunc .)
    FOR             reduce using rule 42 (estatuto -> llamadafunc .)
    KEYDER          reduce using rule 42 (estatuto -> llamadafunc .)


state 58

    (43) estatuto -> repeticion .

    ID              reduce using rule 43 (estatuto -> repeticion .)
    IF              reduce using rule 43 (estatuto -> repeticion .)
    WRITE           reduce using rule 43 (estatuto -> repeticion .)
    READ            reduce using rule 43 (estatuto -> repeticion .)
    WHILE           reduce using rule 43 (estatuto -> repeticion .)
    FOR             reduce using rule 43 (estatuto -> repeticion .)
    KEYDER          reduce using rule 43 (estatuto -> repeticion .)


state 59

    (44) estatuto -> lectura .

    ID              reduce using rule 44 (estatuto -> lectura .)
    IF              reduce using rule 44 (estatuto -> lectura .)
    WRITE           reduce using rule 44 (estatuto -> lectura .)
    READ            reduce using rule 44 (estatuto -> lectura .)
    WHILE           reduce using rule 44 (estatuto -> lectura .)
    FOR             reduce using rule 44 (estatuto -> lectura .)
    KEYDER          reduce using rule 44 (estatuto -> lectura .)


state 60

    (52) asignacion -> ID . r_verifica_variable_existe r_pila_operandos_push asignacionarr asignacionarr IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM
    (94) llamadafunc -> ID . PARIZQ parametros PARDER PTOCOM
    (116) r_verifica_variable_existe -> .

    PARIZQ          shift and go to state 80
    CORIZQ          reduce using rule 116 (r_verifica_variable_existe -> .)
    IGU             reduce using rule 116 (r_verifica_variable_existe -> .)

    r_verifica_variable_existe     shift and go to state 79

state 61

    (88) decision -> IF . PARIZQ expresion PARDER r_if_paso_1 THEN bloque ELSE r_if_paso_2 bloque r_if_paso_3

    PARIZQ          shift and go to state 81


state 62

    (89) escritura -> WRITE . PARIZQ escrituraciclo otro PARDER PTOCOM

    PARIZQ          shift and go to state 82


state 63

    (101) repeticion -> condicional .

    ID              reduce using rule 101 (repeticion -> condicional .)
    IF              reduce using rule 101 (repeticion -> condicional .)
    WRITE           reduce using rule 101 (repeticion -> condicional .)
    READ            reduce using rule 101 (repeticion -> condicional .)
    WHILE           reduce using rule 101 (repeticion -> condicional .)
    FOR             reduce using rule 101 (repeticion -> condicional .)
    KEYDER          reduce using rule 101 (repeticion -> condicional .)


state 64

    (102) repeticion -> nocondicional .

    ID              reduce using rule 102 (repeticion -> nocondicional .)
    IF              reduce using rule 102 (repeticion -> nocondicional .)
    WRITE           reduce using rule 102 (repeticion -> nocondicional .)
    READ            reduce using rule 102 (repeticion -> nocondicional .)
    WHILE           reduce using rule 102 (repeticion -> nocondicional .)
    FOR             reduce using rule 102 (repeticion -> nocondicional .)
    KEYDER          reduce using rule 102 (repeticion -> nocondicional .)


state 65

    (95) lectura -> READ . PARIZQ iddim ciclodim PARDER PTOCOM

    PARIZQ          shift and go to state 83


state 66

    (103) condicional -> WHILE . r_while_paso_1 PARIZQ expresion PARDER r_while_paso_2 DO bloque r_while_paso_3
    (120) r_while_paso_1 -> .

    PARIZQ          reduce using rule 120 (r_while_paso_1 -> .)

    r_while_paso_1                 shift and go to state 84

state 67

    (104) nocondicional -> FOR . iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2
    (98) iddim -> . ID r_verifica_variable_existe r_pila_operandos_push arrexp arrexp

    ID              shift and go to state 86

    iddim                          shift and go to state 85

state 68

    (24) funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ . opcionvarsimple PARDER opvars bloque
    (25) opcionvarsimple -> . varsimple ciclovarsimple
    (26) opcionvarsimple -> . empty
    (21) varsimple -> . tipo ident
    (110) empty -> .
    (15) tipo -> . INT r_register_variable_type
    (16) tipo -> . FLT r_register_variable_type
    (17) tipo -> . CHAR r_register_variable_type

    PARDER          reduce using rule 110 (empty -> .)
    INT             shift and go to state 21
    FLT             shift and go to state 22
    CHAR            shift and go to state 23

    opcionvarsimple                shift and go to state 87
    varsimple                      shift and go to state 70
    empty                          shift and go to state 71
    tipo                           shift and go to state 72

state 69

    (29) funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple . PARDER opvars bloquefunc

    PARDER          shift and go to state 88


state 70

    (25) opcionvarsimple -> varsimple . ciclovarsimple
    (27) ciclovarsimple -> . COMA varsimple ciclovarsimple
    (28) ciclovarsimple -> . empty
    (110) empty -> .

    COMA            shift and go to state 90
    PARDER          reduce using rule 110 (empty -> .)

    ciclovarsimple                 shift and go to state 89
    empty                          shift and go to state 91

state 71

    (26) opcionvarsimple -> empty .

    PARDER          reduce using rule 26 (opcionvarsimple -> empty .)


state 72

    (21) varsimple -> tipo . ident
    (30) ident -> . ID r_register_variable_name arrini arrini

    ID              shift and go to state 93

    ident                          shift and go to state 92

state 73

    (6) vars -> VARTOKEN tipo ID r_register_variable_name arr arr varciclo . PTOCOM tipociclo

    PTOCOM          shift and go to state 94


state 74

    (7) varciclo -> COMA . ID r_register_variable_name arr arr varciclo

    ID              shift and go to state 95


state 75

    (8) varciclo -> empty .

    PTOCOM          reduce using rule 8 (varciclo -> empty .)


state 76

    (9) arr -> CORIZQ CTEI CORDER .

    CORIZQ          reduce using rule 9 (arr -> CORIZQ CTEI CORDER .)
    COMA            reduce using rule 9 (arr -> CORIZQ CTEI CORDER .)
    PTOCOM          reduce using rule 9 (arr -> CORIZQ CTEI CORDER .)


state 77

    (33) bloque -> KEYIZQ bloqueopcion KEYDER .

    $end            reduce using rule 33 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    VOID            reduce using rule 33 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    INT             reduce using rule 33 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    FLT             reduce using rule 33 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    CHAR            reduce using rule 33 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    MAIN            reduce using rule 33 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    ELSE            reduce using rule 33 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    ID              reduce using rule 33 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    IF              reduce using rule 33 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    WRITE           reduce using rule 33 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    READ            reduce using rule 33 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    WHILE           reduce using rule 33 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    FOR             reduce using rule 33 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    KEYDER          reduce using rule 33 (bloque -> KEYIZQ bloqueopcion KEYDER .)


state 78

    (34) bloqueopcion -> estatuto bloqueopcion .

    KEYDER          reduce using rule 34 (bloqueopcion -> estatuto bloqueopcion .)


state 79

    (52) asignacion -> ID r_verifica_variable_existe . r_pila_operandos_push asignacionarr asignacionarr IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM
    (126) r_pila_operandos_push -> .

    CORIZQ          reduce using rule 126 (r_pila_operandos_push -> .)
    IGU             reduce using rule 126 (r_pila_operandos_push -> .)

    r_pila_operandos_push          shift and go to state 96

state 80

    (94) llamadafunc -> ID PARIZQ . parametros PARDER PTOCOM
    (84) parametros -> . expresion cicloparametros
    (85) parametros -> . empty
    (55) expresion -> . exp r_pop_comp expresionsig
    (110) empty -> .
    (65) exp -> . termino r_pop_mas expciclo
    (69) termino -> . factor r_pop_mult factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID r_verifica_variable_existe r_pila_operandos_push opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty

  ! shift/reduce conflict for ID resolved as shift
    PARDER          reduce using rule 110 (empty -> .)
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)
    PARIZQ          shift and go to state 98
    ID              shift and go to state 97
    MAS             shift and go to state 106
    MENOS           shift and go to state 107

  ! ID              [ reduce using rule 110 (empty -> .) ]

    parametros                     shift and go to state 99
    expresion                      shift and go to state 100
    empty                          shift and go to state 101
    exp                            shift and go to state 102
    termino                        shift and go to state 103
    factor                         shift and go to state 104
    masomenos                      shift and go to state 105

state 81

    (88) decision -> IF PARIZQ . expresion PARDER r_if_paso_1 THEN bloque ELSE r_if_paso_2 bloque r_if_paso_3
    (55) expresion -> . exp r_pop_comp expresionsig
    (65) exp -> . termino r_pop_mas expciclo
    (69) termino -> . factor r_pop_mult factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID r_verifica_variable_existe r_pila_operandos_push opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 98
    ID              shift and go to state 97
    MAS             shift and go to state 106
    MENOS           shift and go to state 107
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    expresion                      shift and go to state 108
    exp                            shift and go to state 102
    termino                        shift and go to state 103
    factor                         shift and go to state 104
    masomenos                      shift and go to state 105
    empty                          shift and go to state 109

state 82

    (89) escritura -> WRITE PARIZQ . escrituraciclo otro PARDER PTOCOM
    (90) escrituraciclo -> . CTE_STRING
    (91) escrituraciclo -> . expresion
    (55) expresion -> . exp r_pop_comp expresionsig
    (65) exp -> . termino r_pop_mas expciclo
    (69) termino -> . factor r_pop_mult factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID r_verifica_variable_existe r_pila_operandos_push opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    CTE_STRING      shift and go to state 111
    PARIZQ          shift and go to state 98
    ID              shift and go to state 97
    MAS             shift and go to state 106
    MENOS           shift and go to state 107
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    escrituraciclo                 shift and go to state 110
    expresion                      shift and go to state 112
    exp                            shift and go to state 102
    termino                        shift and go to state 103
    factor                         shift and go to state 104
    masomenos                      shift and go to state 105
    empty                          shift and go to state 109

state 83

    (95) lectura -> READ PARIZQ . iddim ciclodim PARDER PTOCOM
    (98) iddim -> . ID r_verifica_variable_existe r_pila_operandos_push arrexp arrexp

    ID              shift and go to state 86

    iddim                          shift and go to state 113

state 84

    (103) condicional -> WHILE r_while_paso_1 . PARIZQ expresion PARDER r_while_paso_2 DO bloque r_while_paso_3

    PARIZQ          shift and go to state 114


state 85

    (104) nocondicional -> FOR iddim . IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2

    IGU             shift and go to state 115


state 86

    (98) iddim -> ID . r_verifica_variable_existe r_pila_operandos_push arrexp arrexp
    (116) r_verifica_variable_existe -> .

    CORIZQ          reduce using rule 116 (r_verifica_variable_existe -> .)
    IGU             reduce using rule 116 (r_verifica_variable_existe -> .)
    COMA            reduce using rule 116 (r_verifica_variable_existe -> .)
    PARDER          reduce using rule 116 (r_verifica_variable_existe -> .)
    MULT            reduce using rule 116 (r_verifica_variable_existe -> .)
    DIV             reduce using rule 116 (r_verifica_variable_existe -> .)
    MAS             reduce using rule 116 (r_verifica_variable_existe -> .)
    MENOS           reduce using rule 116 (r_verifica_variable_existe -> .)
    MAY             reduce using rule 116 (r_verifica_variable_existe -> .)
    MEN             reduce using rule 116 (r_verifica_variable_existe -> .)
    DIF             reduce using rule 116 (r_verifica_variable_existe -> .)
    IGUIGU          reduce using rule 116 (r_verifica_variable_existe -> .)
    AND             reduce using rule 116 (r_verifica_variable_existe -> .)
    OR              reduce using rule 116 (r_verifica_variable_existe -> .)
    CORDER          reduce using rule 116 (r_verifica_variable_existe -> .)
    TO              reduce using rule 116 (r_verifica_variable_existe -> .)
    PTOCOM          reduce using rule 116 (r_verifica_variable_existe -> .)
    DO              reduce using rule 116 (r_verifica_variable_existe -> .)

    r_verifica_variable_existe     shift and go to state 116

state 87

    (24) funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple . PARDER opvars bloque

    PARDER          shift and go to state 117


state 88

    (29) funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER . opvars bloquefunc
    (2) opvars -> . vars
    (3) opvars -> . empty
    (6) vars -> . VARTOKEN tipo ID r_register_variable_name arr arr varciclo PTOCOM tipociclo
    (110) empty -> .

    VARTOKEN        shift and go to state 9
    KEYIZQ          reduce using rule 110 (empty -> .)

    opvars                         shift and go to state 118
    vars                           shift and go to state 7
    empty                          shift and go to state 8

state 89

    (25) opcionvarsimple -> varsimple ciclovarsimple .

    PARDER          reduce using rule 25 (opcionvarsimple -> varsimple ciclovarsimple .)


state 90

    (27) ciclovarsimple -> COMA . varsimple ciclovarsimple
    (21) varsimple -> . tipo ident
    (15) tipo -> . INT r_register_variable_type
    (16) tipo -> . FLT r_register_variable_type
    (17) tipo -> . CHAR r_register_variable_type

    INT             shift and go to state 21
    FLT             shift and go to state 22
    CHAR            shift and go to state 23

    varsimple                      shift and go to state 119
    tipo                           shift and go to state 72

state 91

    (28) ciclovarsimple -> empty .

    PARDER          reduce using rule 28 (ciclovarsimple -> empty .)


state 92

    (21) varsimple -> tipo ident .

    COMA            reduce using rule 21 (varsimple -> tipo ident .)
    PARDER          reduce using rule 21 (varsimple -> tipo ident .)


state 93

    (30) ident -> ID . r_register_variable_name arrini arrini
    (115) r_register_variable_name -> .

    CORIZQ          reduce using rule 115 (r_register_variable_name -> .)
    COMA            reduce using rule 115 (r_register_variable_name -> .)
    PARDER          reduce using rule 115 (r_register_variable_name -> .)

    r_register_variable_name       shift and go to state 120

state 94

    (6) vars -> VARTOKEN tipo ID r_register_variable_name arr arr varciclo PTOCOM . tipociclo
    (11) tipociclo -> . tipo opciontipo
    (12) tipociclo -> . empty
    (15) tipo -> . INT r_register_variable_type
    (16) tipo -> . FLT r_register_variable_type
    (17) tipo -> . CHAR r_register_variable_type
    (110) empty -> .

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    INT             shift and go to state 21
    FLT             shift and go to state 22
    CHAR            shift and go to state 23
    VOID            reduce using rule 110 (empty -> .)
    MAIN            reduce using rule 110 (empty -> .)
    KEYIZQ          reduce using rule 110 (empty -> .)

  ! INT             [ reduce using rule 110 (empty -> .) ]
  ! FLT             [ reduce using rule 110 (empty -> .) ]
  ! CHAR            [ reduce using rule 110 (empty -> .) ]

    tipo                           shift and go to state 121
    tipociclo                      shift and go to state 122
    empty                          shift and go to state 123

state 95

    (7) varciclo -> COMA ID . r_register_variable_name arr arr varciclo
    (115) r_register_variable_name -> .

    CORIZQ          reduce using rule 115 (r_register_variable_name -> .)
    COMA            reduce using rule 115 (r_register_variable_name -> .)
    PTOCOM          reduce using rule 115 (r_register_variable_name -> .)

    r_register_variable_name       shift and go to state 124

state 96

    (52) asignacion -> ID r_verifica_variable_existe r_pila_operandos_push . asignacionarr asignacionarr IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM
    (53) asignacionarr -> . CORIZQ expresion CORDER
    (54) asignacionarr -> . empty
    (110) empty -> .

  ! shift/reduce conflict for CORIZQ resolved as shift
    CORIZQ          shift and go to state 126
    IGU             reduce using rule 110 (empty -> .)

  ! CORIZQ          [ reduce using rule 110 (empty -> .) ]

    asignacionarr                  shift and go to state 125
    empty                          shift and go to state 127

state 97

    (75) factor -> ID . r_verifica_variable_existe r_pila_operandos_push opcionid
    (116) r_verifica_variable_existe -> .

    PARIZQ          reduce using rule 116 (r_verifica_variable_existe -> .)
    CORIZQ          reduce using rule 116 (r_verifica_variable_existe -> .)
    MULT            reduce using rule 116 (r_verifica_variable_existe -> .)
    DIV             reduce using rule 116 (r_verifica_variable_existe -> .)
    MAS             reduce using rule 116 (r_verifica_variable_existe -> .)
    MENOS           reduce using rule 116 (r_verifica_variable_existe -> .)
    MAY             reduce using rule 116 (r_verifica_variable_existe -> .)
    MEN             reduce using rule 116 (r_verifica_variable_existe -> .)
    DIF             reduce using rule 116 (r_verifica_variable_existe -> .)
    IGUIGU          reduce using rule 116 (r_verifica_variable_existe -> .)
    AND             reduce using rule 116 (r_verifica_variable_existe -> .)
    OR              reduce using rule 116 (r_verifica_variable_existe -> .)
    COMA            reduce using rule 116 (r_verifica_variable_existe -> .)
    PARDER          reduce using rule 116 (r_verifica_variable_existe -> .)
    CORDER          reduce using rule 116 (r_verifica_variable_existe -> .)
    TO              reduce using rule 116 (r_verifica_variable_existe -> .)
    PTOCOM          reduce using rule 116 (r_verifica_variable_existe -> .)
    DO              reduce using rule 116 (r_verifica_variable_existe -> .)

    r_verifica_variable_existe     shift and go to state 128

state 98

    (73) factor -> PARIZQ . expresion PARDER
    (55) expresion -> . exp r_pop_comp expresionsig
    (65) exp -> . termino r_pop_mas expciclo
    (69) termino -> . factor r_pop_mult factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID r_verifica_variable_existe r_pila_operandos_push opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 98
    ID              shift and go to state 97
    MAS             shift and go to state 106
    MENOS           shift and go to state 107
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    expresion                      shift and go to state 129
    exp                            shift and go to state 102
    termino                        shift and go to state 103
    factor                         shift and go to state 104
    masomenos                      shift and go to state 105
    empty                          shift and go to state 109

state 99

    (94) llamadafunc -> ID PARIZQ parametros . PARDER PTOCOM

    PARDER          shift and go to state 130


state 100

    (84) parametros -> expresion . cicloparametros
    (86) cicloparametros -> . COMA expresion cicloparametros
    (87) cicloparametros -> . empty
    (110) empty -> .

    COMA            shift and go to state 132
    PARDER          reduce using rule 110 (empty -> .)

    cicloparametros                shift and go to state 131
    empty                          shift and go to state 133

state 101

    (85) parametros -> empty .
    (78) masomenos -> empty .

    PARDER          reduce using rule 85 (parametros -> empty .)
    CTEI            reduce using rule 78 (masomenos -> empty .)
    CTEF            reduce using rule 78 (masomenos -> empty .)
    ID              reduce using rule 78 (masomenos -> empty .)


state 102

    (55) expresion -> exp . r_pop_comp expresionsig
    (131) r_pop_comp -> .

    MAY             reduce using rule 131 (r_pop_comp -> .)
    MEN             reduce using rule 131 (r_pop_comp -> .)
    DIF             reduce using rule 131 (r_pop_comp -> .)
    IGUIGU          reduce using rule 131 (r_pop_comp -> .)
    AND             reduce using rule 131 (r_pop_comp -> .)
    OR              reduce using rule 131 (r_pop_comp -> .)
    COMA            reduce using rule 131 (r_pop_comp -> .)
    PARDER          reduce using rule 131 (r_pop_comp -> .)
    CORDER          reduce using rule 131 (r_pop_comp -> .)
    TO              reduce using rule 131 (r_pop_comp -> .)
    PTOCOM          reduce using rule 131 (r_pop_comp -> .)
    DO              reduce using rule 131 (r_pop_comp -> .)

    r_pop_comp                     shift and go to state 134

state 103

    (65) exp -> termino . r_pop_mas expciclo
    (130) r_pop_mas -> .

    MAS             reduce using rule 130 (r_pop_mas -> .)
    MENOS           reduce using rule 130 (r_pop_mas -> .)
    MAY             reduce using rule 130 (r_pop_mas -> .)
    MEN             reduce using rule 130 (r_pop_mas -> .)
    DIF             reduce using rule 130 (r_pop_mas -> .)
    IGUIGU          reduce using rule 130 (r_pop_mas -> .)
    AND             reduce using rule 130 (r_pop_mas -> .)
    OR              reduce using rule 130 (r_pop_mas -> .)
    COMA            reduce using rule 130 (r_pop_mas -> .)
    PARDER          reduce using rule 130 (r_pop_mas -> .)
    CORDER          reduce using rule 130 (r_pop_mas -> .)
    TO              reduce using rule 130 (r_pop_mas -> .)
    PTOCOM          reduce using rule 130 (r_pop_mas -> .)
    DO              reduce using rule 130 (r_pop_mas -> .)

    r_pop_mas                      shift and go to state 135

state 104

    (69) termino -> factor . r_pop_mult factorciclo
    (129) r_pop_mult -> .

    MULT            reduce using rule 129 (r_pop_mult -> .)
    DIV             reduce using rule 129 (r_pop_mult -> .)
    MAS             reduce using rule 129 (r_pop_mult -> .)
    MENOS           reduce using rule 129 (r_pop_mult -> .)
    MAY             reduce using rule 129 (r_pop_mult -> .)
    MEN             reduce using rule 129 (r_pop_mult -> .)
    DIF             reduce using rule 129 (r_pop_mult -> .)
    IGUIGU          reduce using rule 129 (r_pop_mult -> .)
    AND             reduce using rule 129 (r_pop_mult -> .)
    OR              reduce using rule 129 (r_pop_mult -> .)
    COMA            reduce using rule 129 (r_pop_mult -> .)
    PARDER          reduce using rule 129 (r_pop_mult -> .)
    CORDER          reduce using rule 129 (r_pop_mult -> .)
    TO              reduce using rule 129 (r_pop_mult -> .)
    PTOCOM          reduce using rule 129 (r_pop_mult -> .)
    DO              reduce using rule 129 (r_pop_mult -> .)

    r_pop_mult                     shift and go to state 136

state 105

    (74) factor -> masomenos . varcte
    (81) varcte -> . iddim
    (82) varcte -> . CTEI r_pila_operandos_push_cte_int
    (83) varcte -> . CTEF r_pila_operandos_push_cte_flt
    (98) iddim -> . ID r_verifica_variable_existe r_pila_operandos_push arrexp arrexp

    CTEI            shift and go to state 139
    CTEF            shift and go to state 140
    ID              shift and go to state 86

    varcte                         shift and go to state 137
    iddim                          shift and go to state 138

state 106

    (76) masomenos -> MAS .

    CTEI            reduce using rule 76 (masomenos -> MAS .)
    CTEF            reduce using rule 76 (masomenos -> MAS .)
    ID              reduce using rule 76 (masomenos -> MAS .)


state 107

    (77) masomenos -> MENOS .

    CTEI            reduce using rule 77 (masomenos -> MENOS .)
    CTEF            reduce using rule 77 (masomenos -> MENOS .)
    ID              reduce using rule 77 (masomenos -> MENOS .)


state 108

    (88) decision -> IF PARIZQ expresion . PARDER r_if_paso_1 THEN bloque ELSE r_if_paso_2 bloque r_if_paso_3

    PARDER          shift and go to state 141


state 109

    (78) masomenos -> empty .

    CTEI            reduce using rule 78 (masomenos -> empty .)
    CTEF            reduce using rule 78 (masomenos -> empty .)
    ID              reduce using rule 78 (masomenos -> empty .)


state 110

    (89) escritura -> WRITE PARIZQ escrituraciclo . otro PARDER PTOCOM
    (92) otro -> . COMA escrituraciclo otro
    (93) otro -> . empty
    (110) empty -> .

    COMA            shift and go to state 143
    PARDER          reduce using rule 110 (empty -> .)

    otro                           shift and go to state 142
    empty                          shift and go to state 144

state 111

    (90) escrituraciclo -> CTE_STRING .

    COMA            reduce using rule 90 (escrituraciclo -> CTE_STRING .)
    PARDER          reduce using rule 90 (escrituraciclo -> CTE_STRING .)


state 112

    (91) escrituraciclo -> expresion .

    COMA            reduce using rule 91 (escrituraciclo -> expresion .)
    PARDER          reduce using rule 91 (escrituraciclo -> expresion .)


state 113

    (95) lectura -> READ PARIZQ iddim . ciclodim PARDER PTOCOM
    (96) ciclodim -> . COMA iddim ciclodim
    (97) ciclodim -> . empty
    (110) empty -> .

    COMA            shift and go to state 146
    PARDER          reduce using rule 110 (empty -> .)

    ciclodim                       shift and go to state 145
    empty                          shift and go to state 147

state 114

    (103) condicional -> WHILE r_while_paso_1 PARIZQ . expresion PARDER r_while_paso_2 DO bloque r_while_paso_3
    (55) expresion -> . exp r_pop_comp expresionsig
    (65) exp -> . termino r_pop_mas expciclo
    (69) termino -> . factor r_pop_mult factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID r_verifica_variable_existe r_pila_operandos_push opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 98
    ID              shift and go to state 97
    MAS             shift and go to state 106
    MENOS           shift and go to state 107
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    expresion                      shift and go to state 148
    exp                            shift and go to state 102
    termino                        shift and go to state 103
    factor                         shift and go to state 104
    masomenos                      shift and go to state 105
    empty                          shift and go to state 109

state 115

    (104) nocondicional -> FOR iddim IGU . r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2
    (143) r_pila_operadores_push_igu -> .

    PARIZQ          reduce using rule 143 (r_pila_operadores_push_igu -> .)
    ID              reduce using rule 143 (r_pila_operadores_push_igu -> .)
    MAS             reduce using rule 143 (r_pila_operadores_push_igu -> .)
    MENOS           reduce using rule 143 (r_pila_operadores_push_igu -> .)
    CTEI            reduce using rule 143 (r_pila_operadores_push_igu -> .)
    CTEF            reduce using rule 143 (r_pila_operadores_push_igu -> .)

    r_pila_operadores_push_igu     shift and go to state 149

state 116

    (98) iddim -> ID r_verifica_variable_existe . r_pila_operandos_push arrexp arrexp
    (126) r_pila_operandos_push -> .

    CORIZQ          reduce using rule 126 (r_pila_operandos_push -> .)
    IGU             reduce using rule 126 (r_pila_operandos_push -> .)
    COMA            reduce using rule 126 (r_pila_operandos_push -> .)
    PARDER          reduce using rule 126 (r_pila_operandos_push -> .)
    MULT            reduce using rule 126 (r_pila_operandos_push -> .)
    DIV             reduce using rule 126 (r_pila_operandos_push -> .)
    MAS             reduce using rule 126 (r_pila_operandos_push -> .)
    MENOS           reduce using rule 126 (r_pila_operandos_push -> .)
    MAY             reduce using rule 126 (r_pila_operandos_push -> .)
    MEN             reduce using rule 126 (r_pila_operandos_push -> .)
    DIF             reduce using rule 126 (r_pila_operandos_push -> .)
    IGUIGU          reduce using rule 126 (r_pila_operandos_push -> .)
    AND             reduce using rule 126 (r_pila_operandos_push -> .)
    OR              reduce using rule 126 (r_pila_operandos_push -> .)
    CORDER          reduce using rule 126 (r_pila_operandos_push -> .)
    TO              reduce using rule 126 (r_pila_operandos_push -> .)
    PTOCOM          reduce using rule 126 (r_pila_operandos_push -> .)
    DO              reduce using rule 126 (r_pila_operandos_push -> .)

    r_pila_operandos_push          shift and go to state 150

state 117

    (24) funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER . opvars bloque
    (2) opvars -> . vars
    (3) opvars -> . empty
    (6) vars -> . VARTOKEN tipo ID r_register_variable_name arr arr varciclo PTOCOM tipociclo
    (110) empty -> .

    VARTOKEN        shift and go to state 9
    KEYIZQ          reduce using rule 110 (empty -> .)

    opvars                         shift and go to state 151
    vars                           shift and go to state 7
    empty                          shift and go to state 8

state 118

    (29) funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars . bloquefunc
    (36) bloquefunc -> . KEYIZQ bloqueopcionfunc KEYDER

    KEYIZQ          shift and go to state 153

    bloquefunc                     shift and go to state 152

state 119

    (27) ciclovarsimple -> COMA varsimple . ciclovarsimple
    (27) ciclovarsimple -> . COMA varsimple ciclovarsimple
    (28) ciclovarsimple -> . empty
    (110) empty -> .

    COMA            shift and go to state 90
    PARDER          reduce using rule 110 (empty -> .)

    ciclovarsimple                 shift and go to state 154
    empty                          shift and go to state 91

state 120

    (30) ident -> ID r_register_variable_name . arrini arrini
    (31) arrini -> . CORIZQ CORDER
    (32) arrini -> . empty
    (110) empty -> .

  ! shift/reduce conflict for CORIZQ resolved as shift
    CORIZQ          shift and go to state 156
    COMA            reduce using rule 110 (empty -> .)
    PARDER          reduce using rule 110 (empty -> .)

  ! CORIZQ          [ reduce using rule 110 (empty -> .) ]

    arrini                         shift and go to state 155
    empty                          shift and go to state 157

state 121

    (11) tipociclo -> tipo . opciontipo
    (13) opciontipo -> . ID r_register_variable_name arr arr varciclo PTOCOM tipociclo
    (14) opciontipo -> . MODULE ID PARIZQ opcionvarsimple PARDER opvars bloquefunc

    ID              shift and go to state 159
    MODULE          shift and go to state 160

    opciontipo                     shift and go to state 158

state 122

    (6) vars -> VARTOKEN tipo ID r_register_variable_name arr arr varciclo PTOCOM tipociclo .

    VOID            reduce using rule 6 (vars -> VARTOKEN tipo ID r_register_variable_name arr arr varciclo PTOCOM tipociclo .)
    INT             reduce using rule 6 (vars -> VARTOKEN tipo ID r_register_variable_name arr arr varciclo PTOCOM tipociclo .)
    FLT             reduce using rule 6 (vars -> VARTOKEN tipo ID r_register_variable_name arr arr varciclo PTOCOM tipociclo .)
    CHAR            reduce using rule 6 (vars -> VARTOKEN tipo ID r_register_variable_name arr arr varciclo PTOCOM tipociclo .)
    MAIN            reduce using rule 6 (vars -> VARTOKEN tipo ID r_register_variable_name arr arr varciclo PTOCOM tipociclo .)
    KEYIZQ          reduce using rule 6 (vars -> VARTOKEN tipo ID r_register_variable_name arr arr varciclo PTOCOM tipociclo .)


state 123

    (12) tipociclo -> empty .

    VOID            reduce using rule 12 (tipociclo -> empty .)
    INT             reduce using rule 12 (tipociclo -> empty .)
    FLT             reduce using rule 12 (tipociclo -> empty .)
    CHAR            reduce using rule 12 (tipociclo -> empty .)
    MAIN            reduce using rule 12 (tipociclo -> empty .)
    KEYIZQ          reduce using rule 12 (tipociclo -> empty .)


state 124

    (7) varciclo -> COMA ID r_register_variable_name . arr arr varciclo
    (9) arr -> . CORIZQ CTEI CORDER
    (10) arr -> . empty
    (110) empty -> .

  ! shift/reduce conflict for CORIZQ resolved as shift
    CORIZQ          shift and go to state 43
    COMA            reduce using rule 110 (empty -> .)
    PTOCOM          reduce using rule 110 (empty -> .)

  ! CORIZQ          [ reduce using rule 110 (empty -> .) ]

    arr                            shift and go to state 161
    empty                          shift and go to state 44

state 125

    (52) asignacion -> ID r_verifica_variable_existe r_pila_operandos_push asignacionarr . asignacionarr IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM
    (53) asignacionarr -> . CORIZQ expresion CORDER
    (54) asignacionarr -> . empty
    (110) empty -> .

    CORIZQ          shift and go to state 126
    IGU             reduce using rule 110 (empty -> .)

    asignacionarr                  shift and go to state 162
    empty                          shift and go to state 127

state 126

    (53) asignacionarr -> CORIZQ . expresion CORDER
    (55) expresion -> . exp r_pop_comp expresionsig
    (65) exp -> . termino r_pop_mas expciclo
    (69) termino -> . factor r_pop_mult factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID r_verifica_variable_existe r_pila_operandos_push opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 98
    ID              shift and go to state 97
    MAS             shift and go to state 106
    MENOS           shift and go to state 107
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    expresion                      shift and go to state 163
    exp                            shift and go to state 102
    termino                        shift and go to state 103
    factor                         shift and go to state 104
    masomenos                      shift and go to state 105
    empty                          shift and go to state 109

state 127

    (54) asignacionarr -> empty .

    CORIZQ          reduce using rule 54 (asignacionarr -> empty .)
    IGU             reduce using rule 54 (asignacionarr -> empty .)


state 128

    (75) factor -> ID r_verifica_variable_existe . r_pila_operandos_push opcionid
    (126) r_pila_operandos_push -> .

    PARIZQ          reduce using rule 126 (r_pila_operandos_push -> .)
    CORIZQ          reduce using rule 126 (r_pila_operandos_push -> .)
    MULT            reduce using rule 126 (r_pila_operandos_push -> .)
    DIV             reduce using rule 126 (r_pila_operandos_push -> .)
    MAS             reduce using rule 126 (r_pila_operandos_push -> .)
    MENOS           reduce using rule 126 (r_pila_operandos_push -> .)
    MAY             reduce using rule 126 (r_pila_operandos_push -> .)
    MEN             reduce using rule 126 (r_pila_operandos_push -> .)
    DIF             reduce using rule 126 (r_pila_operandos_push -> .)
    IGUIGU          reduce using rule 126 (r_pila_operandos_push -> .)
    AND             reduce using rule 126 (r_pila_operandos_push -> .)
    OR              reduce using rule 126 (r_pila_operandos_push -> .)
    COMA            reduce using rule 126 (r_pila_operandos_push -> .)
    PARDER          reduce using rule 126 (r_pila_operandos_push -> .)
    CORDER          reduce using rule 126 (r_pila_operandos_push -> .)
    TO              reduce using rule 126 (r_pila_operandos_push -> .)
    PTOCOM          reduce using rule 126 (r_pila_operandos_push -> .)
    DO              reduce using rule 126 (r_pila_operandos_push -> .)

    r_pila_operandos_push          shift and go to state 164

state 129

    (73) factor -> PARIZQ expresion . PARDER

    PARDER          shift and go to state 165


state 130

    (94) llamadafunc -> ID PARIZQ parametros PARDER . PTOCOM

    PTOCOM          shift and go to state 166


state 131

    (84) parametros -> expresion cicloparametros .

    PARDER          reduce using rule 84 (parametros -> expresion cicloparametros .)


state 132

    (86) cicloparametros -> COMA . expresion cicloparametros
    (55) expresion -> . exp r_pop_comp expresionsig
    (65) exp -> . termino r_pop_mas expciclo
    (69) termino -> . factor r_pop_mult factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID r_verifica_variable_existe r_pila_operandos_push opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 98
    ID              shift and go to state 97
    MAS             shift and go to state 106
    MENOS           shift and go to state 107
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    expresion                      shift and go to state 167
    exp                            shift and go to state 102
    termino                        shift and go to state 103
    factor                         shift and go to state 104
    masomenos                      shift and go to state 105
    empty                          shift and go to state 109

state 133

    (87) cicloparametros -> empty .

    PARDER          reduce using rule 87 (cicloparametros -> empty .)


state 134

    (55) expresion -> exp r_pop_comp . expresionsig
    (56) expresionsig -> . MAY r_pila_operadores_push_may expresionsigequal expresion
    (57) expresionsig -> . MEN r_pila_operadores_push_men expresionsigequal expresion
    (58) expresionsig -> . DIF r_pila_operadores_push_dif expresion
    (59) expresionsig -> . IGUIGU r_pila_operadores_push_iguigu expresion
    (60) expresionsig -> . AND r_pila_operadores_push_and expresion
    (61) expresionsig -> . OR r_pila_operadores_push_or expresion
    (62) expresionsig -> . empty
    (110) empty -> .

    MAY             shift and go to state 169
    MEN             shift and go to state 170
    DIF             shift and go to state 171
    IGUIGU          shift and go to state 172
    AND             shift and go to state 173
    OR              shift and go to state 174
    COMA            reduce using rule 110 (empty -> .)
    PARDER          reduce using rule 110 (empty -> .)
    CORDER          reduce using rule 110 (empty -> .)
    TO              reduce using rule 110 (empty -> .)
    PTOCOM          reduce using rule 110 (empty -> .)
    DO              reduce using rule 110 (empty -> .)

    expresionsig                   shift and go to state 168
    empty                          shift and go to state 175

state 135

    (65) exp -> termino r_pop_mas . expciclo
    (66) expciclo -> . MAS r_pila_operadores_push_mas exp
    (67) expciclo -> . MENOS r_pila_operadores_push_menos exp
    (68) expciclo -> . empty
    (110) empty -> .

    MAS             shift and go to state 177
    MENOS           shift and go to state 178
    MAY             reduce using rule 110 (empty -> .)
    MEN             reduce using rule 110 (empty -> .)
    DIF             reduce using rule 110 (empty -> .)
    IGUIGU          reduce using rule 110 (empty -> .)
    AND             reduce using rule 110 (empty -> .)
    OR              reduce using rule 110 (empty -> .)
    COMA            reduce using rule 110 (empty -> .)
    PARDER          reduce using rule 110 (empty -> .)
    CORDER          reduce using rule 110 (empty -> .)
    TO              reduce using rule 110 (empty -> .)
    PTOCOM          reduce using rule 110 (empty -> .)
    DO              reduce using rule 110 (empty -> .)

    expciclo                       shift and go to state 176
    empty                          shift and go to state 179

state 136

    (69) termino -> factor r_pop_mult . factorciclo
    (70) factorciclo -> . MULT r_pila_operadores_push_mult termino
    (71) factorciclo -> . DIV r_pila_operadores_push_div termino
    (72) factorciclo -> . empty
    (110) empty -> .

    MULT            shift and go to state 181
    DIV             shift and go to state 182
    MAS             reduce using rule 110 (empty -> .)
    MENOS           reduce using rule 110 (empty -> .)
    MAY             reduce using rule 110 (empty -> .)
    MEN             reduce using rule 110 (empty -> .)
    DIF             reduce using rule 110 (empty -> .)
    IGUIGU          reduce using rule 110 (empty -> .)
    AND             reduce using rule 110 (empty -> .)
    OR              reduce using rule 110 (empty -> .)
    COMA            reduce using rule 110 (empty -> .)
    PARDER          reduce using rule 110 (empty -> .)
    CORDER          reduce using rule 110 (empty -> .)
    TO              reduce using rule 110 (empty -> .)
    PTOCOM          reduce using rule 110 (empty -> .)
    DO              reduce using rule 110 (empty -> .)

    factorciclo                    shift and go to state 180
    empty                          shift and go to state 183

state 137

    (74) factor -> masomenos varcte .

    MULT            reduce using rule 74 (factor -> masomenos varcte .)
    DIV             reduce using rule 74 (factor -> masomenos varcte .)
    MAS             reduce using rule 74 (factor -> masomenos varcte .)
    MENOS           reduce using rule 74 (factor -> masomenos varcte .)
    MAY             reduce using rule 74 (factor -> masomenos varcte .)
    MEN             reduce using rule 74 (factor -> masomenos varcte .)
    DIF             reduce using rule 74 (factor -> masomenos varcte .)
    IGUIGU          reduce using rule 74 (factor -> masomenos varcte .)
    AND             reduce using rule 74 (factor -> masomenos varcte .)
    OR              reduce using rule 74 (factor -> masomenos varcte .)
    COMA            reduce using rule 74 (factor -> masomenos varcte .)
    PARDER          reduce using rule 74 (factor -> masomenos varcte .)
    CORDER          reduce using rule 74 (factor -> masomenos varcte .)
    TO              reduce using rule 74 (factor -> masomenos varcte .)
    PTOCOM          reduce using rule 74 (factor -> masomenos varcte .)
    DO              reduce using rule 74 (factor -> masomenos varcte .)


state 138

    (81) varcte -> iddim .

    MULT            reduce using rule 81 (varcte -> iddim .)
    DIV             reduce using rule 81 (varcte -> iddim .)
    MAS             reduce using rule 81 (varcte -> iddim .)
    MENOS           reduce using rule 81 (varcte -> iddim .)
    MAY             reduce using rule 81 (varcte -> iddim .)
    MEN             reduce using rule 81 (varcte -> iddim .)
    DIF             reduce using rule 81 (varcte -> iddim .)
    IGUIGU          reduce using rule 81 (varcte -> iddim .)
    AND             reduce using rule 81 (varcte -> iddim .)
    OR              reduce using rule 81 (varcte -> iddim .)
    COMA            reduce using rule 81 (varcte -> iddim .)
    PARDER          reduce using rule 81 (varcte -> iddim .)
    CORDER          reduce using rule 81 (varcte -> iddim .)
    TO              reduce using rule 81 (varcte -> iddim .)
    PTOCOM          reduce using rule 81 (varcte -> iddim .)
    DO              reduce using rule 81 (varcte -> iddim .)


state 139

    (82) varcte -> CTEI . r_pila_operandos_push_cte_int
    (127) r_pila_operandos_push_cte_int -> .

    MULT            reduce using rule 127 (r_pila_operandos_push_cte_int -> .)
    DIV             reduce using rule 127 (r_pila_operandos_push_cte_int -> .)
    MAS             reduce using rule 127 (r_pila_operandos_push_cte_int -> .)
    MENOS           reduce using rule 127 (r_pila_operandos_push_cte_int -> .)
    MAY             reduce using rule 127 (r_pila_operandos_push_cte_int -> .)
    MEN             reduce using rule 127 (r_pila_operandos_push_cte_int -> .)
    DIF             reduce using rule 127 (r_pila_operandos_push_cte_int -> .)
    IGUIGU          reduce using rule 127 (r_pila_operandos_push_cte_int -> .)
    AND             reduce using rule 127 (r_pila_operandos_push_cte_int -> .)
    OR              reduce using rule 127 (r_pila_operandos_push_cte_int -> .)
    COMA            reduce using rule 127 (r_pila_operandos_push_cte_int -> .)
    PARDER          reduce using rule 127 (r_pila_operandos_push_cte_int -> .)
    CORDER          reduce using rule 127 (r_pila_operandos_push_cte_int -> .)
    TO              reduce using rule 127 (r_pila_operandos_push_cte_int -> .)
    PTOCOM          reduce using rule 127 (r_pila_operandos_push_cte_int -> .)
    DO              reduce using rule 127 (r_pila_operandos_push_cte_int -> .)

    r_pila_operandos_push_cte_int  shift and go to state 184

state 140

    (83) varcte -> CTEF . r_pila_operandos_push_cte_flt
    (128) r_pila_operandos_push_cte_flt -> .

    MULT            reduce using rule 128 (r_pila_operandos_push_cte_flt -> .)
    DIV             reduce using rule 128 (r_pila_operandos_push_cte_flt -> .)
    MAS             reduce using rule 128 (r_pila_operandos_push_cte_flt -> .)
    MENOS           reduce using rule 128 (r_pila_operandos_push_cte_flt -> .)
    MAY             reduce using rule 128 (r_pila_operandos_push_cte_flt -> .)
    MEN             reduce using rule 128 (r_pila_operandos_push_cte_flt -> .)
    DIF             reduce using rule 128 (r_pila_operandos_push_cte_flt -> .)
    IGUIGU          reduce using rule 128 (r_pila_operandos_push_cte_flt -> .)
    AND             reduce using rule 128 (r_pila_operandos_push_cte_flt -> .)
    OR              reduce using rule 128 (r_pila_operandos_push_cte_flt -> .)
    COMA            reduce using rule 128 (r_pila_operandos_push_cte_flt -> .)
    PARDER          reduce using rule 128 (r_pila_operandos_push_cte_flt -> .)
    CORDER          reduce using rule 128 (r_pila_operandos_push_cte_flt -> .)
    TO              reduce using rule 128 (r_pila_operandos_push_cte_flt -> .)
    PTOCOM          reduce using rule 128 (r_pila_operandos_push_cte_flt -> .)
    DO              reduce using rule 128 (r_pila_operandos_push_cte_flt -> .)

    r_pila_operandos_push_cte_flt  shift and go to state 185

state 141

    (88) decision -> IF PARIZQ expresion PARDER . r_if_paso_1 THEN bloque ELSE r_if_paso_2 bloque r_if_paso_3
    (117) r_if_paso_1 -> .

    THEN            reduce using rule 117 (r_if_paso_1 -> .)

    r_if_paso_1                    shift and go to state 186

state 142

    (89) escritura -> WRITE PARIZQ escrituraciclo otro . PARDER PTOCOM

    PARDER          shift and go to state 187


state 143

    (92) otro -> COMA . escrituraciclo otro
    (90) escrituraciclo -> . CTE_STRING
    (91) escrituraciclo -> . expresion
    (55) expresion -> . exp r_pop_comp expresionsig
    (65) exp -> . termino r_pop_mas expciclo
    (69) termino -> . factor r_pop_mult factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID r_verifica_variable_existe r_pila_operandos_push opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    CTE_STRING      shift and go to state 111
    PARIZQ          shift and go to state 98
    ID              shift and go to state 97
    MAS             shift and go to state 106
    MENOS           shift and go to state 107
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    escrituraciclo                 shift and go to state 188
    expresion                      shift and go to state 112
    exp                            shift and go to state 102
    termino                        shift and go to state 103
    factor                         shift and go to state 104
    masomenos                      shift and go to state 105
    empty                          shift and go to state 109

state 144

    (93) otro -> empty .

    PARDER          reduce using rule 93 (otro -> empty .)


state 145

    (95) lectura -> READ PARIZQ iddim ciclodim . PARDER PTOCOM

    PARDER          shift and go to state 189


state 146

    (96) ciclodim -> COMA . iddim ciclodim
    (98) iddim -> . ID r_verifica_variable_existe r_pila_operandos_push arrexp arrexp

    ID              shift and go to state 86

    iddim                          shift and go to state 190

state 147

    (97) ciclodim -> empty .

    PARDER          reduce using rule 97 (ciclodim -> empty .)


state 148

    (103) condicional -> WHILE r_while_paso_1 PARIZQ expresion . PARDER r_while_paso_2 DO bloque r_while_paso_3

    PARDER          shift and go to state 191


state 149

    (104) nocondicional -> FOR iddim IGU r_pila_operadores_push_igu . expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2
    (55) expresion -> . exp r_pop_comp expresionsig
    (65) exp -> . termino r_pop_mas expciclo
    (69) termino -> . factor r_pop_mult factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID r_verifica_variable_existe r_pila_operandos_push opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 98
    ID              shift and go to state 97
    MAS             shift and go to state 106
    MENOS           shift and go to state 107
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    expresion                      shift and go to state 192
    exp                            shift and go to state 102
    termino                        shift and go to state 103
    factor                         shift and go to state 104
    masomenos                      shift and go to state 105
    empty                          shift and go to state 109

state 150

    (98) iddim -> ID r_verifica_variable_existe r_pila_operandos_push . arrexp arrexp
    (99) arrexp -> . CORIZQ expresion CORDER
    (100) arrexp -> . empty
    (110) empty -> .

  ! shift/reduce conflict for CORIZQ resolved as shift
    CORIZQ          shift and go to state 194
    IGU             reduce using rule 110 (empty -> .)
    COMA            reduce using rule 110 (empty -> .)
    PARDER          reduce using rule 110 (empty -> .)
    MULT            reduce using rule 110 (empty -> .)
    DIV             reduce using rule 110 (empty -> .)
    MAS             reduce using rule 110 (empty -> .)
    MENOS           reduce using rule 110 (empty -> .)
    MAY             reduce using rule 110 (empty -> .)
    MEN             reduce using rule 110 (empty -> .)
    DIF             reduce using rule 110 (empty -> .)
    IGUIGU          reduce using rule 110 (empty -> .)
    AND             reduce using rule 110 (empty -> .)
    OR              reduce using rule 110 (empty -> .)
    CORDER          reduce using rule 110 (empty -> .)
    TO              reduce using rule 110 (empty -> .)
    PTOCOM          reduce using rule 110 (empty -> .)
    DO              reduce using rule 110 (empty -> .)

  ! CORIZQ          [ reduce using rule 110 (empty -> .) ]

    arrexp                         shift and go to state 193
    empty                          shift and go to state 195

state 151

    (24) funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars . bloque
    (33) bloque -> . KEYIZQ bloqueopcion KEYDER

    KEYIZQ          shift and go to state 46

    bloque                         shift and go to state 196

state 152

    (29) funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloquefunc .

    VOID            reduce using rule 29 (funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloquefunc .)
    INT             reduce using rule 29 (funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloquefunc .)
    FLT             reduce using rule 29 (funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloquefunc .)
    CHAR            reduce using rule 29 (funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloquefunc .)
    MAIN            reduce using rule 29 (funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloquefunc .)


state 153

    (36) bloquefunc -> KEYIZQ . bloqueopcionfunc KEYDER
    (37) bloqueopcionfunc -> . estatutofunc bloqueopcionfunc
    (38) bloqueopcionfunc -> . empty
    (45) estatutofunc -> . asignacion
    (46) estatutofunc -> . decisionfunc
    (47) estatutofunc -> . escritura
    (48) estatutofunc -> . llamadafunc
    (49) estatutofunc -> . repeticionfunc
    (50) estatutofunc -> . lectura
    (51) estatutofunc -> . RETURN PARIZQ expresion PARDER PTOCOM
    (110) empty -> .
    (52) asignacion -> . ID r_verifica_variable_existe r_pila_operandos_push asignacionarr asignacionarr IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM
    (105) decisionfunc -> . IF PARIZQ expresion PARDER THEN bloquefunc ELSE bloquefunc
    (89) escritura -> . WRITE PARIZQ escrituraciclo otro PARDER PTOCOM
    (94) llamadafunc -> . ID PARIZQ parametros PARDER PTOCOM
    (106) repeticionfunc -> . condicionalfunc
    (107) repeticionfunc -> . nocondicionalfunc
    (95) lectura -> . READ PARIZQ iddim ciclodim PARDER PTOCOM
    (108) condicionalfunc -> . WHILE PARIZQ expresion PARDER DO bloquefunc
    (109) nocondicionalfunc -> . FOR iddim IGU expresion TO expresion DO bloquefunc

    RETURN          shift and go to state 206
    KEYDER          reduce using rule 110 (empty -> .)
    ID              shift and go to state 60
    IF              shift and go to state 207
    WRITE           shift and go to state 62
    READ            shift and go to state 65
    WHILE           shift and go to state 210
    FOR             shift and go to state 211

    bloqueopcionfunc               shift and go to state 197
    estatutofunc                   shift and go to state 198
    empty                          shift and go to state 199
    asignacion                     shift and go to state 200
    decisionfunc                   shift and go to state 201
    escritura                      shift and go to state 202
    llamadafunc                    shift and go to state 203
    repeticionfunc                 shift and go to state 204
    lectura                        shift and go to state 205
    condicionalfunc                shift and go to state 208
    nocondicionalfunc              shift and go to state 209

state 154

    (27) ciclovarsimple -> COMA varsimple ciclovarsimple .

    PARDER          reduce using rule 27 (ciclovarsimple -> COMA varsimple ciclovarsimple .)


state 155

    (30) ident -> ID r_register_variable_name arrini . arrini
    (31) arrini -> . CORIZQ CORDER
    (32) arrini -> . empty
    (110) empty -> .

    CORIZQ          shift and go to state 156
    COMA            reduce using rule 110 (empty -> .)
    PARDER          reduce using rule 110 (empty -> .)

    arrini                         shift and go to state 212
    empty                          shift and go to state 157

state 156

    (31) arrini -> CORIZQ . CORDER

    CORDER          shift and go to state 213


state 157

    (32) arrini -> empty .

    CORIZQ          reduce using rule 32 (arrini -> empty .)
    COMA            reduce using rule 32 (arrini -> empty .)
    PARDER          reduce using rule 32 (arrini -> empty .)


state 158

    (11) tipociclo -> tipo opciontipo .

    VOID            reduce using rule 11 (tipociclo -> tipo opciontipo .)
    INT             reduce using rule 11 (tipociclo -> tipo opciontipo .)
    FLT             reduce using rule 11 (tipociclo -> tipo opciontipo .)
    CHAR            reduce using rule 11 (tipociclo -> tipo opciontipo .)
    MAIN            reduce using rule 11 (tipociclo -> tipo opciontipo .)
    KEYIZQ          reduce using rule 11 (tipociclo -> tipo opciontipo .)


state 159

    (13) opciontipo -> ID . r_register_variable_name arr arr varciclo PTOCOM tipociclo
    (115) r_register_variable_name -> .

    CORIZQ          reduce using rule 115 (r_register_variable_name -> .)
    COMA            reduce using rule 115 (r_register_variable_name -> .)
    PTOCOM          reduce using rule 115 (r_register_variable_name -> .)

    r_register_variable_name       shift and go to state 214

state 160

    (14) opciontipo -> MODULE . ID PARIZQ opcionvarsimple PARDER opvars bloquefunc

    ID              shift and go to state 215


state 161

    (7) varciclo -> COMA ID r_register_variable_name arr . arr varciclo
    (9) arr -> . CORIZQ CTEI CORDER
    (10) arr -> . empty
    (110) empty -> .

    CORIZQ          shift and go to state 43
    COMA            reduce using rule 110 (empty -> .)
    PTOCOM          reduce using rule 110 (empty -> .)

    arr                            shift and go to state 216
    empty                          shift and go to state 44

state 162

    (52) asignacion -> ID r_verifica_variable_existe r_pila_operandos_push asignacionarr asignacionarr . IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM

    IGU             shift and go to state 217


state 163

    (53) asignacionarr -> CORIZQ expresion . CORDER

    CORDER          shift and go to state 218


state 164

    (75) factor -> ID r_verifica_variable_existe r_pila_operandos_push . opcionid
    (79) opcionid -> . arrexp arrexp
    (80) opcionid -> . PARIZQ parametros PARDER
    (99) arrexp -> . CORIZQ expresion CORDER
    (100) arrexp -> . empty
    (110) empty -> .

  ! shift/reduce conflict for CORIZQ resolved as shift
    PARIZQ          shift and go to state 221
    CORIZQ          shift and go to state 194
    MULT            reduce using rule 110 (empty -> .)
    DIV             reduce using rule 110 (empty -> .)
    MAS             reduce using rule 110 (empty -> .)
    MENOS           reduce using rule 110 (empty -> .)
    MAY             reduce using rule 110 (empty -> .)
    MEN             reduce using rule 110 (empty -> .)
    DIF             reduce using rule 110 (empty -> .)
    IGUIGU          reduce using rule 110 (empty -> .)
    AND             reduce using rule 110 (empty -> .)
    OR              reduce using rule 110 (empty -> .)
    COMA            reduce using rule 110 (empty -> .)
    PARDER          reduce using rule 110 (empty -> .)
    CORDER          reduce using rule 110 (empty -> .)
    TO              reduce using rule 110 (empty -> .)
    PTOCOM          reduce using rule 110 (empty -> .)
    DO              reduce using rule 110 (empty -> .)

  ! CORIZQ          [ reduce using rule 110 (empty -> .) ]

    opcionid                       shift and go to state 219
    arrexp                         shift and go to state 220
    empty                          shift and go to state 195

state 165

    (73) factor -> PARIZQ expresion PARDER .

    MULT            reduce using rule 73 (factor -> PARIZQ expresion PARDER .)
    DIV             reduce using rule 73 (factor -> PARIZQ expresion PARDER .)
    MAS             reduce using rule 73 (factor -> PARIZQ expresion PARDER .)
    MENOS           reduce using rule 73 (factor -> PARIZQ expresion PARDER .)
    MAY             reduce using rule 73 (factor -> PARIZQ expresion PARDER .)
    MEN             reduce using rule 73 (factor -> PARIZQ expresion PARDER .)
    DIF             reduce using rule 73 (factor -> PARIZQ expresion PARDER .)
    IGUIGU          reduce using rule 73 (factor -> PARIZQ expresion PARDER .)
    AND             reduce using rule 73 (factor -> PARIZQ expresion PARDER .)
    OR              reduce using rule 73 (factor -> PARIZQ expresion PARDER .)
    COMA            reduce using rule 73 (factor -> PARIZQ expresion PARDER .)
    PARDER          reduce using rule 73 (factor -> PARIZQ expresion PARDER .)
    CORDER          reduce using rule 73 (factor -> PARIZQ expresion PARDER .)
    TO              reduce using rule 73 (factor -> PARIZQ expresion PARDER .)
    PTOCOM          reduce using rule 73 (factor -> PARIZQ expresion PARDER .)
    DO              reduce using rule 73 (factor -> PARIZQ expresion PARDER .)


state 166

    (94) llamadafunc -> ID PARIZQ parametros PARDER PTOCOM .

    ID              reduce using rule 94 (llamadafunc -> ID PARIZQ parametros PARDER PTOCOM .)
    IF              reduce using rule 94 (llamadafunc -> ID PARIZQ parametros PARDER PTOCOM .)
    WRITE           reduce using rule 94 (llamadafunc -> ID PARIZQ parametros PARDER PTOCOM .)
    READ            reduce using rule 94 (llamadafunc -> ID PARIZQ parametros PARDER PTOCOM .)
    WHILE           reduce using rule 94 (llamadafunc -> ID PARIZQ parametros PARDER PTOCOM .)
    FOR             reduce using rule 94 (llamadafunc -> ID PARIZQ parametros PARDER PTOCOM .)
    KEYDER          reduce using rule 94 (llamadafunc -> ID PARIZQ parametros PARDER PTOCOM .)
    RETURN          reduce using rule 94 (llamadafunc -> ID PARIZQ parametros PARDER PTOCOM .)


state 167

    (86) cicloparametros -> COMA expresion . cicloparametros
    (86) cicloparametros -> . COMA expresion cicloparametros
    (87) cicloparametros -> . empty
    (110) empty -> .

    COMA            shift and go to state 132
    PARDER          reduce using rule 110 (empty -> .)

    cicloparametros                shift and go to state 222
    empty                          shift and go to state 133

state 168

    (55) expresion -> exp r_pop_comp expresionsig .

    COMA            reduce using rule 55 (expresion -> exp r_pop_comp expresionsig .)
    PARDER          reduce using rule 55 (expresion -> exp r_pop_comp expresionsig .)
    CORDER          reduce using rule 55 (expresion -> exp r_pop_comp expresionsig .)
    TO              reduce using rule 55 (expresion -> exp r_pop_comp expresionsig .)
    PTOCOM          reduce using rule 55 (expresion -> exp r_pop_comp expresionsig .)
    DO              reduce using rule 55 (expresion -> exp r_pop_comp expresionsig .)


state 169

    (56) expresionsig -> MAY . r_pila_operadores_push_may expresionsigequal expresion
    (137) r_pila_operadores_push_may -> .

    IGU             reduce using rule 137 (r_pila_operadores_push_may -> .)
    PARIZQ          reduce using rule 137 (r_pila_operadores_push_may -> .)
    ID              reduce using rule 137 (r_pila_operadores_push_may -> .)
    MAS             reduce using rule 137 (r_pila_operadores_push_may -> .)
    MENOS           reduce using rule 137 (r_pila_operadores_push_may -> .)
    CTEI            reduce using rule 137 (r_pila_operadores_push_may -> .)
    CTEF            reduce using rule 137 (r_pila_operadores_push_may -> .)

    r_pila_operadores_push_may     shift and go to state 223

state 170

    (57) expresionsig -> MEN . r_pila_operadores_push_men expresionsigequal expresion
    (138) r_pila_operadores_push_men -> .

    IGU             reduce using rule 138 (r_pila_operadores_push_men -> .)
    PARIZQ          reduce using rule 138 (r_pila_operadores_push_men -> .)
    ID              reduce using rule 138 (r_pila_operadores_push_men -> .)
    MAS             reduce using rule 138 (r_pila_operadores_push_men -> .)
    MENOS           reduce using rule 138 (r_pila_operadores_push_men -> .)
    CTEI            reduce using rule 138 (r_pila_operadores_push_men -> .)
    CTEF            reduce using rule 138 (r_pila_operadores_push_men -> .)

    r_pila_operadores_push_men     shift and go to state 224

state 171

    (58) expresionsig -> DIF . r_pila_operadores_push_dif expresion
    (139) r_pila_operadores_push_dif -> .

    PARIZQ          reduce using rule 139 (r_pila_operadores_push_dif -> .)
    ID              reduce using rule 139 (r_pila_operadores_push_dif -> .)
    MAS             reduce using rule 139 (r_pila_operadores_push_dif -> .)
    MENOS           reduce using rule 139 (r_pila_operadores_push_dif -> .)
    CTEI            reduce using rule 139 (r_pila_operadores_push_dif -> .)
    CTEF            reduce using rule 139 (r_pila_operadores_push_dif -> .)

    r_pila_operadores_push_dif     shift and go to state 225

state 172

    (59) expresionsig -> IGUIGU . r_pila_operadores_push_iguigu expresion
    (140) r_pila_operadores_push_iguigu -> .

    PARIZQ          reduce using rule 140 (r_pila_operadores_push_iguigu -> .)
    ID              reduce using rule 140 (r_pila_operadores_push_iguigu -> .)
    MAS             reduce using rule 140 (r_pila_operadores_push_iguigu -> .)
    MENOS           reduce using rule 140 (r_pila_operadores_push_iguigu -> .)
    CTEI            reduce using rule 140 (r_pila_operadores_push_iguigu -> .)
    CTEF            reduce using rule 140 (r_pila_operadores_push_iguigu -> .)

    r_pila_operadores_push_iguigu  shift and go to state 226

state 173

    (60) expresionsig -> AND . r_pila_operadores_push_and expresion
    (141) r_pila_operadores_push_and -> .

    PARIZQ          reduce using rule 141 (r_pila_operadores_push_and -> .)
    ID              reduce using rule 141 (r_pila_operadores_push_and -> .)
    MAS             reduce using rule 141 (r_pila_operadores_push_and -> .)
    MENOS           reduce using rule 141 (r_pila_operadores_push_and -> .)
    CTEI            reduce using rule 141 (r_pila_operadores_push_and -> .)
    CTEF            reduce using rule 141 (r_pila_operadores_push_and -> .)

    r_pila_operadores_push_and     shift and go to state 227

state 174

    (61) expresionsig -> OR . r_pila_operadores_push_or expresion
    (142) r_pila_operadores_push_or -> .

    PARIZQ          reduce using rule 142 (r_pila_operadores_push_or -> .)
    ID              reduce using rule 142 (r_pila_operadores_push_or -> .)
    MAS             reduce using rule 142 (r_pila_operadores_push_or -> .)
    MENOS           reduce using rule 142 (r_pila_operadores_push_or -> .)
    CTEI            reduce using rule 142 (r_pila_operadores_push_or -> .)
    CTEF            reduce using rule 142 (r_pila_operadores_push_or -> .)

    r_pila_operadores_push_or      shift and go to state 228

state 175

    (62) expresionsig -> empty .

    COMA            reduce using rule 62 (expresionsig -> empty .)
    PARDER          reduce using rule 62 (expresionsig -> empty .)
    CORDER          reduce using rule 62 (expresionsig -> empty .)
    TO              reduce using rule 62 (expresionsig -> empty .)
    PTOCOM          reduce using rule 62 (expresionsig -> empty .)
    DO              reduce using rule 62 (expresionsig -> empty .)


state 176

    (65) exp -> termino r_pop_mas expciclo .

    MAY             reduce using rule 65 (exp -> termino r_pop_mas expciclo .)
    MEN             reduce using rule 65 (exp -> termino r_pop_mas expciclo .)
    DIF             reduce using rule 65 (exp -> termino r_pop_mas expciclo .)
    IGUIGU          reduce using rule 65 (exp -> termino r_pop_mas expciclo .)
    AND             reduce using rule 65 (exp -> termino r_pop_mas expciclo .)
    OR              reduce using rule 65 (exp -> termino r_pop_mas expciclo .)
    COMA            reduce using rule 65 (exp -> termino r_pop_mas expciclo .)
    PARDER          reduce using rule 65 (exp -> termino r_pop_mas expciclo .)
    CORDER          reduce using rule 65 (exp -> termino r_pop_mas expciclo .)
    TO              reduce using rule 65 (exp -> termino r_pop_mas expciclo .)
    PTOCOM          reduce using rule 65 (exp -> termino r_pop_mas expciclo .)
    DO              reduce using rule 65 (exp -> termino r_pop_mas expciclo .)


state 177

    (66) expciclo -> MAS . r_pila_operadores_push_mas exp
    (135) r_pila_operadores_push_mas -> .

    PARIZQ          reduce using rule 135 (r_pila_operadores_push_mas -> .)
    ID              reduce using rule 135 (r_pila_operadores_push_mas -> .)
    MAS             reduce using rule 135 (r_pila_operadores_push_mas -> .)
    MENOS           reduce using rule 135 (r_pila_operadores_push_mas -> .)
    CTEI            reduce using rule 135 (r_pila_operadores_push_mas -> .)
    CTEF            reduce using rule 135 (r_pila_operadores_push_mas -> .)

    r_pila_operadores_push_mas     shift and go to state 229

state 178

    (67) expciclo -> MENOS . r_pila_operadores_push_menos exp
    (136) r_pila_operadores_push_menos -> .

    PARIZQ          reduce using rule 136 (r_pila_operadores_push_menos -> .)
    ID              reduce using rule 136 (r_pila_operadores_push_menos -> .)
    MAS             reduce using rule 136 (r_pila_operadores_push_menos -> .)
    MENOS           reduce using rule 136 (r_pila_operadores_push_menos -> .)
    CTEI            reduce using rule 136 (r_pila_operadores_push_menos -> .)
    CTEF            reduce using rule 136 (r_pila_operadores_push_menos -> .)

    r_pila_operadores_push_menos   shift and go to state 230

state 179

    (68) expciclo -> empty .

    MAY             reduce using rule 68 (expciclo -> empty .)
    MEN             reduce using rule 68 (expciclo -> empty .)
    DIF             reduce using rule 68 (expciclo -> empty .)
    IGUIGU          reduce using rule 68 (expciclo -> empty .)
    AND             reduce using rule 68 (expciclo -> empty .)
    OR              reduce using rule 68 (expciclo -> empty .)
    COMA            reduce using rule 68 (expciclo -> empty .)
    PARDER          reduce using rule 68 (expciclo -> empty .)
    CORDER          reduce using rule 68 (expciclo -> empty .)
    TO              reduce using rule 68 (expciclo -> empty .)
    PTOCOM          reduce using rule 68 (expciclo -> empty .)
    DO              reduce using rule 68 (expciclo -> empty .)


state 180

    (69) termino -> factor r_pop_mult factorciclo .

    MAS             reduce using rule 69 (termino -> factor r_pop_mult factorciclo .)
    MENOS           reduce using rule 69 (termino -> factor r_pop_mult factorciclo .)
    MAY             reduce using rule 69 (termino -> factor r_pop_mult factorciclo .)
    MEN             reduce using rule 69 (termino -> factor r_pop_mult factorciclo .)
    DIF             reduce using rule 69 (termino -> factor r_pop_mult factorciclo .)
    IGUIGU          reduce using rule 69 (termino -> factor r_pop_mult factorciclo .)
    AND             reduce using rule 69 (termino -> factor r_pop_mult factorciclo .)
    OR              reduce using rule 69 (termino -> factor r_pop_mult factorciclo .)
    COMA            reduce using rule 69 (termino -> factor r_pop_mult factorciclo .)
    PARDER          reduce using rule 69 (termino -> factor r_pop_mult factorciclo .)
    CORDER          reduce using rule 69 (termino -> factor r_pop_mult factorciclo .)
    TO              reduce using rule 69 (termino -> factor r_pop_mult factorciclo .)
    PTOCOM          reduce using rule 69 (termino -> factor r_pop_mult factorciclo .)
    DO              reduce using rule 69 (termino -> factor r_pop_mult factorciclo .)


state 181

    (70) factorciclo -> MULT . r_pila_operadores_push_mult termino
    (133) r_pila_operadores_push_mult -> .

    PARIZQ          reduce using rule 133 (r_pila_operadores_push_mult -> .)
    ID              reduce using rule 133 (r_pila_operadores_push_mult -> .)
    MAS             reduce using rule 133 (r_pila_operadores_push_mult -> .)
    MENOS           reduce using rule 133 (r_pila_operadores_push_mult -> .)
    CTEI            reduce using rule 133 (r_pila_operadores_push_mult -> .)
    CTEF            reduce using rule 133 (r_pila_operadores_push_mult -> .)

    r_pila_operadores_push_mult    shift and go to state 231

state 182

    (71) factorciclo -> DIV . r_pila_operadores_push_div termino
    (134) r_pila_operadores_push_div -> .

    PARIZQ          reduce using rule 134 (r_pila_operadores_push_div -> .)
    ID              reduce using rule 134 (r_pila_operadores_push_div -> .)
    MAS             reduce using rule 134 (r_pila_operadores_push_div -> .)
    MENOS           reduce using rule 134 (r_pila_operadores_push_div -> .)
    CTEI            reduce using rule 134 (r_pila_operadores_push_div -> .)
    CTEF            reduce using rule 134 (r_pila_operadores_push_div -> .)

    r_pila_operadores_push_div     shift and go to state 232

state 183

    (72) factorciclo -> empty .

    MAS             reduce using rule 72 (factorciclo -> empty .)
    MENOS           reduce using rule 72 (factorciclo -> empty .)
    MAY             reduce using rule 72 (factorciclo -> empty .)
    MEN             reduce using rule 72 (factorciclo -> empty .)
    DIF             reduce using rule 72 (factorciclo -> empty .)
    IGUIGU          reduce using rule 72 (factorciclo -> empty .)
    AND             reduce using rule 72 (factorciclo -> empty .)
    OR              reduce using rule 72 (factorciclo -> empty .)
    COMA            reduce using rule 72 (factorciclo -> empty .)
    PARDER          reduce using rule 72 (factorciclo -> empty .)
    CORDER          reduce using rule 72 (factorciclo -> empty .)
    TO              reduce using rule 72 (factorciclo -> empty .)
    PTOCOM          reduce using rule 72 (factorciclo -> empty .)
    DO              reduce using rule 72 (factorciclo -> empty .)


state 184

    (82) varcte -> CTEI r_pila_operandos_push_cte_int .

    MULT            reduce using rule 82 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    DIV             reduce using rule 82 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    MAS             reduce using rule 82 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    MENOS           reduce using rule 82 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    MAY             reduce using rule 82 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    MEN             reduce using rule 82 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    DIF             reduce using rule 82 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    IGUIGU          reduce using rule 82 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    AND             reduce using rule 82 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    OR              reduce using rule 82 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    COMA            reduce using rule 82 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    PARDER          reduce using rule 82 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    CORDER          reduce using rule 82 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    TO              reduce using rule 82 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    PTOCOM          reduce using rule 82 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    DO              reduce using rule 82 (varcte -> CTEI r_pila_operandos_push_cte_int .)


state 185

    (83) varcte -> CTEF r_pila_operandos_push_cte_flt .

    MULT            reduce using rule 83 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    DIV             reduce using rule 83 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    MAS             reduce using rule 83 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    MENOS           reduce using rule 83 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    MAY             reduce using rule 83 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    MEN             reduce using rule 83 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    DIF             reduce using rule 83 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    IGUIGU          reduce using rule 83 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    AND             reduce using rule 83 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    OR              reduce using rule 83 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    COMA            reduce using rule 83 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    PARDER          reduce using rule 83 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    CORDER          reduce using rule 83 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    TO              reduce using rule 83 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    PTOCOM          reduce using rule 83 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    DO              reduce using rule 83 (varcte -> CTEF r_pila_operandos_push_cte_flt .)


state 186

    (88) decision -> IF PARIZQ expresion PARDER r_if_paso_1 . THEN bloque ELSE r_if_paso_2 bloque r_if_paso_3

    THEN            shift and go to state 233


state 187

    (89) escritura -> WRITE PARIZQ escrituraciclo otro PARDER . PTOCOM

    PTOCOM          shift and go to state 234


state 188

    (92) otro -> COMA escrituraciclo . otro
    (92) otro -> . COMA escrituraciclo otro
    (93) otro -> . empty
    (110) empty -> .

    COMA            shift and go to state 143
    PARDER          reduce using rule 110 (empty -> .)

    otro                           shift and go to state 235
    empty                          shift and go to state 144

state 189

    (95) lectura -> READ PARIZQ iddim ciclodim PARDER . PTOCOM

    PTOCOM          shift and go to state 236


state 190

    (96) ciclodim -> COMA iddim . ciclodim
    (96) ciclodim -> . COMA iddim ciclodim
    (97) ciclodim -> . empty
    (110) empty -> .

    COMA            shift and go to state 146
    PARDER          reduce using rule 110 (empty -> .)

    ciclodim                       shift and go to state 237
    empty                          shift and go to state 147

state 191

    (103) condicional -> WHILE r_while_paso_1 PARIZQ expresion PARDER . r_while_paso_2 DO bloque r_while_paso_3
    (121) r_while_paso_2 -> .

    DO              reduce using rule 121 (r_while_paso_2 -> .)

    r_while_paso_2                 shift and go to state 238

state 192

    (104) nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion . TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2

    TO              shift and go to state 239


state 193

    (98) iddim -> ID r_verifica_variable_existe r_pila_operandos_push arrexp . arrexp
    (99) arrexp -> . CORIZQ expresion CORDER
    (100) arrexp -> . empty
    (110) empty -> .

    CORIZQ          shift and go to state 194
    IGU             reduce using rule 110 (empty -> .)
    COMA            reduce using rule 110 (empty -> .)
    PARDER          reduce using rule 110 (empty -> .)
    MULT            reduce using rule 110 (empty -> .)
    DIV             reduce using rule 110 (empty -> .)
    MAS             reduce using rule 110 (empty -> .)
    MENOS           reduce using rule 110 (empty -> .)
    MAY             reduce using rule 110 (empty -> .)
    MEN             reduce using rule 110 (empty -> .)
    DIF             reduce using rule 110 (empty -> .)
    IGUIGU          reduce using rule 110 (empty -> .)
    AND             reduce using rule 110 (empty -> .)
    OR              reduce using rule 110 (empty -> .)
    CORDER          reduce using rule 110 (empty -> .)
    TO              reduce using rule 110 (empty -> .)
    PTOCOM          reduce using rule 110 (empty -> .)
    DO              reduce using rule 110 (empty -> .)

    arrexp                         shift and go to state 240
    empty                          shift and go to state 195

state 194

    (99) arrexp -> CORIZQ . expresion CORDER
    (55) expresion -> . exp r_pop_comp expresionsig
    (65) exp -> . termino r_pop_mas expciclo
    (69) termino -> . factor r_pop_mult factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID r_verifica_variable_existe r_pila_operandos_push opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 98
    ID              shift and go to state 97
    MAS             shift and go to state 106
    MENOS           shift and go to state 107
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    expresion                      shift and go to state 241
    exp                            shift and go to state 102
    termino                        shift and go to state 103
    factor                         shift and go to state 104
    masomenos                      shift and go to state 105
    empty                          shift and go to state 109

state 195

    (100) arrexp -> empty .

    CORIZQ          reduce using rule 100 (arrexp -> empty .)
    IGU             reduce using rule 100 (arrexp -> empty .)
    COMA            reduce using rule 100 (arrexp -> empty .)
    PARDER          reduce using rule 100 (arrexp -> empty .)
    MULT            reduce using rule 100 (arrexp -> empty .)
    DIV             reduce using rule 100 (arrexp -> empty .)
    MAS             reduce using rule 100 (arrexp -> empty .)
    MENOS           reduce using rule 100 (arrexp -> empty .)
    MAY             reduce using rule 100 (arrexp -> empty .)
    MEN             reduce using rule 100 (arrexp -> empty .)
    DIF             reduce using rule 100 (arrexp -> empty .)
    IGUIGU          reduce using rule 100 (arrexp -> empty .)
    AND             reduce using rule 100 (arrexp -> empty .)
    OR              reduce using rule 100 (arrexp -> empty .)
    CORDER          reduce using rule 100 (arrexp -> empty .)
    TO              reduce using rule 100 (arrexp -> empty .)
    PTOCOM          reduce using rule 100 (arrexp -> empty .)
    DO              reduce using rule 100 (arrexp -> empty .)


state 196

    (24) funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloque .

    VOID            reduce using rule 24 (funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloque .)
    INT             reduce using rule 24 (funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloque .)
    FLT             reduce using rule 24 (funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloque .)
    CHAR            reduce using rule 24 (funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloque .)
    MAIN            reduce using rule 24 (funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloque .)


state 197

    (36) bloquefunc -> KEYIZQ bloqueopcionfunc . KEYDER

    KEYDER          shift and go to state 242


state 198

    (37) bloqueopcionfunc -> estatutofunc . bloqueopcionfunc
    (37) bloqueopcionfunc -> . estatutofunc bloqueopcionfunc
    (38) bloqueopcionfunc -> . empty
    (45) estatutofunc -> . asignacion
    (46) estatutofunc -> . decisionfunc
    (47) estatutofunc -> . escritura
    (48) estatutofunc -> . llamadafunc
    (49) estatutofunc -> . repeticionfunc
    (50) estatutofunc -> . lectura
    (51) estatutofunc -> . RETURN PARIZQ expresion PARDER PTOCOM
    (110) empty -> .
    (52) asignacion -> . ID r_verifica_variable_existe r_pila_operandos_push asignacionarr asignacionarr IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM
    (105) decisionfunc -> . IF PARIZQ expresion PARDER THEN bloquefunc ELSE bloquefunc
    (89) escritura -> . WRITE PARIZQ escrituraciclo otro PARDER PTOCOM
    (94) llamadafunc -> . ID PARIZQ parametros PARDER PTOCOM
    (106) repeticionfunc -> . condicionalfunc
    (107) repeticionfunc -> . nocondicionalfunc
    (95) lectura -> . READ PARIZQ iddim ciclodim PARDER PTOCOM
    (108) condicionalfunc -> . WHILE PARIZQ expresion PARDER DO bloquefunc
    (109) nocondicionalfunc -> . FOR iddim IGU expresion TO expresion DO bloquefunc

    RETURN          shift and go to state 206
    KEYDER          reduce using rule 110 (empty -> .)
    ID              shift and go to state 60
    IF              shift and go to state 207
    WRITE           shift and go to state 62
    READ            shift and go to state 65
    WHILE           shift and go to state 210
    FOR             shift and go to state 211

    estatutofunc                   shift and go to state 198
    bloqueopcionfunc               shift and go to state 243
    empty                          shift and go to state 199
    asignacion                     shift and go to state 200
    decisionfunc                   shift and go to state 201
    escritura                      shift and go to state 202
    llamadafunc                    shift and go to state 203
    repeticionfunc                 shift and go to state 204
    lectura                        shift and go to state 205
    condicionalfunc                shift and go to state 208
    nocondicionalfunc              shift and go to state 209

state 199

    (38) bloqueopcionfunc -> empty .

    KEYDER          reduce using rule 38 (bloqueopcionfunc -> empty .)


state 200

    (45) estatutofunc -> asignacion .

    RETURN          reduce using rule 45 (estatutofunc -> asignacion .)
    ID              reduce using rule 45 (estatutofunc -> asignacion .)
    IF              reduce using rule 45 (estatutofunc -> asignacion .)
    WRITE           reduce using rule 45 (estatutofunc -> asignacion .)
    READ            reduce using rule 45 (estatutofunc -> asignacion .)
    WHILE           reduce using rule 45 (estatutofunc -> asignacion .)
    FOR             reduce using rule 45 (estatutofunc -> asignacion .)
    KEYDER          reduce using rule 45 (estatutofunc -> asignacion .)


state 201

    (46) estatutofunc -> decisionfunc .

    RETURN          reduce using rule 46 (estatutofunc -> decisionfunc .)
    ID              reduce using rule 46 (estatutofunc -> decisionfunc .)
    IF              reduce using rule 46 (estatutofunc -> decisionfunc .)
    WRITE           reduce using rule 46 (estatutofunc -> decisionfunc .)
    READ            reduce using rule 46 (estatutofunc -> decisionfunc .)
    WHILE           reduce using rule 46 (estatutofunc -> decisionfunc .)
    FOR             reduce using rule 46 (estatutofunc -> decisionfunc .)
    KEYDER          reduce using rule 46 (estatutofunc -> decisionfunc .)


state 202

    (47) estatutofunc -> escritura .

    RETURN          reduce using rule 47 (estatutofunc -> escritura .)
    ID              reduce using rule 47 (estatutofunc -> escritura .)
    IF              reduce using rule 47 (estatutofunc -> escritura .)
    WRITE           reduce using rule 47 (estatutofunc -> escritura .)
    READ            reduce using rule 47 (estatutofunc -> escritura .)
    WHILE           reduce using rule 47 (estatutofunc -> escritura .)
    FOR             reduce using rule 47 (estatutofunc -> escritura .)
    KEYDER          reduce using rule 47 (estatutofunc -> escritura .)


state 203

    (48) estatutofunc -> llamadafunc .

    RETURN          reduce using rule 48 (estatutofunc -> llamadafunc .)
    ID              reduce using rule 48 (estatutofunc -> llamadafunc .)
    IF              reduce using rule 48 (estatutofunc -> llamadafunc .)
    WRITE           reduce using rule 48 (estatutofunc -> llamadafunc .)
    READ            reduce using rule 48 (estatutofunc -> llamadafunc .)
    WHILE           reduce using rule 48 (estatutofunc -> llamadafunc .)
    FOR             reduce using rule 48 (estatutofunc -> llamadafunc .)
    KEYDER          reduce using rule 48 (estatutofunc -> llamadafunc .)


state 204

    (49) estatutofunc -> repeticionfunc .

    RETURN          reduce using rule 49 (estatutofunc -> repeticionfunc .)
    ID              reduce using rule 49 (estatutofunc -> repeticionfunc .)
    IF              reduce using rule 49 (estatutofunc -> repeticionfunc .)
    WRITE           reduce using rule 49 (estatutofunc -> repeticionfunc .)
    READ            reduce using rule 49 (estatutofunc -> repeticionfunc .)
    WHILE           reduce using rule 49 (estatutofunc -> repeticionfunc .)
    FOR             reduce using rule 49 (estatutofunc -> repeticionfunc .)
    KEYDER          reduce using rule 49 (estatutofunc -> repeticionfunc .)


state 205

    (50) estatutofunc -> lectura .

    RETURN          reduce using rule 50 (estatutofunc -> lectura .)
    ID              reduce using rule 50 (estatutofunc -> lectura .)
    IF              reduce using rule 50 (estatutofunc -> lectura .)
    WRITE           reduce using rule 50 (estatutofunc -> lectura .)
    READ            reduce using rule 50 (estatutofunc -> lectura .)
    WHILE           reduce using rule 50 (estatutofunc -> lectura .)
    FOR             reduce using rule 50 (estatutofunc -> lectura .)
    KEYDER          reduce using rule 50 (estatutofunc -> lectura .)


state 206

    (51) estatutofunc -> RETURN . PARIZQ expresion PARDER PTOCOM

    PARIZQ          shift and go to state 244


state 207

    (105) decisionfunc -> IF . PARIZQ expresion PARDER THEN bloquefunc ELSE bloquefunc

    PARIZQ          shift and go to state 245


state 208

    (106) repeticionfunc -> condicionalfunc .

    RETURN          reduce using rule 106 (repeticionfunc -> condicionalfunc .)
    ID              reduce using rule 106 (repeticionfunc -> condicionalfunc .)
    IF              reduce using rule 106 (repeticionfunc -> condicionalfunc .)
    WRITE           reduce using rule 106 (repeticionfunc -> condicionalfunc .)
    READ            reduce using rule 106 (repeticionfunc -> condicionalfunc .)
    WHILE           reduce using rule 106 (repeticionfunc -> condicionalfunc .)
    FOR             reduce using rule 106 (repeticionfunc -> condicionalfunc .)
    KEYDER          reduce using rule 106 (repeticionfunc -> condicionalfunc .)


state 209

    (107) repeticionfunc -> nocondicionalfunc .

    RETURN          reduce using rule 107 (repeticionfunc -> nocondicionalfunc .)
    ID              reduce using rule 107 (repeticionfunc -> nocondicionalfunc .)
    IF              reduce using rule 107 (repeticionfunc -> nocondicionalfunc .)
    WRITE           reduce using rule 107 (repeticionfunc -> nocondicionalfunc .)
    READ            reduce using rule 107 (repeticionfunc -> nocondicionalfunc .)
    WHILE           reduce using rule 107 (repeticionfunc -> nocondicionalfunc .)
    FOR             reduce using rule 107 (repeticionfunc -> nocondicionalfunc .)
    KEYDER          reduce using rule 107 (repeticionfunc -> nocondicionalfunc .)


state 210

    (108) condicionalfunc -> WHILE . PARIZQ expresion PARDER DO bloquefunc

    PARIZQ          shift and go to state 246


state 211

    (109) nocondicionalfunc -> FOR . iddim IGU expresion TO expresion DO bloquefunc
    (98) iddim -> . ID r_verifica_variable_existe r_pila_operandos_push arrexp arrexp

    ID              shift and go to state 86

    iddim                          shift and go to state 247

state 212

    (30) ident -> ID r_register_variable_name arrini arrini .

    COMA            reduce using rule 30 (ident -> ID r_register_variable_name arrini arrini .)
    PARDER          reduce using rule 30 (ident -> ID r_register_variable_name arrini arrini .)


state 213

    (31) arrini -> CORIZQ CORDER .

    CORIZQ          reduce using rule 31 (arrini -> CORIZQ CORDER .)
    COMA            reduce using rule 31 (arrini -> CORIZQ CORDER .)
    PARDER          reduce using rule 31 (arrini -> CORIZQ CORDER .)


state 214

    (13) opciontipo -> ID r_register_variable_name . arr arr varciclo PTOCOM tipociclo
    (9) arr -> . CORIZQ CTEI CORDER
    (10) arr -> . empty
    (110) empty -> .

  ! shift/reduce conflict for CORIZQ resolved as shift
    CORIZQ          shift and go to state 43
    COMA            reduce using rule 110 (empty -> .)
    PTOCOM          reduce using rule 110 (empty -> .)

  ! CORIZQ          [ reduce using rule 110 (empty -> .) ]

    arr                            shift and go to state 248
    empty                          shift and go to state 44

state 215

    (14) opciontipo -> MODULE ID . PARIZQ opcionvarsimple PARDER opvars bloquefunc

    PARIZQ          shift and go to state 249


state 216

    (7) varciclo -> COMA ID r_register_variable_name arr arr . varciclo
    (7) varciclo -> . COMA ID r_register_variable_name arr arr varciclo
    (8) varciclo -> . empty
    (110) empty -> .

    COMA            shift and go to state 74
    PTOCOM          reduce using rule 110 (empty -> .)

    varciclo                       shift and go to state 250
    empty                          shift and go to state 75

state 217

    (52) asignacion -> ID r_verifica_variable_existe r_pila_operandos_push asignacionarr asignacionarr IGU . r_pila_operadores_push_igu expresion r_pop_igu PTOCOM
    (143) r_pila_operadores_push_igu -> .

    PARIZQ          reduce using rule 143 (r_pila_operadores_push_igu -> .)
    ID              reduce using rule 143 (r_pila_operadores_push_igu -> .)
    MAS             reduce using rule 143 (r_pila_operadores_push_igu -> .)
    MENOS           reduce using rule 143 (r_pila_operadores_push_igu -> .)
    CTEI            reduce using rule 143 (r_pila_operadores_push_igu -> .)
    CTEF            reduce using rule 143 (r_pila_operadores_push_igu -> .)

    r_pila_operadores_push_igu     shift and go to state 251

state 218

    (53) asignacionarr -> CORIZQ expresion CORDER .

    CORIZQ          reduce using rule 53 (asignacionarr -> CORIZQ expresion CORDER .)
    IGU             reduce using rule 53 (asignacionarr -> CORIZQ expresion CORDER .)


state 219

    (75) factor -> ID r_verifica_variable_existe r_pila_operandos_push opcionid .

    MULT            reduce using rule 75 (factor -> ID r_verifica_variable_existe r_pila_operandos_push opcionid .)
    DIV             reduce using rule 75 (factor -> ID r_verifica_variable_existe r_pila_operandos_push opcionid .)
    MAS             reduce using rule 75 (factor -> ID r_verifica_variable_existe r_pila_operandos_push opcionid .)
    MENOS           reduce using rule 75 (factor -> ID r_verifica_variable_existe r_pila_operandos_push opcionid .)
    MAY             reduce using rule 75 (factor -> ID r_verifica_variable_existe r_pila_operandos_push opcionid .)
    MEN             reduce using rule 75 (factor -> ID r_verifica_variable_existe r_pila_operandos_push opcionid .)
    DIF             reduce using rule 75 (factor -> ID r_verifica_variable_existe r_pila_operandos_push opcionid .)
    IGUIGU          reduce using rule 75 (factor -> ID r_verifica_variable_existe r_pila_operandos_push opcionid .)
    AND             reduce using rule 75 (factor -> ID r_verifica_variable_existe r_pila_operandos_push opcionid .)
    OR              reduce using rule 75 (factor -> ID r_verifica_variable_existe r_pila_operandos_push opcionid .)
    COMA            reduce using rule 75 (factor -> ID r_verifica_variable_existe r_pila_operandos_push opcionid .)
    PARDER          reduce using rule 75 (factor -> ID r_verifica_variable_existe r_pila_operandos_push opcionid .)
    CORDER          reduce using rule 75 (factor -> ID r_verifica_variable_existe r_pila_operandos_push opcionid .)
    TO              reduce using rule 75 (factor -> ID r_verifica_variable_existe r_pila_operandos_push opcionid .)
    PTOCOM          reduce using rule 75 (factor -> ID r_verifica_variable_existe r_pila_operandos_push opcionid .)
    DO              reduce using rule 75 (factor -> ID r_verifica_variable_existe r_pila_operandos_push opcionid .)


state 220

    (79) opcionid -> arrexp . arrexp
    (99) arrexp -> . CORIZQ expresion CORDER
    (100) arrexp -> . empty
    (110) empty -> .

    CORIZQ          shift and go to state 194
    MULT            reduce using rule 110 (empty -> .)
    DIV             reduce using rule 110 (empty -> .)
    MAS             reduce using rule 110 (empty -> .)
    MENOS           reduce using rule 110 (empty -> .)
    MAY             reduce using rule 110 (empty -> .)
    MEN             reduce using rule 110 (empty -> .)
    DIF             reduce using rule 110 (empty -> .)
    IGUIGU          reduce using rule 110 (empty -> .)
    AND             reduce using rule 110 (empty -> .)
    OR              reduce using rule 110 (empty -> .)
    COMA            reduce using rule 110 (empty -> .)
    PARDER          reduce using rule 110 (empty -> .)
    CORDER          reduce using rule 110 (empty -> .)
    TO              reduce using rule 110 (empty -> .)
    PTOCOM          reduce using rule 110 (empty -> .)
    DO              reduce using rule 110 (empty -> .)

    arrexp                         shift and go to state 252
    empty                          shift and go to state 195

state 221

    (80) opcionid -> PARIZQ . parametros PARDER
    (84) parametros -> . expresion cicloparametros
    (85) parametros -> . empty
    (55) expresion -> . exp r_pop_comp expresionsig
    (110) empty -> .
    (65) exp -> . termino r_pop_mas expciclo
    (69) termino -> . factor r_pop_mult factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID r_verifica_variable_existe r_pila_operandos_push opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty

  ! shift/reduce conflict for ID resolved as shift
    PARDER          reduce using rule 110 (empty -> .)
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)
    PARIZQ          shift and go to state 98
    ID              shift and go to state 97
    MAS             shift and go to state 106
    MENOS           shift and go to state 107

  ! ID              [ reduce using rule 110 (empty -> .) ]

    parametros                     shift and go to state 253
    expresion                      shift and go to state 100
    empty                          shift and go to state 101
    exp                            shift and go to state 102
    termino                        shift and go to state 103
    factor                         shift and go to state 104
    masomenos                      shift and go to state 105

state 222

    (86) cicloparametros -> COMA expresion cicloparametros .

    PARDER          reduce using rule 86 (cicloparametros -> COMA expresion cicloparametros .)


state 223

    (56) expresionsig -> MAY r_pila_operadores_push_may . expresionsigequal expresion
    (63) expresionsigequal -> . IGU
    (64) expresionsigequal -> . empty
    (110) empty -> .

    IGU             shift and go to state 255
    PARIZQ          reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    MAS             reduce using rule 110 (empty -> .)
    MENOS           reduce using rule 110 (empty -> .)
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

    expresionsigequal              shift and go to state 254
    empty                          shift and go to state 256

state 224

    (57) expresionsig -> MEN r_pila_operadores_push_men . expresionsigequal expresion
    (63) expresionsigequal -> . IGU
    (64) expresionsigequal -> . empty
    (110) empty -> .

    IGU             shift and go to state 255
    PARIZQ          reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    MAS             reduce using rule 110 (empty -> .)
    MENOS           reduce using rule 110 (empty -> .)
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

    expresionsigequal              shift and go to state 257
    empty                          shift and go to state 256

state 225

    (58) expresionsig -> DIF r_pila_operadores_push_dif . expresion
    (55) expresion -> . exp r_pop_comp expresionsig
    (65) exp -> . termino r_pop_mas expciclo
    (69) termino -> . factor r_pop_mult factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID r_verifica_variable_existe r_pila_operandos_push opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 98
    ID              shift and go to state 97
    MAS             shift and go to state 106
    MENOS           shift and go to state 107
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    expresion                      shift and go to state 258
    exp                            shift and go to state 102
    termino                        shift and go to state 103
    factor                         shift and go to state 104
    masomenos                      shift and go to state 105
    empty                          shift and go to state 109

state 226

    (59) expresionsig -> IGUIGU r_pila_operadores_push_iguigu . expresion
    (55) expresion -> . exp r_pop_comp expresionsig
    (65) exp -> . termino r_pop_mas expciclo
    (69) termino -> . factor r_pop_mult factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID r_verifica_variable_existe r_pila_operandos_push opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 98
    ID              shift and go to state 97
    MAS             shift and go to state 106
    MENOS           shift and go to state 107
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    expresion                      shift and go to state 259
    exp                            shift and go to state 102
    termino                        shift and go to state 103
    factor                         shift and go to state 104
    masomenos                      shift and go to state 105
    empty                          shift and go to state 109

state 227

    (60) expresionsig -> AND r_pila_operadores_push_and . expresion
    (55) expresion -> . exp r_pop_comp expresionsig
    (65) exp -> . termino r_pop_mas expciclo
    (69) termino -> . factor r_pop_mult factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID r_verifica_variable_existe r_pila_operandos_push opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 98
    ID              shift and go to state 97
    MAS             shift and go to state 106
    MENOS           shift and go to state 107
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    expresion                      shift and go to state 260
    exp                            shift and go to state 102
    termino                        shift and go to state 103
    factor                         shift and go to state 104
    masomenos                      shift and go to state 105
    empty                          shift and go to state 109

state 228

    (61) expresionsig -> OR r_pila_operadores_push_or . expresion
    (55) expresion -> . exp r_pop_comp expresionsig
    (65) exp -> . termino r_pop_mas expciclo
    (69) termino -> . factor r_pop_mult factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID r_verifica_variable_existe r_pila_operandos_push opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 98
    ID              shift and go to state 97
    MAS             shift and go to state 106
    MENOS           shift and go to state 107
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    expresion                      shift and go to state 261
    exp                            shift and go to state 102
    termino                        shift and go to state 103
    factor                         shift and go to state 104
    masomenos                      shift and go to state 105
    empty                          shift and go to state 109

state 229

    (66) expciclo -> MAS r_pila_operadores_push_mas . exp
    (65) exp -> . termino r_pop_mas expciclo
    (69) termino -> . factor r_pop_mult factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID r_verifica_variable_existe r_pila_operandos_push opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 98
    ID              shift and go to state 97
    MAS             shift and go to state 106
    MENOS           shift and go to state 107
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    exp                            shift and go to state 262
    termino                        shift and go to state 103
    factor                         shift and go to state 104
    masomenos                      shift and go to state 105
    empty                          shift and go to state 109

state 230

    (67) expciclo -> MENOS r_pila_operadores_push_menos . exp
    (65) exp -> . termino r_pop_mas expciclo
    (69) termino -> . factor r_pop_mult factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID r_verifica_variable_existe r_pila_operandos_push opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 98
    ID              shift and go to state 97
    MAS             shift and go to state 106
    MENOS           shift and go to state 107
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    exp                            shift and go to state 263
    termino                        shift and go to state 103
    factor                         shift and go to state 104
    masomenos                      shift and go to state 105
    empty                          shift and go to state 109

state 231

    (70) factorciclo -> MULT r_pila_operadores_push_mult . termino
    (69) termino -> . factor r_pop_mult factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID r_verifica_variable_existe r_pila_operandos_push opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 98
    ID              shift and go to state 97
    MAS             shift and go to state 106
    MENOS           shift and go to state 107
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    termino                        shift and go to state 264
    factor                         shift and go to state 104
    masomenos                      shift and go to state 105
    empty                          shift and go to state 109

state 232

    (71) factorciclo -> DIV r_pila_operadores_push_div . termino
    (69) termino -> . factor r_pop_mult factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID r_verifica_variable_existe r_pila_operandos_push opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 98
    ID              shift and go to state 97
    MAS             shift and go to state 106
    MENOS           shift and go to state 107
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    termino                        shift and go to state 265
    factor                         shift and go to state 104
    masomenos                      shift and go to state 105
    empty                          shift and go to state 109

state 233

    (88) decision -> IF PARIZQ expresion PARDER r_if_paso_1 THEN . bloque ELSE r_if_paso_2 bloque r_if_paso_3
    (33) bloque -> . KEYIZQ bloqueopcion KEYDER

    KEYIZQ          shift and go to state 46

    bloque                         shift and go to state 266

state 234

    (89) escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM .

    ID              reduce using rule 89 (escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM .)
    IF              reduce using rule 89 (escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM .)
    WRITE           reduce using rule 89 (escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM .)
    READ            reduce using rule 89 (escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM .)
    WHILE           reduce using rule 89 (escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM .)
    FOR             reduce using rule 89 (escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM .)
    KEYDER          reduce using rule 89 (escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM .)
    RETURN          reduce using rule 89 (escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM .)


state 235

    (92) otro -> COMA escrituraciclo otro .

    PARDER          reduce using rule 92 (otro -> COMA escrituraciclo otro .)


state 236

    (95) lectura -> READ PARIZQ iddim ciclodim PARDER PTOCOM .

    ID              reduce using rule 95 (lectura -> READ PARIZQ iddim ciclodim PARDER PTOCOM .)
    IF              reduce using rule 95 (lectura -> READ PARIZQ iddim ciclodim PARDER PTOCOM .)
    WRITE           reduce using rule 95 (lectura -> READ PARIZQ iddim ciclodim PARDER PTOCOM .)
    READ            reduce using rule 95 (lectura -> READ PARIZQ iddim ciclodim PARDER PTOCOM .)
    WHILE           reduce using rule 95 (lectura -> READ PARIZQ iddim ciclodim PARDER PTOCOM .)
    FOR             reduce using rule 95 (lectura -> READ PARIZQ iddim ciclodim PARDER PTOCOM .)
    KEYDER          reduce using rule 95 (lectura -> READ PARIZQ iddim ciclodim PARDER PTOCOM .)
    RETURN          reduce using rule 95 (lectura -> READ PARIZQ iddim ciclodim PARDER PTOCOM .)


state 237

    (96) ciclodim -> COMA iddim ciclodim .

    PARDER          reduce using rule 96 (ciclodim -> COMA iddim ciclodim .)


state 238

    (103) condicional -> WHILE r_while_paso_1 PARIZQ expresion PARDER r_while_paso_2 . DO bloque r_while_paso_3

    DO              shift and go to state 267


state 239

    (104) nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion TO . r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2
    (123) r_pop_igu_for -> .

    PARIZQ          reduce using rule 123 (r_pop_igu_for -> .)
    ID              reduce using rule 123 (r_pop_igu_for -> .)
    MAS             reduce using rule 123 (r_pop_igu_for -> .)
    MENOS           reduce using rule 123 (r_pop_igu_for -> .)
    CTEI            reduce using rule 123 (r_pop_igu_for -> .)
    CTEF            reduce using rule 123 (r_pop_igu_for -> .)

    r_pop_igu_for                  shift and go to state 268

state 240

    (98) iddim -> ID r_verifica_variable_existe r_pila_operandos_push arrexp arrexp .

    IGU             reduce using rule 98 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push arrexp arrexp .)
    COMA            reduce using rule 98 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push arrexp arrexp .)
    PARDER          reduce using rule 98 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push arrexp arrexp .)
    MULT            reduce using rule 98 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push arrexp arrexp .)
    DIV             reduce using rule 98 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push arrexp arrexp .)
    MAS             reduce using rule 98 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push arrexp arrexp .)
    MENOS           reduce using rule 98 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push arrexp arrexp .)
    MAY             reduce using rule 98 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push arrexp arrexp .)
    MEN             reduce using rule 98 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push arrexp arrexp .)
    DIF             reduce using rule 98 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push arrexp arrexp .)
    IGUIGU          reduce using rule 98 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push arrexp arrexp .)
    AND             reduce using rule 98 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push arrexp arrexp .)
    OR              reduce using rule 98 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push arrexp arrexp .)
    CORDER          reduce using rule 98 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push arrexp arrexp .)
    TO              reduce using rule 98 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push arrexp arrexp .)
    PTOCOM          reduce using rule 98 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push arrexp arrexp .)
    DO              reduce using rule 98 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push arrexp arrexp .)


state 241

    (99) arrexp -> CORIZQ expresion . CORDER

    CORDER          shift and go to state 269


state 242

    (36) bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .

    VOID            reduce using rule 36 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    INT             reduce using rule 36 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    FLT             reduce using rule 36 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    CHAR            reduce using rule 36 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    MAIN            reduce using rule 36 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    ELSE            reduce using rule 36 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    RETURN          reduce using rule 36 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    ID              reduce using rule 36 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    IF              reduce using rule 36 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    WRITE           reduce using rule 36 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    READ            reduce using rule 36 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    WHILE           reduce using rule 36 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    FOR             reduce using rule 36 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    KEYDER          reduce using rule 36 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    KEYIZQ          reduce using rule 36 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)


state 243

    (37) bloqueopcionfunc -> estatutofunc bloqueopcionfunc .

    KEYDER          reduce using rule 37 (bloqueopcionfunc -> estatutofunc bloqueopcionfunc .)


state 244

    (51) estatutofunc -> RETURN PARIZQ . expresion PARDER PTOCOM
    (55) expresion -> . exp r_pop_comp expresionsig
    (65) exp -> . termino r_pop_mas expciclo
    (69) termino -> . factor r_pop_mult factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID r_verifica_variable_existe r_pila_operandos_push opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 98
    ID              shift and go to state 97
    MAS             shift and go to state 106
    MENOS           shift and go to state 107
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    expresion                      shift and go to state 270
    exp                            shift and go to state 102
    termino                        shift and go to state 103
    factor                         shift and go to state 104
    masomenos                      shift and go to state 105
    empty                          shift and go to state 109

state 245

    (105) decisionfunc -> IF PARIZQ . expresion PARDER THEN bloquefunc ELSE bloquefunc
    (55) expresion -> . exp r_pop_comp expresionsig
    (65) exp -> . termino r_pop_mas expciclo
    (69) termino -> . factor r_pop_mult factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID r_verifica_variable_existe r_pila_operandos_push opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 98
    ID              shift and go to state 97
    MAS             shift and go to state 106
    MENOS           shift and go to state 107
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    expresion                      shift and go to state 271
    exp                            shift and go to state 102
    termino                        shift and go to state 103
    factor                         shift and go to state 104
    masomenos                      shift and go to state 105
    empty                          shift and go to state 109

state 246

    (108) condicionalfunc -> WHILE PARIZQ . expresion PARDER DO bloquefunc
    (55) expresion -> . exp r_pop_comp expresionsig
    (65) exp -> . termino r_pop_mas expciclo
    (69) termino -> . factor r_pop_mult factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID r_verifica_variable_existe r_pila_operandos_push opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 98
    ID              shift and go to state 97
    MAS             shift and go to state 106
    MENOS           shift and go to state 107
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    expresion                      shift and go to state 272
    exp                            shift and go to state 102
    termino                        shift and go to state 103
    factor                         shift and go to state 104
    masomenos                      shift and go to state 105
    empty                          shift and go to state 109

state 247

    (109) nocondicionalfunc -> FOR iddim . IGU expresion TO expresion DO bloquefunc

    IGU             shift and go to state 273


state 248

    (13) opciontipo -> ID r_register_variable_name arr . arr varciclo PTOCOM tipociclo
    (9) arr -> . CORIZQ CTEI CORDER
    (10) arr -> . empty
    (110) empty -> .

    CORIZQ          shift and go to state 43
    COMA            reduce using rule 110 (empty -> .)
    PTOCOM          reduce using rule 110 (empty -> .)

    arr                            shift and go to state 274
    empty                          shift and go to state 44

state 249

    (14) opciontipo -> MODULE ID PARIZQ . opcionvarsimple PARDER opvars bloquefunc
    (25) opcionvarsimple -> . varsimple ciclovarsimple
    (26) opcionvarsimple -> . empty
    (21) varsimple -> . tipo ident
    (110) empty -> .
    (15) tipo -> . INT r_register_variable_type
    (16) tipo -> . FLT r_register_variable_type
    (17) tipo -> . CHAR r_register_variable_type

    PARDER          reduce using rule 110 (empty -> .)
    INT             shift and go to state 21
    FLT             shift and go to state 22
    CHAR            shift and go to state 23

    opcionvarsimple                shift and go to state 275
    varsimple                      shift and go to state 70
    empty                          shift and go to state 71
    tipo                           shift and go to state 72

state 250

    (7) varciclo -> COMA ID r_register_variable_name arr arr varciclo .

    PTOCOM          reduce using rule 7 (varciclo -> COMA ID r_register_variable_name arr arr varciclo .)


state 251

    (52) asignacion -> ID r_verifica_variable_existe r_pila_operandos_push asignacionarr asignacionarr IGU r_pila_operadores_push_igu . expresion r_pop_igu PTOCOM
    (55) expresion -> . exp r_pop_comp expresionsig
    (65) exp -> . termino r_pop_mas expciclo
    (69) termino -> . factor r_pop_mult factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID r_verifica_variable_existe r_pila_operandos_push opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 98
    ID              shift and go to state 97
    MAS             shift and go to state 106
    MENOS           shift and go to state 107
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    expresion                      shift and go to state 276
    exp                            shift and go to state 102
    termino                        shift and go to state 103
    factor                         shift and go to state 104
    masomenos                      shift and go to state 105
    empty                          shift and go to state 109

state 252

    (79) opcionid -> arrexp arrexp .

    MULT            reduce using rule 79 (opcionid -> arrexp arrexp .)
    DIV             reduce using rule 79 (opcionid -> arrexp arrexp .)
    MAS             reduce using rule 79 (opcionid -> arrexp arrexp .)
    MENOS           reduce using rule 79 (opcionid -> arrexp arrexp .)
    MAY             reduce using rule 79 (opcionid -> arrexp arrexp .)
    MEN             reduce using rule 79 (opcionid -> arrexp arrexp .)
    DIF             reduce using rule 79 (opcionid -> arrexp arrexp .)
    IGUIGU          reduce using rule 79 (opcionid -> arrexp arrexp .)
    AND             reduce using rule 79 (opcionid -> arrexp arrexp .)
    OR              reduce using rule 79 (opcionid -> arrexp arrexp .)
    COMA            reduce using rule 79 (opcionid -> arrexp arrexp .)
    PARDER          reduce using rule 79 (opcionid -> arrexp arrexp .)
    CORDER          reduce using rule 79 (opcionid -> arrexp arrexp .)
    TO              reduce using rule 79 (opcionid -> arrexp arrexp .)
    PTOCOM          reduce using rule 79 (opcionid -> arrexp arrexp .)
    DO              reduce using rule 79 (opcionid -> arrexp arrexp .)


state 253

    (80) opcionid -> PARIZQ parametros . PARDER

    PARDER          shift and go to state 277


state 254

    (56) expresionsig -> MAY r_pila_operadores_push_may expresionsigequal . expresion
    (55) expresion -> . exp r_pop_comp expresionsig
    (65) exp -> . termino r_pop_mas expciclo
    (69) termino -> . factor r_pop_mult factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID r_verifica_variable_existe r_pila_operandos_push opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 98
    ID              shift and go to state 97
    MAS             shift and go to state 106
    MENOS           shift and go to state 107
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    expresion                      shift and go to state 278
    exp                            shift and go to state 102
    termino                        shift and go to state 103
    factor                         shift and go to state 104
    masomenos                      shift and go to state 105
    empty                          shift and go to state 109

state 255

    (63) expresionsigequal -> IGU .

    PARIZQ          reduce using rule 63 (expresionsigequal -> IGU .)
    ID              reduce using rule 63 (expresionsigequal -> IGU .)
    MAS             reduce using rule 63 (expresionsigequal -> IGU .)
    MENOS           reduce using rule 63 (expresionsigequal -> IGU .)
    CTEI            reduce using rule 63 (expresionsigequal -> IGU .)
    CTEF            reduce using rule 63 (expresionsigequal -> IGU .)


state 256

    (64) expresionsigequal -> empty .

    PARIZQ          reduce using rule 64 (expresionsigequal -> empty .)
    ID              reduce using rule 64 (expresionsigequal -> empty .)
    MAS             reduce using rule 64 (expresionsigequal -> empty .)
    MENOS           reduce using rule 64 (expresionsigequal -> empty .)
    CTEI            reduce using rule 64 (expresionsigequal -> empty .)
    CTEF            reduce using rule 64 (expresionsigequal -> empty .)


state 257

    (57) expresionsig -> MEN r_pila_operadores_push_men expresionsigequal . expresion
    (55) expresion -> . exp r_pop_comp expresionsig
    (65) exp -> . termino r_pop_mas expciclo
    (69) termino -> . factor r_pop_mult factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID r_verifica_variable_existe r_pila_operandos_push opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 98
    ID              shift and go to state 97
    MAS             shift and go to state 106
    MENOS           shift and go to state 107
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    expresion                      shift and go to state 279
    exp                            shift and go to state 102
    termino                        shift and go to state 103
    factor                         shift and go to state 104
    masomenos                      shift and go to state 105
    empty                          shift and go to state 109

state 258

    (58) expresionsig -> DIF r_pila_operadores_push_dif expresion .

    COMA            reduce using rule 58 (expresionsig -> DIF r_pila_operadores_push_dif expresion .)
    PARDER          reduce using rule 58 (expresionsig -> DIF r_pila_operadores_push_dif expresion .)
    CORDER          reduce using rule 58 (expresionsig -> DIF r_pila_operadores_push_dif expresion .)
    TO              reduce using rule 58 (expresionsig -> DIF r_pila_operadores_push_dif expresion .)
    PTOCOM          reduce using rule 58 (expresionsig -> DIF r_pila_operadores_push_dif expresion .)
    DO              reduce using rule 58 (expresionsig -> DIF r_pila_operadores_push_dif expresion .)


state 259

    (59) expresionsig -> IGUIGU r_pila_operadores_push_iguigu expresion .

    COMA            reduce using rule 59 (expresionsig -> IGUIGU r_pila_operadores_push_iguigu expresion .)
    PARDER          reduce using rule 59 (expresionsig -> IGUIGU r_pila_operadores_push_iguigu expresion .)
    CORDER          reduce using rule 59 (expresionsig -> IGUIGU r_pila_operadores_push_iguigu expresion .)
    TO              reduce using rule 59 (expresionsig -> IGUIGU r_pila_operadores_push_iguigu expresion .)
    PTOCOM          reduce using rule 59 (expresionsig -> IGUIGU r_pila_operadores_push_iguigu expresion .)
    DO              reduce using rule 59 (expresionsig -> IGUIGU r_pila_operadores_push_iguigu expresion .)


state 260

    (60) expresionsig -> AND r_pila_operadores_push_and expresion .

    COMA            reduce using rule 60 (expresionsig -> AND r_pila_operadores_push_and expresion .)
    PARDER          reduce using rule 60 (expresionsig -> AND r_pila_operadores_push_and expresion .)
    CORDER          reduce using rule 60 (expresionsig -> AND r_pila_operadores_push_and expresion .)
    TO              reduce using rule 60 (expresionsig -> AND r_pila_operadores_push_and expresion .)
    PTOCOM          reduce using rule 60 (expresionsig -> AND r_pila_operadores_push_and expresion .)
    DO              reduce using rule 60 (expresionsig -> AND r_pila_operadores_push_and expresion .)


state 261

    (61) expresionsig -> OR r_pila_operadores_push_or expresion .

    COMA            reduce using rule 61 (expresionsig -> OR r_pila_operadores_push_or expresion .)
    PARDER          reduce using rule 61 (expresionsig -> OR r_pila_operadores_push_or expresion .)
    CORDER          reduce using rule 61 (expresionsig -> OR r_pila_operadores_push_or expresion .)
    TO              reduce using rule 61 (expresionsig -> OR r_pila_operadores_push_or expresion .)
    PTOCOM          reduce using rule 61 (expresionsig -> OR r_pila_operadores_push_or expresion .)
    DO              reduce using rule 61 (expresionsig -> OR r_pila_operadores_push_or expresion .)


state 262

    (66) expciclo -> MAS r_pila_operadores_push_mas exp .

    MAY             reduce using rule 66 (expciclo -> MAS r_pila_operadores_push_mas exp .)
    MEN             reduce using rule 66 (expciclo -> MAS r_pila_operadores_push_mas exp .)
    DIF             reduce using rule 66 (expciclo -> MAS r_pila_operadores_push_mas exp .)
    IGUIGU          reduce using rule 66 (expciclo -> MAS r_pila_operadores_push_mas exp .)
    AND             reduce using rule 66 (expciclo -> MAS r_pila_operadores_push_mas exp .)
    OR              reduce using rule 66 (expciclo -> MAS r_pila_operadores_push_mas exp .)
    COMA            reduce using rule 66 (expciclo -> MAS r_pila_operadores_push_mas exp .)
    PARDER          reduce using rule 66 (expciclo -> MAS r_pila_operadores_push_mas exp .)
    CORDER          reduce using rule 66 (expciclo -> MAS r_pila_operadores_push_mas exp .)
    TO              reduce using rule 66 (expciclo -> MAS r_pila_operadores_push_mas exp .)
    PTOCOM          reduce using rule 66 (expciclo -> MAS r_pila_operadores_push_mas exp .)
    DO              reduce using rule 66 (expciclo -> MAS r_pila_operadores_push_mas exp .)


state 263

    (67) expciclo -> MENOS r_pila_operadores_push_menos exp .

    MAY             reduce using rule 67 (expciclo -> MENOS r_pila_operadores_push_menos exp .)
    MEN             reduce using rule 67 (expciclo -> MENOS r_pila_operadores_push_menos exp .)
    DIF             reduce using rule 67 (expciclo -> MENOS r_pila_operadores_push_menos exp .)
    IGUIGU          reduce using rule 67 (expciclo -> MENOS r_pila_operadores_push_menos exp .)
    AND             reduce using rule 67 (expciclo -> MENOS r_pila_operadores_push_menos exp .)
    OR              reduce using rule 67 (expciclo -> MENOS r_pila_operadores_push_menos exp .)
    COMA            reduce using rule 67 (expciclo -> MENOS r_pila_operadores_push_menos exp .)
    PARDER          reduce using rule 67 (expciclo -> MENOS r_pila_operadores_push_menos exp .)
    CORDER          reduce using rule 67 (expciclo -> MENOS r_pila_operadores_push_menos exp .)
    TO              reduce using rule 67 (expciclo -> MENOS r_pila_operadores_push_menos exp .)
    PTOCOM          reduce using rule 67 (expciclo -> MENOS r_pila_operadores_push_menos exp .)
    DO              reduce using rule 67 (expciclo -> MENOS r_pila_operadores_push_menos exp .)


state 264

    (70) factorciclo -> MULT r_pila_operadores_push_mult termino .

    MAS             reduce using rule 70 (factorciclo -> MULT r_pila_operadores_push_mult termino .)
    MENOS           reduce using rule 70 (factorciclo -> MULT r_pila_operadores_push_mult termino .)
    MAY             reduce using rule 70 (factorciclo -> MULT r_pila_operadores_push_mult termino .)
    MEN             reduce using rule 70 (factorciclo -> MULT r_pila_operadores_push_mult termino .)
    DIF             reduce using rule 70 (factorciclo -> MULT r_pila_operadores_push_mult termino .)
    IGUIGU          reduce using rule 70 (factorciclo -> MULT r_pila_operadores_push_mult termino .)
    AND             reduce using rule 70 (factorciclo -> MULT r_pila_operadores_push_mult termino .)
    OR              reduce using rule 70 (factorciclo -> MULT r_pila_operadores_push_mult termino .)
    COMA            reduce using rule 70 (factorciclo -> MULT r_pila_operadores_push_mult termino .)
    PARDER          reduce using rule 70 (factorciclo -> MULT r_pila_operadores_push_mult termino .)
    CORDER          reduce using rule 70 (factorciclo -> MULT r_pila_operadores_push_mult termino .)
    TO              reduce using rule 70 (factorciclo -> MULT r_pila_operadores_push_mult termino .)
    PTOCOM          reduce using rule 70 (factorciclo -> MULT r_pila_operadores_push_mult termino .)
    DO              reduce using rule 70 (factorciclo -> MULT r_pila_operadores_push_mult termino .)


state 265

    (71) factorciclo -> DIV r_pila_operadores_push_div termino .

    MAS             reduce using rule 71 (factorciclo -> DIV r_pila_operadores_push_div termino .)
    MENOS           reduce using rule 71 (factorciclo -> DIV r_pila_operadores_push_div termino .)
    MAY             reduce using rule 71 (factorciclo -> DIV r_pila_operadores_push_div termino .)
    MEN             reduce using rule 71 (factorciclo -> DIV r_pila_operadores_push_div termino .)
    DIF             reduce using rule 71 (factorciclo -> DIV r_pila_operadores_push_div termino .)
    IGUIGU          reduce using rule 71 (factorciclo -> DIV r_pila_operadores_push_div termino .)
    AND             reduce using rule 71 (factorciclo -> DIV r_pila_operadores_push_div termino .)
    OR              reduce using rule 71 (factorciclo -> DIV r_pila_operadores_push_div termino .)
    COMA            reduce using rule 71 (factorciclo -> DIV r_pila_operadores_push_div termino .)
    PARDER          reduce using rule 71 (factorciclo -> DIV r_pila_operadores_push_div termino .)
    CORDER          reduce using rule 71 (factorciclo -> DIV r_pila_operadores_push_div termino .)
    TO              reduce using rule 71 (factorciclo -> DIV r_pila_operadores_push_div termino .)
    PTOCOM          reduce using rule 71 (factorciclo -> DIV r_pila_operadores_push_div termino .)
    DO              reduce using rule 71 (factorciclo -> DIV r_pila_operadores_push_div termino .)


state 266

    (88) decision -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloque . ELSE r_if_paso_2 bloque r_if_paso_3

    ELSE            shift and go to state 280


state 267

    (103) condicional -> WHILE r_while_paso_1 PARIZQ expresion PARDER r_while_paso_2 DO . bloque r_while_paso_3
    (33) bloque -> . KEYIZQ bloqueopcion KEYDER

    KEYIZQ          shift and go to state 46

    bloque                         shift and go to state 281

state 268

    (104) nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for . expresion r_for_paso_1 DO bloque r_for_paso_2
    (55) expresion -> . exp r_pop_comp expresionsig
    (65) exp -> . termino r_pop_mas expciclo
    (69) termino -> . factor r_pop_mult factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID r_verifica_variable_existe r_pila_operandos_push opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 98
    ID              shift and go to state 97
    MAS             shift and go to state 106
    MENOS           shift and go to state 107
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    expresion                      shift and go to state 282
    exp                            shift and go to state 102
    termino                        shift and go to state 103
    factor                         shift and go to state 104
    masomenos                      shift and go to state 105
    empty                          shift and go to state 109

state 269

    (99) arrexp -> CORIZQ expresion CORDER .

    CORIZQ          reduce using rule 99 (arrexp -> CORIZQ expresion CORDER .)
    IGU             reduce using rule 99 (arrexp -> CORIZQ expresion CORDER .)
    COMA            reduce using rule 99 (arrexp -> CORIZQ expresion CORDER .)
    PARDER          reduce using rule 99 (arrexp -> CORIZQ expresion CORDER .)
    MULT            reduce using rule 99 (arrexp -> CORIZQ expresion CORDER .)
    DIV             reduce using rule 99 (arrexp -> CORIZQ expresion CORDER .)
    MAS             reduce using rule 99 (arrexp -> CORIZQ expresion CORDER .)
    MENOS           reduce using rule 99 (arrexp -> CORIZQ expresion CORDER .)
    MAY             reduce using rule 99 (arrexp -> CORIZQ expresion CORDER .)
    MEN             reduce using rule 99 (arrexp -> CORIZQ expresion CORDER .)
    DIF             reduce using rule 99 (arrexp -> CORIZQ expresion CORDER .)
    IGUIGU          reduce using rule 99 (arrexp -> CORIZQ expresion CORDER .)
    AND             reduce using rule 99 (arrexp -> CORIZQ expresion CORDER .)
    OR              reduce using rule 99 (arrexp -> CORIZQ expresion CORDER .)
    CORDER          reduce using rule 99 (arrexp -> CORIZQ expresion CORDER .)
    TO              reduce using rule 99 (arrexp -> CORIZQ expresion CORDER .)
    PTOCOM          reduce using rule 99 (arrexp -> CORIZQ expresion CORDER .)
    DO              reduce using rule 99 (arrexp -> CORIZQ expresion CORDER .)


state 270

    (51) estatutofunc -> RETURN PARIZQ expresion . PARDER PTOCOM

    PARDER          shift and go to state 283


state 271

    (105) decisionfunc -> IF PARIZQ expresion . PARDER THEN bloquefunc ELSE bloquefunc

    PARDER          shift and go to state 284


state 272

    (108) condicionalfunc -> WHILE PARIZQ expresion . PARDER DO bloquefunc

    PARDER          shift and go to state 285


state 273

    (109) nocondicionalfunc -> FOR iddim IGU . expresion TO expresion DO bloquefunc
    (55) expresion -> . exp r_pop_comp expresionsig
    (65) exp -> . termino r_pop_mas expciclo
    (69) termino -> . factor r_pop_mult factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID r_verifica_variable_existe r_pila_operandos_push opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 98
    ID              shift and go to state 97
    MAS             shift and go to state 106
    MENOS           shift and go to state 107
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    expresion                      shift and go to state 286
    exp                            shift and go to state 102
    termino                        shift and go to state 103
    factor                         shift and go to state 104
    masomenos                      shift and go to state 105
    empty                          shift and go to state 109

state 274

    (13) opciontipo -> ID r_register_variable_name arr arr . varciclo PTOCOM tipociclo
    (7) varciclo -> . COMA ID r_register_variable_name arr arr varciclo
    (8) varciclo -> . empty
    (110) empty -> .

    COMA            shift and go to state 74
    PTOCOM          reduce using rule 110 (empty -> .)

    varciclo                       shift and go to state 287
    empty                          shift and go to state 75

state 275

    (14) opciontipo -> MODULE ID PARIZQ opcionvarsimple . PARDER opvars bloquefunc

    PARDER          shift and go to state 288


state 276

    (52) asignacion -> ID r_verifica_variable_existe r_pila_operandos_push asignacionarr asignacionarr IGU r_pila_operadores_push_igu expresion . r_pop_igu PTOCOM
    (132) r_pop_igu -> .

    PTOCOM          reduce using rule 132 (r_pop_igu -> .)

    r_pop_igu                      shift and go to state 289

state 277

    (80) opcionid -> PARIZQ parametros PARDER .

    MULT            reduce using rule 80 (opcionid -> PARIZQ parametros PARDER .)
    DIV             reduce using rule 80 (opcionid -> PARIZQ parametros PARDER .)
    MAS             reduce using rule 80 (opcionid -> PARIZQ parametros PARDER .)
    MENOS           reduce using rule 80 (opcionid -> PARIZQ parametros PARDER .)
    MAY             reduce using rule 80 (opcionid -> PARIZQ parametros PARDER .)
    MEN             reduce using rule 80 (opcionid -> PARIZQ parametros PARDER .)
    DIF             reduce using rule 80 (opcionid -> PARIZQ parametros PARDER .)
    IGUIGU          reduce using rule 80 (opcionid -> PARIZQ parametros PARDER .)
    AND             reduce using rule 80 (opcionid -> PARIZQ parametros PARDER .)
    OR              reduce using rule 80 (opcionid -> PARIZQ parametros PARDER .)
    COMA            reduce using rule 80 (opcionid -> PARIZQ parametros PARDER .)
    PARDER          reduce using rule 80 (opcionid -> PARIZQ parametros PARDER .)
    CORDER          reduce using rule 80 (opcionid -> PARIZQ parametros PARDER .)
    TO              reduce using rule 80 (opcionid -> PARIZQ parametros PARDER .)
    PTOCOM          reduce using rule 80 (opcionid -> PARIZQ parametros PARDER .)
    DO              reduce using rule 80 (opcionid -> PARIZQ parametros PARDER .)


state 278

    (56) expresionsig -> MAY r_pila_operadores_push_may expresionsigequal expresion .

    COMA            reduce using rule 56 (expresionsig -> MAY r_pila_operadores_push_may expresionsigequal expresion .)
    PARDER          reduce using rule 56 (expresionsig -> MAY r_pila_operadores_push_may expresionsigequal expresion .)
    CORDER          reduce using rule 56 (expresionsig -> MAY r_pila_operadores_push_may expresionsigequal expresion .)
    TO              reduce using rule 56 (expresionsig -> MAY r_pila_operadores_push_may expresionsigequal expresion .)
    PTOCOM          reduce using rule 56 (expresionsig -> MAY r_pila_operadores_push_may expresionsigequal expresion .)
    DO              reduce using rule 56 (expresionsig -> MAY r_pila_operadores_push_may expresionsigequal expresion .)


state 279

    (57) expresionsig -> MEN r_pila_operadores_push_men expresionsigequal expresion .

    COMA            reduce using rule 57 (expresionsig -> MEN r_pila_operadores_push_men expresionsigequal expresion .)
    PARDER          reduce using rule 57 (expresionsig -> MEN r_pila_operadores_push_men expresionsigequal expresion .)
    CORDER          reduce using rule 57 (expresionsig -> MEN r_pila_operadores_push_men expresionsigequal expresion .)
    TO              reduce using rule 57 (expresionsig -> MEN r_pila_operadores_push_men expresionsigequal expresion .)
    PTOCOM          reduce using rule 57 (expresionsig -> MEN r_pila_operadores_push_men expresionsigequal expresion .)
    DO              reduce using rule 57 (expresionsig -> MEN r_pila_operadores_push_men expresionsigequal expresion .)


state 280

    (88) decision -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloque ELSE . r_if_paso_2 bloque r_if_paso_3
    (118) r_if_paso_2 -> .

    KEYIZQ          reduce using rule 118 (r_if_paso_2 -> .)

    r_if_paso_2                    shift and go to state 290

state 281

    (103) condicional -> WHILE r_while_paso_1 PARIZQ expresion PARDER r_while_paso_2 DO bloque . r_while_paso_3
    (122) r_while_paso_3 -> .

    ID              reduce using rule 122 (r_while_paso_3 -> .)
    IF              reduce using rule 122 (r_while_paso_3 -> .)
    WRITE           reduce using rule 122 (r_while_paso_3 -> .)
    READ            reduce using rule 122 (r_while_paso_3 -> .)
    WHILE           reduce using rule 122 (r_while_paso_3 -> .)
    FOR             reduce using rule 122 (r_while_paso_3 -> .)
    KEYDER          reduce using rule 122 (r_while_paso_3 -> .)

    r_while_paso_3                 shift and go to state 291

state 282

    (104) nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion . r_for_paso_1 DO bloque r_for_paso_2
    (124) r_for_paso_1 -> .

    DO              reduce using rule 124 (r_for_paso_1 -> .)

    r_for_paso_1                   shift and go to state 292

state 283

    (51) estatutofunc -> RETURN PARIZQ expresion PARDER . PTOCOM

    PTOCOM          shift and go to state 293


state 284

    (105) decisionfunc -> IF PARIZQ expresion PARDER . THEN bloquefunc ELSE bloquefunc

    THEN            shift and go to state 294


state 285

    (108) condicionalfunc -> WHILE PARIZQ expresion PARDER . DO bloquefunc

    DO              shift and go to state 295


state 286

    (109) nocondicionalfunc -> FOR iddim IGU expresion . TO expresion DO bloquefunc

    TO              shift and go to state 296


state 287

    (13) opciontipo -> ID r_register_variable_name arr arr varciclo . PTOCOM tipociclo

    PTOCOM          shift and go to state 297


state 288

    (14) opciontipo -> MODULE ID PARIZQ opcionvarsimple PARDER . opvars bloquefunc
    (2) opvars -> . vars
    (3) opvars -> . empty
    (6) vars -> . VARTOKEN tipo ID r_register_variable_name arr arr varciclo PTOCOM tipociclo
    (110) empty -> .

    VARTOKEN        shift and go to state 9
    KEYIZQ          reduce using rule 110 (empty -> .)

    opvars                         shift and go to state 298
    vars                           shift and go to state 7
    empty                          shift and go to state 8

state 289

    (52) asignacion -> ID r_verifica_variable_existe r_pila_operandos_push asignacionarr asignacionarr IGU r_pila_operadores_push_igu expresion r_pop_igu . PTOCOM

    PTOCOM          shift and go to state 299


state 290

    (88) decision -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloque ELSE r_if_paso_2 . bloque r_if_paso_3
    (33) bloque -> . KEYIZQ bloqueopcion KEYDER

    KEYIZQ          shift and go to state 46

    bloque                         shift and go to state 300

state 291

    (103) condicional -> WHILE r_while_paso_1 PARIZQ expresion PARDER r_while_paso_2 DO bloque r_while_paso_3 .

    ID              reduce using rule 103 (condicional -> WHILE r_while_paso_1 PARIZQ expresion PARDER r_while_paso_2 DO bloque r_while_paso_3 .)
    IF              reduce using rule 103 (condicional -> WHILE r_while_paso_1 PARIZQ expresion PARDER r_while_paso_2 DO bloque r_while_paso_3 .)
    WRITE           reduce using rule 103 (condicional -> WHILE r_while_paso_1 PARIZQ expresion PARDER r_while_paso_2 DO bloque r_while_paso_3 .)
    READ            reduce using rule 103 (condicional -> WHILE r_while_paso_1 PARIZQ expresion PARDER r_while_paso_2 DO bloque r_while_paso_3 .)
    WHILE           reduce using rule 103 (condicional -> WHILE r_while_paso_1 PARIZQ expresion PARDER r_while_paso_2 DO bloque r_while_paso_3 .)
    FOR             reduce using rule 103 (condicional -> WHILE r_while_paso_1 PARIZQ expresion PARDER r_while_paso_2 DO bloque r_while_paso_3 .)
    KEYDER          reduce using rule 103 (condicional -> WHILE r_while_paso_1 PARIZQ expresion PARDER r_while_paso_2 DO bloque r_while_paso_3 .)


state 292

    (104) nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 . DO bloque r_for_paso_2

    DO              shift and go to state 301


state 293

    (51) estatutofunc -> RETURN PARIZQ expresion PARDER PTOCOM .

    RETURN          reduce using rule 51 (estatutofunc -> RETURN PARIZQ expresion PARDER PTOCOM .)
    ID              reduce using rule 51 (estatutofunc -> RETURN PARIZQ expresion PARDER PTOCOM .)
    IF              reduce using rule 51 (estatutofunc -> RETURN PARIZQ expresion PARDER PTOCOM .)
    WRITE           reduce using rule 51 (estatutofunc -> RETURN PARIZQ expresion PARDER PTOCOM .)
    READ            reduce using rule 51 (estatutofunc -> RETURN PARIZQ expresion PARDER PTOCOM .)
    WHILE           reduce using rule 51 (estatutofunc -> RETURN PARIZQ expresion PARDER PTOCOM .)
    FOR             reduce using rule 51 (estatutofunc -> RETURN PARIZQ expresion PARDER PTOCOM .)
    KEYDER          reduce using rule 51 (estatutofunc -> RETURN PARIZQ expresion PARDER PTOCOM .)


state 294

    (105) decisionfunc -> IF PARIZQ expresion PARDER THEN . bloquefunc ELSE bloquefunc
    (36) bloquefunc -> . KEYIZQ bloqueopcionfunc KEYDER

    KEYIZQ          shift and go to state 153

    bloquefunc                     shift and go to state 302

state 295

    (108) condicionalfunc -> WHILE PARIZQ expresion PARDER DO . bloquefunc
    (36) bloquefunc -> . KEYIZQ bloqueopcionfunc KEYDER

    KEYIZQ          shift and go to state 153

    bloquefunc                     shift and go to state 303

state 296

    (109) nocondicionalfunc -> FOR iddim IGU expresion TO . expresion DO bloquefunc
    (55) expresion -> . exp r_pop_comp expresionsig
    (65) exp -> . termino r_pop_mas expciclo
    (69) termino -> . factor r_pop_mult factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID r_verifica_variable_existe r_pila_operandos_push opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 98
    ID              shift and go to state 97
    MAS             shift and go to state 106
    MENOS           shift and go to state 107
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    expresion                      shift and go to state 304
    exp                            shift and go to state 102
    termino                        shift and go to state 103
    factor                         shift and go to state 104
    masomenos                      shift and go to state 105
    empty                          shift and go to state 109

state 297

    (13) opciontipo -> ID r_register_variable_name arr arr varciclo PTOCOM . tipociclo
    (11) tipociclo -> . tipo opciontipo
    (12) tipociclo -> . empty
    (15) tipo -> . INT r_register_variable_type
    (16) tipo -> . FLT r_register_variable_type
    (17) tipo -> . CHAR r_register_variable_type
    (110) empty -> .

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    INT             shift and go to state 21
    FLT             shift and go to state 22
    CHAR            shift and go to state 23
    VOID            reduce using rule 110 (empty -> .)
    MAIN            reduce using rule 110 (empty -> .)
    KEYIZQ          reduce using rule 110 (empty -> .)

  ! INT             [ reduce using rule 110 (empty -> .) ]
  ! FLT             [ reduce using rule 110 (empty -> .) ]
  ! CHAR            [ reduce using rule 110 (empty -> .) ]

    tipociclo                      shift and go to state 305
    tipo                           shift and go to state 121
    empty                          shift and go to state 123

state 298

    (14) opciontipo -> MODULE ID PARIZQ opcionvarsimple PARDER opvars . bloquefunc
    (36) bloquefunc -> . KEYIZQ bloqueopcionfunc KEYDER

    KEYIZQ          shift and go to state 153

    bloquefunc                     shift and go to state 306

state 299

    (52) asignacion -> ID r_verifica_variable_existe r_pila_operandos_push asignacionarr asignacionarr IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM .

    ID              reduce using rule 52 (asignacion -> ID r_verifica_variable_existe r_pila_operandos_push asignacionarr asignacionarr IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM .)
    IF              reduce using rule 52 (asignacion -> ID r_verifica_variable_existe r_pila_operandos_push asignacionarr asignacionarr IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM .)
    WRITE           reduce using rule 52 (asignacion -> ID r_verifica_variable_existe r_pila_operandos_push asignacionarr asignacionarr IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM .)
    READ            reduce using rule 52 (asignacion -> ID r_verifica_variable_existe r_pila_operandos_push asignacionarr asignacionarr IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM .)
    WHILE           reduce using rule 52 (asignacion -> ID r_verifica_variable_existe r_pila_operandos_push asignacionarr asignacionarr IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM .)
    FOR             reduce using rule 52 (asignacion -> ID r_verifica_variable_existe r_pila_operandos_push asignacionarr asignacionarr IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM .)
    KEYDER          reduce using rule 52 (asignacion -> ID r_verifica_variable_existe r_pila_operandos_push asignacionarr asignacionarr IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM .)
    RETURN          reduce using rule 52 (asignacion -> ID r_verifica_variable_existe r_pila_operandos_push asignacionarr asignacionarr IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM .)


state 300

    (88) decision -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloque ELSE r_if_paso_2 bloque . r_if_paso_3
    (119) r_if_paso_3 -> .

    ID              reduce using rule 119 (r_if_paso_3 -> .)
    IF              reduce using rule 119 (r_if_paso_3 -> .)
    WRITE           reduce using rule 119 (r_if_paso_3 -> .)
    READ            reduce using rule 119 (r_if_paso_3 -> .)
    WHILE           reduce using rule 119 (r_if_paso_3 -> .)
    FOR             reduce using rule 119 (r_if_paso_3 -> .)
    KEYDER          reduce using rule 119 (r_if_paso_3 -> .)

    r_if_paso_3                    shift and go to state 307

state 301

    (104) nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO . bloque r_for_paso_2
    (33) bloque -> . KEYIZQ bloqueopcion KEYDER

    KEYIZQ          shift and go to state 46

    bloque                         shift and go to state 308

state 302

    (105) decisionfunc -> IF PARIZQ expresion PARDER THEN bloquefunc . ELSE bloquefunc

    ELSE            shift and go to state 309


state 303

    (108) condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc .

    RETURN          reduce using rule 108 (condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc .)
    ID              reduce using rule 108 (condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc .)
    IF              reduce using rule 108 (condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc .)
    WRITE           reduce using rule 108 (condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc .)
    READ            reduce using rule 108 (condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc .)
    WHILE           reduce using rule 108 (condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc .)
    FOR             reduce using rule 108 (condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc .)
    KEYDER          reduce using rule 108 (condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc .)


state 304

    (109) nocondicionalfunc -> FOR iddim IGU expresion TO expresion . DO bloquefunc

    DO              shift and go to state 310


state 305

    (13) opciontipo -> ID r_register_variable_name arr arr varciclo PTOCOM tipociclo .

    VOID            reduce using rule 13 (opciontipo -> ID r_register_variable_name arr arr varciclo PTOCOM tipociclo .)
    INT             reduce using rule 13 (opciontipo -> ID r_register_variable_name arr arr varciclo PTOCOM tipociclo .)
    FLT             reduce using rule 13 (opciontipo -> ID r_register_variable_name arr arr varciclo PTOCOM tipociclo .)
    CHAR            reduce using rule 13 (opciontipo -> ID r_register_variable_name arr arr varciclo PTOCOM tipociclo .)
    MAIN            reduce using rule 13 (opciontipo -> ID r_register_variable_name arr arr varciclo PTOCOM tipociclo .)
    KEYIZQ          reduce using rule 13 (opciontipo -> ID r_register_variable_name arr arr varciclo PTOCOM tipociclo .)


state 306

    (14) opciontipo -> MODULE ID PARIZQ opcionvarsimple PARDER opvars bloquefunc .

    VOID            reduce using rule 14 (opciontipo -> MODULE ID PARIZQ opcionvarsimple PARDER opvars bloquefunc .)
    INT             reduce using rule 14 (opciontipo -> MODULE ID PARIZQ opcionvarsimple PARDER opvars bloquefunc .)
    FLT             reduce using rule 14 (opciontipo -> MODULE ID PARIZQ opcionvarsimple PARDER opvars bloquefunc .)
    CHAR            reduce using rule 14 (opciontipo -> MODULE ID PARIZQ opcionvarsimple PARDER opvars bloquefunc .)
    MAIN            reduce using rule 14 (opciontipo -> MODULE ID PARIZQ opcionvarsimple PARDER opvars bloquefunc .)
    KEYIZQ          reduce using rule 14 (opciontipo -> MODULE ID PARIZQ opcionvarsimple PARDER opvars bloquefunc .)


state 307

    (88) decision -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloque ELSE r_if_paso_2 bloque r_if_paso_3 .

    ID              reduce using rule 88 (decision -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloque ELSE r_if_paso_2 bloque r_if_paso_3 .)
    IF              reduce using rule 88 (decision -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloque ELSE r_if_paso_2 bloque r_if_paso_3 .)
    WRITE           reduce using rule 88 (decision -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloque ELSE r_if_paso_2 bloque r_if_paso_3 .)
    READ            reduce using rule 88 (decision -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloque ELSE r_if_paso_2 bloque r_if_paso_3 .)
    WHILE           reduce using rule 88 (decision -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloque ELSE r_if_paso_2 bloque r_if_paso_3 .)
    FOR             reduce using rule 88 (decision -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloque ELSE r_if_paso_2 bloque r_if_paso_3 .)
    KEYDER          reduce using rule 88 (decision -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloque ELSE r_if_paso_2 bloque r_if_paso_3 .)


state 308

    (104) nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque . r_for_paso_2
    (125) r_for_paso_2 -> .

    ID              reduce using rule 125 (r_for_paso_2 -> .)
    IF              reduce using rule 125 (r_for_paso_2 -> .)
    WRITE           reduce using rule 125 (r_for_paso_2 -> .)
    READ            reduce using rule 125 (r_for_paso_2 -> .)
    WHILE           reduce using rule 125 (r_for_paso_2 -> .)
    FOR             reduce using rule 125 (r_for_paso_2 -> .)
    KEYDER          reduce using rule 125 (r_for_paso_2 -> .)

    r_for_paso_2                   shift and go to state 311

state 309

    (105) decisionfunc -> IF PARIZQ expresion PARDER THEN bloquefunc ELSE . bloquefunc
    (36) bloquefunc -> . KEYIZQ bloqueopcionfunc KEYDER

    KEYIZQ          shift and go to state 153

    bloquefunc                     shift and go to state 312

state 310

    (109) nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO . bloquefunc
    (36) bloquefunc -> . KEYIZQ bloqueopcionfunc KEYDER

    KEYIZQ          shift and go to state 153

    bloquefunc                     shift and go to state 313

state 311

    (104) nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2 .

    ID              reduce using rule 104 (nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2 .)
    IF              reduce using rule 104 (nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2 .)
    WRITE           reduce using rule 104 (nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2 .)
    READ            reduce using rule 104 (nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2 .)
    WHILE           reduce using rule 104 (nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2 .)
    FOR             reduce using rule 104 (nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2 .)
    KEYDER          reduce using rule 104 (nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2 .)


state 312

    (105) decisionfunc -> IF PARIZQ expresion PARDER THEN bloquefunc ELSE bloquefunc .

    RETURN          reduce using rule 105 (decisionfunc -> IF PARIZQ expresion PARDER THEN bloquefunc ELSE bloquefunc .)
    ID              reduce using rule 105 (decisionfunc -> IF PARIZQ expresion PARDER THEN bloquefunc ELSE bloquefunc .)
    IF              reduce using rule 105 (decisionfunc -> IF PARIZQ expresion PARDER THEN bloquefunc ELSE bloquefunc .)
    WRITE           reduce using rule 105 (decisionfunc -> IF PARIZQ expresion PARDER THEN bloquefunc ELSE bloquefunc .)
    READ            reduce using rule 105 (decisionfunc -> IF PARIZQ expresion PARDER THEN bloquefunc ELSE bloquefunc .)
    WHILE           reduce using rule 105 (decisionfunc -> IF PARIZQ expresion PARDER THEN bloquefunc ELSE bloquefunc .)
    FOR             reduce using rule 105 (decisionfunc -> IF PARIZQ expresion PARDER THEN bloquefunc ELSE bloquefunc .)
    KEYDER          reduce using rule 105 (decisionfunc -> IF PARIZQ expresion PARDER THEN bloquefunc ELSE bloquefunc .)


state 313

    (109) nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc .

    RETURN          reduce using rule 109 (nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc .)
    ID              reduce using rule 109 (nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc .)
    IF              reduce using rule 109 (nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc .)
    WRITE           reduce using rule 109 (nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc .)
    READ            reduce using rule 109 (nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc .)
    WHILE           reduce using rule 109 (nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc .)
    FOR             reduce using rule 109 (nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc .)
    KEYDER          reduce using rule 109 (nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for CORIZQ in state 38 resolved as shift
WARNING: shift/reduce conflict for ID in state 80 resolved as shift
WARNING: shift/reduce conflict for ID in state 81 resolved as shift
WARNING: shift/reduce conflict for ID in state 82 resolved as shift
WARNING: shift/reduce conflict for INT in state 94 resolved as shift
WARNING: shift/reduce conflict for FLT in state 94 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 94 resolved as shift
WARNING: shift/reduce conflict for CORIZQ in state 96 resolved as shift
WARNING: shift/reduce conflict for ID in state 98 resolved as shift
WARNING: shift/reduce conflict for ID in state 114 resolved as shift
WARNING: shift/reduce conflict for CORIZQ in state 120 resolved as shift
WARNING: shift/reduce conflict for CORIZQ in state 124 resolved as shift
WARNING: shift/reduce conflict for ID in state 126 resolved as shift
WARNING: shift/reduce conflict for ID in state 132 resolved as shift
WARNING: shift/reduce conflict for ID in state 143 resolved as shift
WARNING: shift/reduce conflict for ID in state 149 resolved as shift
WARNING: shift/reduce conflict for CORIZQ in state 150 resolved as shift
WARNING: shift/reduce conflict for CORIZQ in state 164 resolved as shift
WARNING: shift/reduce conflict for ID in state 194 resolved as shift
WARNING: shift/reduce conflict for CORIZQ in state 214 resolved as shift
WARNING: shift/reduce conflict for ID in state 221 resolved as shift
WARNING: shift/reduce conflict for ID in state 225 resolved as shift
WARNING: shift/reduce conflict for ID in state 226 resolved as shift
WARNING: shift/reduce conflict for ID in state 227 resolved as shift
WARNING: shift/reduce conflict for ID in state 228 resolved as shift
WARNING: shift/reduce conflict for ID in state 229 resolved as shift
WARNING: shift/reduce conflict for ID in state 230 resolved as shift
WARNING: shift/reduce conflict for ID in state 231 resolved as shift
WARNING: shift/reduce conflict for ID in state 232 resolved as shift
WARNING: shift/reduce conflict for ID in state 244 resolved as shift
WARNING: shift/reduce conflict for ID in state 245 resolved as shift
WARNING: shift/reduce conflict for ID in state 246 resolved as shift
WARNING: shift/reduce conflict for ID in state 251 resolved as shift
WARNING: shift/reduce conflict for ID in state 254 resolved as shift
WARNING: shift/reduce conflict for ID in state 257 resolved as shift
WARNING: shift/reduce conflict for ID in state 268 resolved as shift
WARNING: shift/reduce conflict for ID in state 273 resolved as shift
WARNING: shift/reduce conflict for ID in state 296 resolved as shift
WARNING: shift/reduce conflict for INT in state 297 resolved as shift
WARNING: shift/reduce conflict for FLT in state 297 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 297 resolved as shift
