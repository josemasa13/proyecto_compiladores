Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DOSPTS

Grammar

Rule 0     S' -> program
Rule 1     program -> PRO ID PTOCOM opvars opfunciones MAIN PARIZQ PARDER bloque
Rule 2     opvars -> vars
Rule 3     opvars -> empty
Rule 4     opfunciones -> funciones opfunciones
Rule 5     opfunciones -> empty
Rule 6     vars -> VARTOKEN tipo ID arr arr varciclo PTOCOM tipociclo
Rule 7     varciclo -> COMA ID arr arr varciclo
Rule 8     varciclo -> empty
Rule 9     arr -> CORIZQ CTEI CORDER
Rule 10    arr -> empty
Rule 11    tipociclo -> tipo opciontipo
Rule 12    tipociclo -> empty
Rule 13    opciontipo -> ID arr arr varciclo PTOCOM tipociclo
Rule 14    opciontipo -> MODULE ID PARIZQ opcionvarsimple PARDER opvars bloquefunc
Rule 15    tipo -> INT
Rule 16    tipo -> FLT
Rule 17    tipo -> CHAR
Rule 18    varsimple -> tipo ident
Rule 19    funciones -> funcionvoid
Rule 20    funciones -> funcion
Rule 21    funcionvoid -> VOID MODULE ID PARIZQ opcionvarsimple PARDER opvars bloque
Rule 22    opcionvarsimple -> varsimple ciclovarsimple
Rule 23    opcionvarsimple -> empty
Rule 24    ciclovarsimple -> COMA varsimple ciclovarsimple
Rule 25    ciclovarsimple -> empty
Rule 26    funcion -> tipo MODULE ID PARIZQ opcionvarsimple PARDER opvars bloquefunc
Rule 27    ident -> ID arrini arrini
Rule 28    arrini -> CORIZQ CORDER
Rule 29    arrini -> empty
Rule 30    bloque -> KEYIZQ bloqueopcion KEYDER
Rule 31    bloqueopcion -> estatuto bloqueopcion
Rule 32    bloqueopcion -> empty
Rule 33    bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER
Rule 34    bloqueopcionfunc -> estatutofunc bloqueopcionfunc
Rule 35    bloqueopcionfunc -> empty
Rule 36    estatuto -> asignacion
Rule 37    estatuto -> decision
Rule 38    estatuto -> escritura
Rule 39    estatuto -> llamadafunc
Rule 40    estatuto -> repeticion
Rule 41    estatuto -> lectura
Rule 42    estatutofunc -> asignacion
Rule 43    estatutofunc -> decisionfunc
Rule 44    estatutofunc -> escritura
Rule 45    estatutofunc -> llamadafunc
Rule 46    estatutofunc -> repeticionfunc
Rule 47    estatutofunc -> lectura
Rule 48    estatutofunc -> RETURN PARIZQ expresion PARDER PTOCOM
Rule 49    asignacion -> ID asignacionarr asignacionarr IGU expresion PTOCOM
Rule 50    asignacionarr -> CORIZQ expresion CORDER
Rule 51    asignacionarr -> empty
Rule 52    expresion -> exp expresionsig
Rule 53    expresionsig -> MAY expresionsigequal exp
Rule 54    expresionsig -> MEN expresionsigequal exp
Rule 55    expresionsig -> DIF exp
Rule 56    expresionsig -> IGUIGU exp
Rule 57    expresionsig -> AND exp
Rule 58    expresionsig -> OR exp
Rule 59    expresionsig -> empty
Rule 60    expresionsigequal -> IGU
Rule 61    expresionsigequal -> empty
Rule 62    exp -> termino expciclo
Rule 63    expciclo -> MAS exp
Rule 64    expciclo -> MENOS exp
Rule 65    expciclo -> empty
Rule 66    termino -> factor factorciclo
Rule 67    factorciclo -> MULT termino
Rule 68    factorciclo -> DIV termino
Rule 69    factorciclo -> empty
Rule 70    factor -> PARIZQ expresion PARDER
Rule 71    factor -> masomenos varcte
Rule 72    factor -> ID opcionid
Rule 73    masomenos -> MAS
Rule 74    masomenos -> MENOS
Rule 75    masomenos -> empty
Rule 76    opcionid -> arrexp arrexp
Rule 77    opcionid -> PARIZQ parametros PARDER
Rule 78    varcte -> iddim
Rule 79    varcte -> CTEI
Rule 80    varcte -> CTEF
Rule 81    parametros -> expresion cicloparametros
Rule 82    parametros -> empty
Rule 83    cicloparametros -> COMA expresion cicloparametros
Rule 84    cicloparametros -> empty
Rule 85    decision -> IF PARIZQ expresion PARDER THEN bloque ELSE bloque
Rule 86    escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM
Rule 87    escrituraciclo -> CTE_STRING
Rule 88    escrituraciclo -> expresion
Rule 89    otro -> COMA escrituraciclo otro
Rule 90    otro -> empty
Rule 91    llamadafunc -> ID PARIZQ parametros PARDER PTOCOM
Rule 92    lectura -> READ PARIZQ iddim ciclodim PARDER PTOCOM
Rule 93    ciclodim -> COMA iddim ciclodim
Rule 94    ciclodim -> empty
Rule 95    iddim -> ID arrexp arrexp
Rule 96    arrexp -> CORIZQ expresion CORDER
Rule 97    arrexp -> empty
Rule 98    repeticion -> condicional
Rule 99    repeticion -> nocondicional
Rule 100   condicional -> WHILE PARIZQ expresion PARDER DO bloque
Rule 101   nocondicional -> FOR iddim IGU expresion TO expresion DO bloque
Rule 102   decisionfunc -> IF PARIZQ expresion PARDER THEN bloquefunc ELSE bloquefunc
Rule 103   repeticionfunc -> condicionalfunc
Rule 104   repeticionfunc -> nocondicionalfunc
Rule 105   condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc
Rule 106   nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc
Rule 107   empty -> <empty>

Terminals, with rules where they appear

AND                  : 57
CHAR                 : 17
COMA                 : 7 24 83 89 93
CORDER               : 9 28 50 96
CORIZQ               : 9 28 50 96
CTEF                 : 80
CTEI                 : 9 79
CTE_STRING           : 87
DIF                  : 55
DIV                  : 68
DO                   : 100 101 105 106
DOSPTS               : 
ELSE                 : 85 102
FLT                  : 16
FOR                  : 101 106
ID                   : 1 6 7 13 14 21 26 27 49 72 91 95
IF                   : 85 102
IGU                  : 49 60 101 106
IGUIGU               : 56
INT                  : 15
KEYDER               : 30 33
KEYIZQ               : 30 33
MAIN                 : 1
MAS                  : 63 73
MAY                  : 53
MEN                  : 54
MENOS                : 64 74
MODULE               : 14 21 26
MULT                 : 67
OR                   : 58
PARDER               : 1 14 21 26 48 70 77 85 86 91 92 100 102 105
PARIZQ               : 1 14 21 26 48 70 77 85 86 91 92 100 102 105
PRO                  : 1
PTOCOM               : 1 6 13 48 49 86 91 92
READ                 : 92
RETURN               : 48
THEN                 : 85 102
TO                   : 101 106
VARTOKEN             : 6
VOID                 : 21
WHILE                : 100 105
WRITE                : 86
error                : 

Nonterminals, with rules where they appear

arr                  : 6 6 7 7 13 13
arrexp               : 76 76 95 95
arrini               : 27 27
asignacion           : 36 42
asignacionarr        : 49 49
bloque               : 1 21 85 85 100 101
bloquefunc           : 14 26 102 102 105 106
bloqueopcion         : 30 31
bloqueopcionfunc     : 33 34
ciclodim             : 92 93
cicloparametros      : 81 83
ciclovarsimple       : 22 24
condicional          : 98
condicionalfunc      : 103
decision             : 37
decisionfunc         : 43
empty                : 3 5 8 10 12 23 25 29 32 35 51 59 61 65 69 75 82 84 90 94 97
escritura            : 38 44
escrituraciclo       : 86 89
estatuto             : 31
estatutofunc         : 34
exp                  : 52 53 54 55 56 57 58 63 64
expciclo             : 62
expresion            : 48 49 50 70 81 83 85 88 96 100 101 101 102 105 106 106
expresionsig         : 52
expresionsigequal    : 53 54
factor               : 66
factorciclo          : 66
funcion              : 20
funciones            : 4
funcionvoid          : 19
iddim                : 78 92 93 101 106
ident                : 18
lectura              : 41 47
llamadafunc          : 39 45
masomenos            : 71
nocondicional        : 99
nocondicionalfunc    : 104
opcionid             : 72
opciontipo           : 11
opcionvarsimple      : 14 21 26
opfunciones          : 1 4
opvars               : 1 14 21 26
otro                 : 86 89
parametros           : 77 91
program              : 0
repeticion           : 40
repeticionfunc       : 46
termino              : 62 67 68
tipo                 : 6 11 18 26
tipociclo            : 6 13
varciclo             : 6 7 13
varcte               : 71
vars                 : 2
varsimple            : 22 24

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PRO ID PTOCOM opvars opfunciones MAIN PARIZQ PARDER bloque

    PRO             shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PRO . ID PTOCOM opvars opfunciones MAIN PARIZQ PARDER bloque

    ID              shift and go to state 3


state 3

    (1) program -> PRO ID . PTOCOM opvars opfunciones MAIN PARIZQ PARDER bloque

    PTOCOM          shift and go to state 4


state 4

    (1) program -> PRO ID PTOCOM . opvars opfunciones MAIN PARIZQ PARDER bloque
    (2) opvars -> . vars
    (3) opvars -> . empty
    (6) vars -> . VARTOKEN tipo ID arr arr varciclo PTOCOM tipociclo
    (107) empty -> .

    VARTOKEN        shift and go to state 8
    VOID            reduce using rule 107 (empty -> .)
    INT             reduce using rule 107 (empty -> .)
    FLT             reduce using rule 107 (empty -> .)
    CHAR            reduce using rule 107 (empty -> .)
    MAIN            reduce using rule 107 (empty -> .)

    opvars                         shift and go to state 5
    vars                           shift and go to state 6
    empty                          shift and go to state 7

state 5

    (1) program -> PRO ID PTOCOM opvars . opfunciones MAIN PARIZQ PARDER bloque
    (4) opfunciones -> . funciones opfunciones
    (5) opfunciones -> . empty
    (19) funciones -> . funcionvoid
    (20) funciones -> . funcion
    (107) empty -> .
    (21) funcionvoid -> . VOID MODULE ID PARIZQ opcionvarsimple PARDER opvars bloque
    (26) funcion -> . tipo MODULE ID PARIZQ opcionvarsimple PARDER opvars bloquefunc
    (15) tipo -> . INT
    (16) tipo -> . FLT
    (17) tipo -> . CHAR

    MAIN            reduce using rule 107 (empty -> .)
    VOID            shift and go to state 14
    INT             shift and go to state 16
    FLT             shift and go to state 17
    CHAR            shift and go to state 18

    opfunciones                    shift and go to state 9
    funciones                      shift and go to state 10
    empty                          shift and go to state 11
    funcionvoid                    shift and go to state 12
    funcion                        shift and go to state 13
    tipo                           shift and go to state 15

state 6

    (2) opvars -> vars .

    VOID            reduce using rule 2 (opvars -> vars .)
    INT             reduce using rule 2 (opvars -> vars .)
    FLT             reduce using rule 2 (opvars -> vars .)
    CHAR            reduce using rule 2 (opvars -> vars .)
    MAIN            reduce using rule 2 (opvars -> vars .)
    KEYIZQ          reduce using rule 2 (opvars -> vars .)


state 7

    (3) opvars -> empty .

    VOID            reduce using rule 3 (opvars -> empty .)
    INT             reduce using rule 3 (opvars -> empty .)
    FLT             reduce using rule 3 (opvars -> empty .)
    CHAR            reduce using rule 3 (opvars -> empty .)
    MAIN            reduce using rule 3 (opvars -> empty .)
    KEYIZQ          reduce using rule 3 (opvars -> empty .)


state 8

    (6) vars -> VARTOKEN . tipo ID arr arr varciclo PTOCOM tipociclo
    (15) tipo -> . INT
    (16) tipo -> . FLT
    (17) tipo -> . CHAR

    INT             shift and go to state 16
    FLT             shift and go to state 17
    CHAR            shift and go to state 18

    tipo                           shift and go to state 19

state 9

    (1) program -> PRO ID PTOCOM opvars opfunciones . MAIN PARIZQ PARDER bloque

    MAIN            shift and go to state 20


state 10

    (4) opfunciones -> funciones . opfunciones
    (4) opfunciones -> . funciones opfunciones
    (5) opfunciones -> . empty
    (19) funciones -> . funcionvoid
    (20) funciones -> . funcion
    (107) empty -> .
    (21) funcionvoid -> . VOID MODULE ID PARIZQ opcionvarsimple PARDER opvars bloque
    (26) funcion -> . tipo MODULE ID PARIZQ opcionvarsimple PARDER opvars bloquefunc
    (15) tipo -> . INT
    (16) tipo -> . FLT
    (17) tipo -> . CHAR

    MAIN            reduce using rule 107 (empty -> .)
    VOID            shift and go to state 14
    INT             shift and go to state 16
    FLT             shift and go to state 17
    CHAR            shift and go to state 18

    funciones                      shift and go to state 10
    opfunciones                    shift and go to state 21
    empty                          shift and go to state 11
    funcionvoid                    shift and go to state 12
    funcion                        shift and go to state 13
    tipo                           shift and go to state 15

state 11

    (5) opfunciones -> empty .

    MAIN            reduce using rule 5 (opfunciones -> empty .)


state 12

    (19) funciones -> funcionvoid .

    VOID            reduce using rule 19 (funciones -> funcionvoid .)
    INT             reduce using rule 19 (funciones -> funcionvoid .)
    FLT             reduce using rule 19 (funciones -> funcionvoid .)
    CHAR            reduce using rule 19 (funciones -> funcionvoid .)
    MAIN            reduce using rule 19 (funciones -> funcionvoid .)


state 13

    (20) funciones -> funcion .

    VOID            reduce using rule 20 (funciones -> funcion .)
    INT             reduce using rule 20 (funciones -> funcion .)
    FLT             reduce using rule 20 (funciones -> funcion .)
    CHAR            reduce using rule 20 (funciones -> funcion .)
    MAIN            reduce using rule 20 (funciones -> funcion .)


state 14

    (21) funcionvoid -> VOID . MODULE ID PARIZQ opcionvarsimple PARDER opvars bloque

    MODULE          shift and go to state 22


state 15

    (26) funcion -> tipo . MODULE ID PARIZQ opcionvarsimple PARDER opvars bloquefunc

    MODULE          shift and go to state 23


state 16

    (15) tipo -> INT .

    MODULE          reduce using rule 15 (tipo -> INT .)
    ID              reduce using rule 15 (tipo -> INT .)


state 17

    (16) tipo -> FLT .

    MODULE          reduce using rule 16 (tipo -> FLT .)
    ID              reduce using rule 16 (tipo -> FLT .)


state 18

    (17) tipo -> CHAR .

    MODULE          reduce using rule 17 (tipo -> CHAR .)
    ID              reduce using rule 17 (tipo -> CHAR .)


state 19

    (6) vars -> VARTOKEN tipo . ID arr arr varciclo PTOCOM tipociclo

    ID              shift and go to state 24


state 20

    (1) program -> PRO ID PTOCOM opvars opfunciones MAIN . PARIZQ PARDER bloque

    PARIZQ          shift and go to state 25


state 21

    (4) opfunciones -> funciones opfunciones .

    MAIN            reduce using rule 4 (opfunciones -> funciones opfunciones .)


state 22

    (21) funcionvoid -> VOID MODULE . ID PARIZQ opcionvarsimple PARDER opvars bloque

    ID              shift and go to state 26


state 23

    (26) funcion -> tipo MODULE . ID PARIZQ opcionvarsimple PARDER opvars bloquefunc

    ID              shift and go to state 27


state 24

    (6) vars -> VARTOKEN tipo ID . arr arr varciclo PTOCOM tipociclo
    (9) arr -> . CORIZQ CTEI CORDER
    (10) arr -> . empty
    (107) empty -> .

  ! shift/reduce conflict for CORIZQ resolved as shift
    CORIZQ          shift and go to state 29
    COMA            reduce using rule 107 (empty -> .)
    PTOCOM          reduce using rule 107 (empty -> .)

  ! CORIZQ          [ reduce using rule 107 (empty -> .) ]

    arr                            shift and go to state 28
    empty                          shift and go to state 30

state 25

    (1) program -> PRO ID PTOCOM opvars opfunciones MAIN PARIZQ . PARDER bloque

    PARDER          shift and go to state 31


state 26

    (21) funcionvoid -> VOID MODULE ID . PARIZQ opcionvarsimple PARDER opvars bloque

    PARIZQ          shift and go to state 32


state 27

    (26) funcion -> tipo MODULE ID . PARIZQ opcionvarsimple PARDER opvars bloquefunc

    PARIZQ          shift and go to state 33


state 28

    (6) vars -> VARTOKEN tipo ID arr . arr varciclo PTOCOM tipociclo
    (9) arr -> . CORIZQ CTEI CORDER
    (10) arr -> . empty
    (107) empty -> .

    CORIZQ          shift and go to state 29
    COMA            reduce using rule 107 (empty -> .)
    PTOCOM          reduce using rule 107 (empty -> .)

    arr                            shift and go to state 34
    empty                          shift and go to state 30

state 29

    (9) arr -> CORIZQ . CTEI CORDER

    CTEI            shift and go to state 35


state 30

    (10) arr -> empty .

    CORIZQ          reduce using rule 10 (arr -> empty .)
    COMA            reduce using rule 10 (arr -> empty .)
    PTOCOM          reduce using rule 10 (arr -> empty .)


state 31

    (1) program -> PRO ID PTOCOM opvars opfunciones MAIN PARIZQ PARDER . bloque
    (30) bloque -> . KEYIZQ bloqueopcion KEYDER

    KEYIZQ          shift and go to state 37

    bloque                         shift and go to state 36

state 32

    (21) funcionvoid -> VOID MODULE ID PARIZQ . opcionvarsimple PARDER opvars bloque
    (22) opcionvarsimple -> . varsimple ciclovarsimple
    (23) opcionvarsimple -> . empty
    (18) varsimple -> . tipo ident
    (107) empty -> .
    (15) tipo -> . INT
    (16) tipo -> . FLT
    (17) tipo -> . CHAR

    PARDER          reduce using rule 107 (empty -> .)
    INT             shift and go to state 16
    FLT             shift and go to state 17
    CHAR            shift and go to state 18

    opcionvarsimple                shift and go to state 38
    varsimple                      shift and go to state 39
    empty                          shift and go to state 40
    tipo                           shift and go to state 41

state 33

    (26) funcion -> tipo MODULE ID PARIZQ . opcionvarsimple PARDER opvars bloquefunc
    (22) opcionvarsimple -> . varsimple ciclovarsimple
    (23) opcionvarsimple -> . empty
    (18) varsimple -> . tipo ident
    (107) empty -> .
    (15) tipo -> . INT
    (16) tipo -> . FLT
    (17) tipo -> . CHAR

    PARDER          reduce using rule 107 (empty -> .)
    INT             shift and go to state 16
    FLT             shift and go to state 17
    CHAR            shift and go to state 18

    tipo                           shift and go to state 41
    opcionvarsimple                shift and go to state 42
    varsimple                      shift and go to state 39
    empty                          shift and go to state 40

state 34

    (6) vars -> VARTOKEN tipo ID arr arr . varciclo PTOCOM tipociclo
    (7) varciclo -> . COMA ID arr arr varciclo
    (8) varciclo -> . empty
    (107) empty -> .

    COMA            shift and go to state 44
    PTOCOM          reduce using rule 107 (empty -> .)

    varciclo                       shift and go to state 43
    empty                          shift and go to state 45

state 35

    (9) arr -> CORIZQ CTEI . CORDER

    CORDER          shift and go to state 46


state 36

    (1) program -> PRO ID PTOCOM opvars opfunciones MAIN PARIZQ PARDER bloque .

    $end            reduce using rule 1 (program -> PRO ID PTOCOM opvars opfunciones MAIN PARIZQ PARDER bloque .)


state 37

    (30) bloque -> KEYIZQ . bloqueopcion KEYDER
    (31) bloqueopcion -> . estatuto bloqueopcion
    (32) bloqueopcion -> . empty
    (36) estatuto -> . asignacion
    (37) estatuto -> . decision
    (38) estatuto -> . escritura
    (39) estatuto -> . llamadafunc
    (40) estatuto -> . repeticion
    (41) estatuto -> . lectura
    (107) empty -> .
    (49) asignacion -> . ID asignacionarr asignacionarr IGU expresion PTOCOM
    (85) decision -> . IF PARIZQ expresion PARDER THEN bloque ELSE bloque
    (86) escritura -> . WRITE PARIZQ escrituraciclo otro PARDER PTOCOM
    (91) llamadafunc -> . ID PARIZQ parametros PARDER PTOCOM
    (98) repeticion -> . condicional
    (99) repeticion -> . nocondicional
    (92) lectura -> . READ PARIZQ iddim ciclodim PARDER PTOCOM
    (100) condicional -> . WHILE PARIZQ expresion PARDER DO bloque
    (101) nocondicional -> . FOR iddim IGU expresion TO expresion DO bloque

    KEYDER          reduce using rule 107 (empty -> .)
    ID              shift and go to state 56
    IF              shift and go to state 57
    WRITE           shift and go to state 58
    READ            shift and go to state 61
    WHILE           shift and go to state 62
    FOR             shift and go to state 63

    bloqueopcion                   shift and go to state 47
    estatuto                       shift and go to state 48
    empty                          shift and go to state 49
    asignacion                     shift and go to state 50
    decision                       shift and go to state 51
    escritura                      shift and go to state 52
    llamadafunc                    shift and go to state 53
    repeticion                     shift and go to state 54
    lectura                        shift and go to state 55
    condicional                    shift and go to state 59
    nocondicional                  shift and go to state 60

state 38

    (21) funcionvoid -> VOID MODULE ID PARIZQ opcionvarsimple . PARDER opvars bloque

    PARDER          shift and go to state 64


state 39

    (22) opcionvarsimple -> varsimple . ciclovarsimple
    (24) ciclovarsimple -> . COMA varsimple ciclovarsimple
    (25) ciclovarsimple -> . empty
    (107) empty -> .

    COMA            shift and go to state 66
    PARDER          reduce using rule 107 (empty -> .)

    ciclovarsimple                 shift and go to state 65
    empty                          shift and go to state 67

state 40

    (23) opcionvarsimple -> empty .

    PARDER          reduce using rule 23 (opcionvarsimple -> empty .)


state 41

    (18) varsimple -> tipo . ident
    (27) ident -> . ID arrini arrini

    ID              shift and go to state 69

    ident                          shift and go to state 68

state 42

    (26) funcion -> tipo MODULE ID PARIZQ opcionvarsimple . PARDER opvars bloquefunc

    PARDER          shift and go to state 70


state 43

    (6) vars -> VARTOKEN tipo ID arr arr varciclo . PTOCOM tipociclo

    PTOCOM          shift and go to state 71


state 44

    (7) varciclo -> COMA . ID arr arr varciclo

    ID              shift and go to state 72


state 45

    (8) varciclo -> empty .

    PTOCOM          reduce using rule 8 (varciclo -> empty .)


state 46

    (9) arr -> CORIZQ CTEI CORDER .

    CORIZQ          reduce using rule 9 (arr -> CORIZQ CTEI CORDER .)
    COMA            reduce using rule 9 (arr -> CORIZQ CTEI CORDER .)
    PTOCOM          reduce using rule 9 (arr -> CORIZQ CTEI CORDER .)


state 47

    (30) bloque -> KEYIZQ bloqueopcion . KEYDER

    KEYDER          shift and go to state 73


state 48

    (31) bloqueopcion -> estatuto . bloqueopcion
    (31) bloqueopcion -> . estatuto bloqueopcion
    (32) bloqueopcion -> . empty
    (36) estatuto -> . asignacion
    (37) estatuto -> . decision
    (38) estatuto -> . escritura
    (39) estatuto -> . llamadafunc
    (40) estatuto -> . repeticion
    (41) estatuto -> . lectura
    (107) empty -> .
    (49) asignacion -> . ID asignacionarr asignacionarr IGU expresion PTOCOM
    (85) decision -> . IF PARIZQ expresion PARDER THEN bloque ELSE bloque
    (86) escritura -> . WRITE PARIZQ escrituraciclo otro PARDER PTOCOM
    (91) llamadafunc -> . ID PARIZQ parametros PARDER PTOCOM
    (98) repeticion -> . condicional
    (99) repeticion -> . nocondicional
    (92) lectura -> . READ PARIZQ iddim ciclodim PARDER PTOCOM
    (100) condicional -> . WHILE PARIZQ expresion PARDER DO bloque
    (101) nocondicional -> . FOR iddim IGU expresion TO expresion DO bloque

    KEYDER          reduce using rule 107 (empty -> .)
    ID              shift and go to state 56
    IF              shift and go to state 57
    WRITE           shift and go to state 58
    READ            shift and go to state 61
    WHILE           shift and go to state 62
    FOR             shift and go to state 63

    estatuto                       shift and go to state 48
    bloqueopcion                   shift and go to state 74
    empty                          shift and go to state 49
    asignacion                     shift and go to state 50
    decision                       shift and go to state 51
    escritura                      shift and go to state 52
    llamadafunc                    shift and go to state 53
    repeticion                     shift and go to state 54
    lectura                        shift and go to state 55
    condicional                    shift and go to state 59
    nocondicional                  shift and go to state 60

state 49

    (32) bloqueopcion -> empty .

    KEYDER          reduce using rule 32 (bloqueopcion -> empty .)


state 50

    (36) estatuto -> asignacion .

    ID              reduce using rule 36 (estatuto -> asignacion .)
    IF              reduce using rule 36 (estatuto -> asignacion .)
    WRITE           reduce using rule 36 (estatuto -> asignacion .)
    READ            reduce using rule 36 (estatuto -> asignacion .)
    WHILE           reduce using rule 36 (estatuto -> asignacion .)
    FOR             reduce using rule 36 (estatuto -> asignacion .)
    KEYDER          reduce using rule 36 (estatuto -> asignacion .)


state 51

    (37) estatuto -> decision .

    ID              reduce using rule 37 (estatuto -> decision .)
    IF              reduce using rule 37 (estatuto -> decision .)
    WRITE           reduce using rule 37 (estatuto -> decision .)
    READ            reduce using rule 37 (estatuto -> decision .)
    WHILE           reduce using rule 37 (estatuto -> decision .)
    FOR             reduce using rule 37 (estatuto -> decision .)
    KEYDER          reduce using rule 37 (estatuto -> decision .)


state 52

    (38) estatuto -> escritura .

    ID              reduce using rule 38 (estatuto -> escritura .)
    IF              reduce using rule 38 (estatuto -> escritura .)
    WRITE           reduce using rule 38 (estatuto -> escritura .)
    READ            reduce using rule 38 (estatuto -> escritura .)
    WHILE           reduce using rule 38 (estatuto -> escritura .)
    FOR             reduce using rule 38 (estatuto -> escritura .)
    KEYDER          reduce using rule 38 (estatuto -> escritura .)


state 53

    (39) estatuto -> llamadafunc .

    ID              reduce using rule 39 (estatuto -> llamadafunc .)
    IF              reduce using rule 39 (estatuto -> llamadafunc .)
    WRITE           reduce using rule 39 (estatuto -> llamadafunc .)
    READ            reduce using rule 39 (estatuto -> llamadafunc .)
    WHILE           reduce using rule 39 (estatuto -> llamadafunc .)
    FOR             reduce using rule 39 (estatuto -> llamadafunc .)
    KEYDER          reduce using rule 39 (estatuto -> llamadafunc .)


state 54

    (40) estatuto -> repeticion .

    ID              reduce using rule 40 (estatuto -> repeticion .)
    IF              reduce using rule 40 (estatuto -> repeticion .)
    WRITE           reduce using rule 40 (estatuto -> repeticion .)
    READ            reduce using rule 40 (estatuto -> repeticion .)
    WHILE           reduce using rule 40 (estatuto -> repeticion .)
    FOR             reduce using rule 40 (estatuto -> repeticion .)
    KEYDER          reduce using rule 40 (estatuto -> repeticion .)


state 55

    (41) estatuto -> lectura .

    ID              reduce using rule 41 (estatuto -> lectura .)
    IF              reduce using rule 41 (estatuto -> lectura .)
    WRITE           reduce using rule 41 (estatuto -> lectura .)
    READ            reduce using rule 41 (estatuto -> lectura .)
    WHILE           reduce using rule 41 (estatuto -> lectura .)
    FOR             reduce using rule 41 (estatuto -> lectura .)
    KEYDER          reduce using rule 41 (estatuto -> lectura .)


state 56

    (49) asignacion -> ID . asignacionarr asignacionarr IGU expresion PTOCOM
    (91) llamadafunc -> ID . PARIZQ parametros PARDER PTOCOM
    (50) asignacionarr -> . CORIZQ expresion CORDER
    (51) asignacionarr -> . empty
    (107) empty -> .

  ! shift/reduce conflict for CORIZQ resolved as shift
    PARIZQ          shift and go to state 76
    CORIZQ          shift and go to state 77
    IGU             reduce using rule 107 (empty -> .)

  ! CORIZQ          [ reduce using rule 107 (empty -> .) ]

    asignacionarr                  shift and go to state 75
    empty                          shift and go to state 78

state 57

    (85) decision -> IF . PARIZQ expresion PARDER THEN bloque ELSE bloque

    PARIZQ          shift and go to state 79


state 58

    (86) escritura -> WRITE . PARIZQ escrituraciclo otro PARDER PTOCOM

    PARIZQ          shift and go to state 80


state 59

    (98) repeticion -> condicional .

    ID              reduce using rule 98 (repeticion -> condicional .)
    IF              reduce using rule 98 (repeticion -> condicional .)
    WRITE           reduce using rule 98 (repeticion -> condicional .)
    READ            reduce using rule 98 (repeticion -> condicional .)
    WHILE           reduce using rule 98 (repeticion -> condicional .)
    FOR             reduce using rule 98 (repeticion -> condicional .)
    KEYDER          reduce using rule 98 (repeticion -> condicional .)


state 60

    (99) repeticion -> nocondicional .

    ID              reduce using rule 99 (repeticion -> nocondicional .)
    IF              reduce using rule 99 (repeticion -> nocondicional .)
    WRITE           reduce using rule 99 (repeticion -> nocondicional .)
    READ            reduce using rule 99 (repeticion -> nocondicional .)
    WHILE           reduce using rule 99 (repeticion -> nocondicional .)
    FOR             reduce using rule 99 (repeticion -> nocondicional .)
    KEYDER          reduce using rule 99 (repeticion -> nocondicional .)


state 61

    (92) lectura -> READ . PARIZQ iddim ciclodim PARDER PTOCOM

    PARIZQ          shift and go to state 81


state 62

    (100) condicional -> WHILE . PARIZQ expresion PARDER DO bloque

    PARIZQ          shift and go to state 82


state 63

    (101) nocondicional -> FOR . iddim IGU expresion TO expresion DO bloque
    (95) iddim -> . ID arrexp arrexp

    ID              shift and go to state 84

    iddim                          shift and go to state 83

state 64

    (21) funcionvoid -> VOID MODULE ID PARIZQ opcionvarsimple PARDER . opvars bloque
    (2) opvars -> . vars
    (3) opvars -> . empty
    (6) vars -> . VARTOKEN tipo ID arr arr varciclo PTOCOM tipociclo
    (107) empty -> .

    VARTOKEN        shift and go to state 8
    KEYIZQ          reduce using rule 107 (empty -> .)

    opvars                         shift and go to state 85
    vars                           shift and go to state 6
    empty                          shift and go to state 7

state 65

    (22) opcionvarsimple -> varsimple ciclovarsimple .

    PARDER          reduce using rule 22 (opcionvarsimple -> varsimple ciclovarsimple .)


state 66

    (24) ciclovarsimple -> COMA . varsimple ciclovarsimple
    (18) varsimple -> . tipo ident
    (15) tipo -> . INT
    (16) tipo -> . FLT
    (17) tipo -> . CHAR

    INT             shift and go to state 16
    FLT             shift and go to state 17
    CHAR            shift and go to state 18

    varsimple                      shift and go to state 86
    tipo                           shift and go to state 41

state 67

    (25) ciclovarsimple -> empty .

    PARDER          reduce using rule 25 (ciclovarsimple -> empty .)


state 68

    (18) varsimple -> tipo ident .

    COMA            reduce using rule 18 (varsimple -> tipo ident .)
    PARDER          reduce using rule 18 (varsimple -> tipo ident .)


state 69

    (27) ident -> ID . arrini arrini
    (28) arrini -> . CORIZQ CORDER
    (29) arrini -> . empty
    (107) empty -> .

  ! shift/reduce conflict for CORIZQ resolved as shift
    CORIZQ          shift and go to state 88
    COMA            reduce using rule 107 (empty -> .)
    PARDER          reduce using rule 107 (empty -> .)

  ! CORIZQ          [ reduce using rule 107 (empty -> .) ]

    arrini                         shift and go to state 87
    empty                          shift and go to state 89

state 70

    (26) funcion -> tipo MODULE ID PARIZQ opcionvarsimple PARDER . opvars bloquefunc
    (2) opvars -> . vars
    (3) opvars -> . empty
    (6) vars -> . VARTOKEN tipo ID arr arr varciclo PTOCOM tipociclo
    (107) empty -> .

    VARTOKEN        shift and go to state 8
    KEYIZQ          reduce using rule 107 (empty -> .)

    opvars                         shift and go to state 90
    vars                           shift and go to state 6
    empty                          shift and go to state 7

state 71

    (6) vars -> VARTOKEN tipo ID arr arr varciclo PTOCOM . tipociclo
    (11) tipociclo -> . tipo opciontipo
    (12) tipociclo -> . empty
    (15) tipo -> . INT
    (16) tipo -> . FLT
    (17) tipo -> . CHAR
    (107) empty -> .

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    INT             shift and go to state 16
    FLT             shift and go to state 17
    CHAR            shift and go to state 18
    VOID            reduce using rule 107 (empty -> .)
    MAIN            reduce using rule 107 (empty -> .)
    KEYIZQ          reduce using rule 107 (empty -> .)

  ! INT             [ reduce using rule 107 (empty -> .) ]
  ! FLT             [ reduce using rule 107 (empty -> .) ]
  ! CHAR            [ reduce using rule 107 (empty -> .) ]

    tipo                           shift and go to state 91
    tipociclo                      shift and go to state 92
    empty                          shift and go to state 93

state 72

    (7) varciclo -> COMA ID . arr arr varciclo
    (9) arr -> . CORIZQ CTEI CORDER
    (10) arr -> . empty
    (107) empty -> .

  ! shift/reduce conflict for CORIZQ resolved as shift
    CORIZQ          shift and go to state 29
    COMA            reduce using rule 107 (empty -> .)
    PTOCOM          reduce using rule 107 (empty -> .)

  ! CORIZQ          [ reduce using rule 107 (empty -> .) ]

    arr                            shift and go to state 94
    empty                          shift and go to state 30

state 73

    (30) bloque -> KEYIZQ bloqueopcion KEYDER .

    $end            reduce using rule 30 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    VOID            reduce using rule 30 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    INT             reduce using rule 30 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    FLT             reduce using rule 30 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    CHAR            reduce using rule 30 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    MAIN            reduce using rule 30 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    ELSE            reduce using rule 30 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    ID              reduce using rule 30 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    IF              reduce using rule 30 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    WRITE           reduce using rule 30 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    READ            reduce using rule 30 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    WHILE           reduce using rule 30 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    FOR             reduce using rule 30 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    KEYDER          reduce using rule 30 (bloque -> KEYIZQ bloqueopcion KEYDER .)


state 74

    (31) bloqueopcion -> estatuto bloqueopcion .

    KEYDER          reduce using rule 31 (bloqueopcion -> estatuto bloqueopcion .)


state 75

    (49) asignacion -> ID asignacionarr . asignacionarr IGU expresion PTOCOM
    (50) asignacionarr -> . CORIZQ expresion CORDER
    (51) asignacionarr -> . empty
    (107) empty -> .

    CORIZQ          shift and go to state 77
    IGU             reduce using rule 107 (empty -> .)

    asignacionarr                  shift and go to state 95
    empty                          shift and go to state 78

state 76

    (91) llamadafunc -> ID PARIZQ . parametros PARDER PTOCOM
    (81) parametros -> . expresion cicloparametros
    (82) parametros -> . empty
    (52) expresion -> . exp expresionsig
    (107) empty -> .
    (62) exp -> . termino expciclo
    (66) termino -> . factor factorciclo
    (70) factor -> . PARIZQ expresion PARDER
    (71) factor -> . masomenos varcte
    (72) factor -> . ID opcionid
    (73) masomenos -> . MAS
    (74) masomenos -> . MENOS
    (75) masomenos -> . empty

  ! shift/reduce conflict for ID resolved as shift
    PARDER          reduce using rule 107 (empty -> .)
    CTEI            reduce using rule 107 (empty -> .)
    CTEF            reduce using rule 107 (empty -> .)
    PARIZQ          shift and go to state 97
    ID              shift and go to state 96
    MAS             shift and go to state 105
    MENOS           shift and go to state 106

  ! ID              [ reduce using rule 107 (empty -> .) ]

    parametros                     shift and go to state 98
    expresion                      shift and go to state 99
    empty                          shift and go to state 100
    exp                            shift and go to state 101
    termino                        shift and go to state 102
    factor                         shift and go to state 103
    masomenos                      shift and go to state 104

state 77

    (50) asignacionarr -> CORIZQ . expresion CORDER
    (52) expresion -> . exp expresionsig
    (62) exp -> . termino expciclo
    (66) termino -> . factor factorciclo
    (70) factor -> . PARIZQ expresion PARDER
    (71) factor -> . masomenos varcte
    (72) factor -> . ID opcionid
    (73) masomenos -> . MAS
    (74) masomenos -> . MENOS
    (75) masomenos -> . empty
    (107) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 97
    ID              shift and go to state 96
    MAS             shift and go to state 105
    MENOS           shift and go to state 106
    CTEI            reduce using rule 107 (empty -> .)
    CTEF            reduce using rule 107 (empty -> .)

  ! ID              [ reduce using rule 107 (empty -> .) ]

    expresion                      shift and go to state 107
    exp                            shift and go to state 101
    termino                        shift and go to state 102
    factor                         shift and go to state 103
    masomenos                      shift and go to state 104
    empty                          shift and go to state 108

state 78

    (51) asignacionarr -> empty .

    CORIZQ          reduce using rule 51 (asignacionarr -> empty .)
    IGU             reduce using rule 51 (asignacionarr -> empty .)


state 79

    (85) decision -> IF PARIZQ . expresion PARDER THEN bloque ELSE bloque
    (52) expresion -> . exp expresionsig
    (62) exp -> . termino expciclo
    (66) termino -> . factor factorciclo
    (70) factor -> . PARIZQ expresion PARDER
    (71) factor -> . masomenos varcte
    (72) factor -> . ID opcionid
    (73) masomenos -> . MAS
    (74) masomenos -> . MENOS
    (75) masomenos -> . empty
    (107) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 97
    ID              shift and go to state 96
    MAS             shift and go to state 105
    MENOS           shift and go to state 106
    CTEI            reduce using rule 107 (empty -> .)
    CTEF            reduce using rule 107 (empty -> .)

  ! ID              [ reduce using rule 107 (empty -> .) ]

    expresion                      shift and go to state 109
    exp                            shift and go to state 101
    termino                        shift and go to state 102
    factor                         shift and go to state 103
    masomenos                      shift and go to state 104
    empty                          shift and go to state 108

state 80

    (86) escritura -> WRITE PARIZQ . escrituraciclo otro PARDER PTOCOM
    (87) escrituraciclo -> . CTE_STRING
    (88) escrituraciclo -> . expresion
    (52) expresion -> . exp expresionsig
    (62) exp -> . termino expciclo
    (66) termino -> . factor factorciclo
    (70) factor -> . PARIZQ expresion PARDER
    (71) factor -> . masomenos varcte
    (72) factor -> . ID opcionid
    (73) masomenos -> . MAS
    (74) masomenos -> . MENOS
    (75) masomenos -> . empty
    (107) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    CTE_STRING      shift and go to state 111
    PARIZQ          shift and go to state 97
    ID              shift and go to state 96
    MAS             shift and go to state 105
    MENOS           shift and go to state 106
    CTEI            reduce using rule 107 (empty -> .)
    CTEF            reduce using rule 107 (empty -> .)

  ! ID              [ reduce using rule 107 (empty -> .) ]

    escrituraciclo                 shift and go to state 110
    expresion                      shift and go to state 112
    exp                            shift and go to state 101
    termino                        shift and go to state 102
    factor                         shift and go to state 103
    masomenos                      shift and go to state 104
    empty                          shift and go to state 108

state 81

    (92) lectura -> READ PARIZQ . iddim ciclodim PARDER PTOCOM
    (95) iddim -> . ID arrexp arrexp

    ID              shift and go to state 84

    iddim                          shift and go to state 113

state 82

    (100) condicional -> WHILE PARIZQ . expresion PARDER DO bloque
    (52) expresion -> . exp expresionsig
    (62) exp -> . termino expciclo
    (66) termino -> . factor factorciclo
    (70) factor -> . PARIZQ expresion PARDER
    (71) factor -> . masomenos varcte
    (72) factor -> . ID opcionid
    (73) masomenos -> . MAS
    (74) masomenos -> . MENOS
    (75) masomenos -> . empty
    (107) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 97
    ID              shift and go to state 96
    MAS             shift and go to state 105
    MENOS           shift and go to state 106
    CTEI            reduce using rule 107 (empty -> .)
    CTEF            reduce using rule 107 (empty -> .)

  ! ID              [ reduce using rule 107 (empty -> .) ]

    expresion                      shift and go to state 114
    exp                            shift and go to state 101
    termino                        shift and go to state 102
    factor                         shift and go to state 103
    masomenos                      shift and go to state 104
    empty                          shift and go to state 108

state 83

    (101) nocondicional -> FOR iddim . IGU expresion TO expresion DO bloque

    IGU             shift and go to state 115


state 84

    (95) iddim -> ID . arrexp arrexp
    (96) arrexp -> . CORIZQ expresion CORDER
    (97) arrexp -> . empty
    (107) empty -> .

  ! shift/reduce conflict for CORIZQ resolved as shift
    CORIZQ          shift and go to state 117
    IGU             reduce using rule 107 (empty -> .)
    COMA            reduce using rule 107 (empty -> .)
    PARDER          reduce using rule 107 (empty -> .)
    MULT            reduce using rule 107 (empty -> .)
    DIV             reduce using rule 107 (empty -> .)
    MAS             reduce using rule 107 (empty -> .)
    MENOS           reduce using rule 107 (empty -> .)
    MAY             reduce using rule 107 (empty -> .)
    MEN             reduce using rule 107 (empty -> .)
    DIF             reduce using rule 107 (empty -> .)
    IGUIGU          reduce using rule 107 (empty -> .)
    AND             reduce using rule 107 (empty -> .)
    OR              reduce using rule 107 (empty -> .)
    CORDER          reduce using rule 107 (empty -> .)
    TO              reduce using rule 107 (empty -> .)
    PTOCOM          reduce using rule 107 (empty -> .)
    DO              reduce using rule 107 (empty -> .)

  ! CORIZQ          [ reduce using rule 107 (empty -> .) ]

    arrexp                         shift and go to state 116
    empty                          shift and go to state 118

state 85

    (21) funcionvoid -> VOID MODULE ID PARIZQ opcionvarsimple PARDER opvars . bloque
    (30) bloque -> . KEYIZQ bloqueopcion KEYDER

    KEYIZQ          shift and go to state 37

    bloque                         shift and go to state 119

state 86

    (24) ciclovarsimple -> COMA varsimple . ciclovarsimple
    (24) ciclovarsimple -> . COMA varsimple ciclovarsimple
    (25) ciclovarsimple -> . empty
    (107) empty -> .

    COMA            shift and go to state 66
    PARDER          reduce using rule 107 (empty -> .)

    ciclovarsimple                 shift and go to state 120
    empty                          shift and go to state 67

state 87

    (27) ident -> ID arrini . arrini
    (28) arrini -> . CORIZQ CORDER
    (29) arrini -> . empty
    (107) empty -> .

    CORIZQ          shift and go to state 88
    COMA            reduce using rule 107 (empty -> .)
    PARDER          reduce using rule 107 (empty -> .)

    arrini                         shift and go to state 121
    empty                          shift and go to state 89

state 88

    (28) arrini -> CORIZQ . CORDER

    CORDER          shift and go to state 122


state 89

    (29) arrini -> empty .

    CORIZQ          reduce using rule 29 (arrini -> empty .)
    COMA            reduce using rule 29 (arrini -> empty .)
    PARDER          reduce using rule 29 (arrini -> empty .)


state 90

    (26) funcion -> tipo MODULE ID PARIZQ opcionvarsimple PARDER opvars . bloquefunc
    (33) bloquefunc -> . KEYIZQ bloqueopcionfunc KEYDER

    KEYIZQ          shift and go to state 124

    bloquefunc                     shift and go to state 123

state 91

    (11) tipociclo -> tipo . opciontipo
    (13) opciontipo -> . ID arr arr varciclo PTOCOM tipociclo
    (14) opciontipo -> . MODULE ID PARIZQ opcionvarsimple PARDER opvars bloquefunc

    ID              shift and go to state 126
    MODULE          shift and go to state 127

    opciontipo                     shift and go to state 125

state 92

    (6) vars -> VARTOKEN tipo ID arr arr varciclo PTOCOM tipociclo .

    VOID            reduce using rule 6 (vars -> VARTOKEN tipo ID arr arr varciclo PTOCOM tipociclo .)
    INT             reduce using rule 6 (vars -> VARTOKEN tipo ID arr arr varciclo PTOCOM tipociclo .)
    FLT             reduce using rule 6 (vars -> VARTOKEN tipo ID arr arr varciclo PTOCOM tipociclo .)
    CHAR            reduce using rule 6 (vars -> VARTOKEN tipo ID arr arr varciclo PTOCOM tipociclo .)
    MAIN            reduce using rule 6 (vars -> VARTOKEN tipo ID arr arr varciclo PTOCOM tipociclo .)
    KEYIZQ          reduce using rule 6 (vars -> VARTOKEN tipo ID arr arr varciclo PTOCOM tipociclo .)


state 93

    (12) tipociclo -> empty .

    VOID            reduce using rule 12 (tipociclo -> empty .)
    INT             reduce using rule 12 (tipociclo -> empty .)
    FLT             reduce using rule 12 (tipociclo -> empty .)
    CHAR            reduce using rule 12 (tipociclo -> empty .)
    MAIN            reduce using rule 12 (tipociclo -> empty .)
    KEYIZQ          reduce using rule 12 (tipociclo -> empty .)


state 94

    (7) varciclo -> COMA ID arr . arr varciclo
    (9) arr -> . CORIZQ CTEI CORDER
    (10) arr -> . empty
    (107) empty -> .

    CORIZQ          shift and go to state 29
    COMA            reduce using rule 107 (empty -> .)
    PTOCOM          reduce using rule 107 (empty -> .)

    arr                            shift and go to state 128
    empty                          shift and go to state 30

state 95

    (49) asignacion -> ID asignacionarr asignacionarr . IGU expresion PTOCOM

    IGU             shift and go to state 129


state 96

    (72) factor -> ID . opcionid
    (76) opcionid -> . arrexp arrexp
    (77) opcionid -> . PARIZQ parametros PARDER
    (96) arrexp -> . CORIZQ expresion CORDER
    (97) arrexp -> . empty
    (107) empty -> .

  ! shift/reduce conflict for CORIZQ resolved as shift
    PARIZQ          shift and go to state 132
    CORIZQ          shift and go to state 117
    MULT            reduce using rule 107 (empty -> .)
    DIV             reduce using rule 107 (empty -> .)
    MAS             reduce using rule 107 (empty -> .)
    MENOS           reduce using rule 107 (empty -> .)
    MAY             reduce using rule 107 (empty -> .)
    MEN             reduce using rule 107 (empty -> .)
    DIF             reduce using rule 107 (empty -> .)
    IGUIGU          reduce using rule 107 (empty -> .)
    AND             reduce using rule 107 (empty -> .)
    OR              reduce using rule 107 (empty -> .)
    COMA            reduce using rule 107 (empty -> .)
    PARDER          reduce using rule 107 (empty -> .)
    CORDER          reduce using rule 107 (empty -> .)
    TO              reduce using rule 107 (empty -> .)
    PTOCOM          reduce using rule 107 (empty -> .)
    DO              reduce using rule 107 (empty -> .)

  ! CORIZQ          [ reduce using rule 107 (empty -> .) ]

    opcionid                       shift and go to state 130
    arrexp                         shift and go to state 131
    empty                          shift and go to state 118

state 97

    (70) factor -> PARIZQ . expresion PARDER
    (52) expresion -> . exp expresionsig
    (62) exp -> . termino expciclo
    (66) termino -> . factor factorciclo
    (70) factor -> . PARIZQ expresion PARDER
    (71) factor -> . masomenos varcte
    (72) factor -> . ID opcionid
    (73) masomenos -> . MAS
    (74) masomenos -> . MENOS
    (75) masomenos -> . empty
    (107) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 97
    ID              shift and go to state 96
    MAS             shift and go to state 105
    MENOS           shift and go to state 106
    CTEI            reduce using rule 107 (empty -> .)
    CTEF            reduce using rule 107 (empty -> .)

  ! ID              [ reduce using rule 107 (empty -> .) ]

    expresion                      shift and go to state 133
    exp                            shift and go to state 101
    termino                        shift and go to state 102
    factor                         shift and go to state 103
    masomenos                      shift and go to state 104
    empty                          shift and go to state 108

state 98

    (91) llamadafunc -> ID PARIZQ parametros . PARDER PTOCOM

    PARDER          shift and go to state 134


state 99

    (81) parametros -> expresion . cicloparametros
    (83) cicloparametros -> . COMA expresion cicloparametros
    (84) cicloparametros -> . empty
    (107) empty -> .

    COMA            shift and go to state 136
    PARDER          reduce using rule 107 (empty -> .)

    cicloparametros                shift and go to state 135
    empty                          shift and go to state 137

state 100

    (82) parametros -> empty .
    (75) masomenos -> empty .

    PARDER          reduce using rule 82 (parametros -> empty .)
    CTEI            reduce using rule 75 (masomenos -> empty .)
    CTEF            reduce using rule 75 (masomenos -> empty .)
    ID              reduce using rule 75 (masomenos -> empty .)


state 101

    (52) expresion -> exp . expresionsig
    (53) expresionsig -> . MAY expresionsigequal exp
    (54) expresionsig -> . MEN expresionsigequal exp
    (55) expresionsig -> . DIF exp
    (56) expresionsig -> . IGUIGU exp
    (57) expresionsig -> . AND exp
    (58) expresionsig -> . OR exp
    (59) expresionsig -> . empty
    (107) empty -> .

    MAY             shift and go to state 139
    MEN             shift and go to state 140
    DIF             shift and go to state 141
    IGUIGU          shift and go to state 142
    AND             shift and go to state 143
    OR              shift and go to state 144
    COMA            reduce using rule 107 (empty -> .)
    PARDER          reduce using rule 107 (empty -> .)
    CORDER          reduce using rule 107 (empty -> .)
    TO              reduce using rule 107 (empty -> .)
    PTOCOM          reduce using rule 107 (empty -> .)
    DO              reduce using rule 107 (empty -> .)

    expresionsig                   shift and go to state 138
    empty                          shift and go to state 145

state 102

    (62) exp -> termino . expciclo
    (63) expciclo -> . MAS exp
    (64) expciclo -> . MENOS exp
    (65) expciclo -> . empty
    (107) empty -> .

    MAS             shift and go to state 147
    MENOS           shift and go to state 148
    MAY             reduce using rule 107 (empty -> .)
    MEN             reduce using rule 107 (empty -> .)
    DIF             reduce using rule 107 (empty -> .)
    IGUIGU          reduce using rule 107 (empty -> .)
    AND             reduce using rule 107 (empty -> .)
    OR              reduce using rule 107 (empty -> .)
    COMA            reduce using rule 107 (empty -> .)
    PARDER          reduce using rule 107 (empty -> .)
    CORDER          reduce using rule 107 (empty -> .)
    TO              reduce using rule 107 (empty -> .)
    PTOCOM          reduce using rule 107 (empty -> .)
    DO              reduce using rule 107 (empty -> .)

    expciclo                       shift and go to state 146
    empty                          shift and go to state 149

state 103

    (66) termino -> factor . factorciclo
    (67) factorciclo -> . MULT termino
    (68) factorciclo -> . DIV termino
    (69) factorciclo -> . empty
    (107) empty -> .

    MULT            shift and go to state 151
    DIV             shift and go to state 152
    MAS             reduce using rule 107 (empty -> .)
    MENOS           reduce using rule 107 (empty -> .)
    MAY             reduce using rule 107 (empty -> .)
    MEN             reduce using rule 107 (empty -> .)
    DIF             reduce using rule 107 (empty -> .)
    IGUIGU          reduce using rule 107 (empty -> .)
    AND             reduce using rule 107 (empty -> .)
    OR              reduce using rule 107 (empty -> .)
    COMA            reduce using rule 107 (empty -> .)
    PARDER          reduce using rule 107 (empty -> .)
    CORDER          reduce using rule 107 (empty -> .)
    TO              reduce using rule 107 (empty -> .)
    PTOCOM          reduce using rule 107 (empty -> .)
    DO              reduce using rule 107 (empty -> .)

    factorciclo                    shift and go to state 150
    empty                          shift and go to state 153

state 104

    (71) factor -> masomenos . varcte
    (78) varcte -> . iddim
    (79) varcte -> . CTEI
    (80) varcte -> . CTEF
    (95) iddim -> . ID arrexp arrexp

    CTEI            shift and go to state 156
    CTEF            shift and go to state 157
    ID              shift and go to state 84

    varcte                         shift and go to state 154
    iddim                          shift and go to state 155

state 105

    (73) masomenos -> MAS .

    CTEI            reduce using rule 73 (masomenos -> MAS .)
    CTEF            reduce using rule 73 (masomenos -> MAS .)
    ID              reduce using rule 73 (masomenos -> MAS .)


state 106

    (74) masomenos -> MENOS .

    CTEI            reduce using rule 74 (masomenos -> MENOS .)
    CTEF            reduce using rule 74 (masomenos -> MENOS .)
    ID              reduce using rule 74 (masomenos -> MENOS .)


state 107

    (50) asignacionarr -> CORIZQ expresion . CORDER

    CORDER          shift and go to state 158


state 108

    (75) masomenos -> empty .

    CTEI            reduce using rule 75 (masomenos -> empty .)
    CTEF            reduce using rule 75 (masomenos -> empty .)
    ID              reduce using rule 75 (masomenos -> empty .)


state 109

    (85) decision -> IF PARIZQ expresion . PARDER THEN bloque ELSE bloque

    PARDER          shift and go to state 159


state 110

    (86) escritura -> WRITE PARIZQ escrituraciclo . otro PARDER PTOCOM
    (89) otro -> . COMA escrituraciclo otro
    (90) otro -> . empty
    (107) empty -> .

    COMA            shift and go to state 161
    PARDER          reduce using rule 107 (empty -> .)

    otro                           shift and go to state 160
    empty                          shift and go to state 162

state 111

    (87) escrituraciclo -> CTE_STRING .

    COMA            reduce using rule 87 (escrituraciclo -> CTE_STRING .)
    PARDER          reduce using rule 87 (escrituraciclo -> CTE_STRING .)


state 112

    (88) escrituraciclo -> expresion .

    COMA            reduce using rule 88 (escrituraciclo -> expresion .)
    PARDER          reduce using rule 88 (escrituraciclo -> expresion .)


state 113

    (92) lectura -> READ PARIZQ iddim . ciclodim PARDER PTOCOM
    (93) ciclodim -> . COMA iddim ciclodim
    (94) ciclodim -> . empty
    (107) empty -> .

    COMA            shift and go to state 164
    PARDER          reduce using rule 107 (empty -> .)

    ciclodim                       shift and go to state 163
    empty                          shift and go to state 165

state 114

    (100) condicional -> WHILE PARIZQ expresion . PARDER DO bloque

    PARDER          shift and go to state 166


state 115

    (101) nocondicional -> FOR iddim IGU . expresion TO expresion DO bloque
    (52) expresion -> . exp expresionsig
    (62) exp -> . termino expciclo
    (66) termino -> . factor factorciclo
    (70) factor -> . PARIZQ expresion PARDER
    (71) factor -> . masomenos varcte
    (72) factor -> . ID opcionid
    (73) masomenos -> . MAS
    (74) masomenos -> . MENOS
    (75) masomenos -> . empty
    (107) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 97
    ID              shift and go to state 96
    MAS             shift and go to state 105
    MENOS           shift and go to state 106
    CTEI            reduce using rule 107 (empty -> .)
    CTEF            reduce using rule 107 (empty -> .)

  ! ID              [ reduce using rule 107 (empty -> .) ]

    expresion                      shift and go to state 167
    exp                            shift and go to state 101
    termino                        shift and go to state 102
    factor                         shift and go to state 103
    masomenos                      shift and go to state 104
    empty                          shift and go to state 108

state 116

    (95) iddim -> ID arrexp . arrexp
    (96) arrexp -> . CORIZQ expresion CORDER
    (97) arrexp -> . empty
    (107) empty -> .

    CORIZQ          shift and go to state 117
    IGU             reduce using rule 107 (empty -> .)
    COMA            reduce using rule 107 (empty -> .)
    PARDER          reduce using rule 107 (empty -> .)
    MULT            reduce using rule 107 (empty -> .)
    DIV             reduce using rule 107 (empty -> .)
    MAS             reduce using rule 107 (empty -> .)
    MENOS           reduce using rule 107 (empty -> .)
    MAY             reduce using rule 107 (empty -> .)
    MEN             reduce using rule 107 (empty -> .)
    DIF             reduce using rule 107 (empty -> .)
    IGUIGU          reduce using rule 107 (empty -> .)
    AND             reduce using rule 107 (empty -> .)
    OR              reduce using rule 107 (empty -> .)
    CORDER          reduce using rule 107 (empty -> .)
    TO              reduce using rule 107 (empty -> .)
    PTOCOM          reduce using rule 107 (empty -> .)
    DO              reduce using rule 107 (empty -> .)

    arrexp                         shift and go to state 168
    empty                          shift and go to state 118

state 117

    (96) arrexp -> CORIZQ . expresion CORDER
    (52) expresion -> . exp expresionsig
    (62) exp -> . termino expciclo
    (66) termino -> . factor factorciclo
    (70) factor -> . PARIZQ expresion PARDER
    (71) factor -> . masomenos varcte
    (72) factor -> . ID opcionid
    (73) masomenos -> . MAS
    (74) masomenos -> . MENOS
    (75) masomenos -> . empty
    (107) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 97
    ID              shift and go to state 96
    MAS             shift and go to state 105
    MENOS           shift and go to state 106
    CTEI            reduce using rule 107 (empty -> .)
    CTEF            reduce using rule 107 (empty -> .)

  ! ID              [ reduce using rule 107 (empty -> .) ]

    expresion                      shift and go to state 169
    exp                            shift and go to state 101
    termino                        shift and go to state 102
    factor                         shift and go to state 103
    masomenos                      shift and go to state 104
    empty                          shift and go to state 108

state 118

    (97) arrexp -> empty .

    CORIZQ          reduce using rule 97 (arrexp -> empty .)
    IGU             reduce using rule 97 (arrexp -> empty .)
    COMA            reduce using rule 97 (arrexp -> empty .)
    PARDER          reduce using rule 97 (arrexp -> empty .)
    MULT            reduce using rule 97 (arrexp -> empty .)
    DIV             reduce using rule 97 (arrexp -> empty .)
    MAS             reduce using rule 97 (arrexp -> empty .)
    MENOS           reduce using rule 97 (arrexp -> empty .)
    MAY             reduce using rule 97 (arrexp -> empty .)
    MEN             reduce using rule 97 (arrexp -> empty .)
    DIF             reduce using rule 97 (arrexp -> empty .)
    IGUIGU          reduce using rule 97 (arrexp -> empty .)
    AND             reduce using rule 97 (arrexp -> empty .)
    OR              reduce using rule 97 (arrexp -> empty .)
    CORDER          reduce using rule 97 (arrexp -> empty .)
    TO              reduce using rule 97 (arrexp -> empty .)
    PTOCOM          reduce using rule 97 (arrexp -> empty .)
    DO              reduce using rule 97 (arrexp -> empty .)


state 119

    (21) funcionvoid -> VOID MODULE ID PARIZQ opcionvarsimple PARDER opvars bloque .

    VOID            reduce using rule 21 (funcionvoid -> VOID MODULE ID PARIZQ opcionvarsimple PARDER opvars bloque .)
    INT             reduce using rule 21 (funcionvoid -> VOID MODULE ID PARIZQ opcionvarsimple PARDER opvars bloque .)
    FLT             reduce using rule 21 (funcionvoid -> VOID MODULE ID PARIZQ opcionvarsimple PARDER opvars bloque .)
    CHAR            reduce using rule 21 (funcionvoid -> VOID MODULE ID PARIZQ opcionvarsimple PARDER opvars bloque .)
    MAIN            reduce using rule 21 (funcionvoid -> VOID MODULE ID PARIZQ opcionvarsimple PARDER opvars bloque .)


state 120

    (24) ciclovarsimple -> COMA varsimple ciclovarsimple .

    PARDER          reduce using rule 24 (ciclovarsimple -> COMA varsimple ciclovarsimple .)


state 121

    (27) ident -> ID arrini arrini .

    COMA            reduce using rule 27 (ident -> ID arrini arrini .)
    PARDER          reduce using rule 27 (ident -> ID arrini arrini .)


state 122

    (28) arrini -> CORIZQ CORDER .

    CORIZQ          reduce using rule 28 (arrini -> CORIZQ CORDER .)
    COMA            reduce using rule 28 (arrini -> CORIZQ CORDER .)
    PARDER          reduce using rule 28 (arrini -> CORIZQ CORDER .)


state 123

    (26) funcion -> tipo MODULE ID PARIZQ opcionvarsimple PARDER opvars bloquefunc .

    VOID            reduce using rule 26 (funcion -> tipo MODULE ID PARIZQ opcionvarsimple PARDER opvars bloquefunc .)
    INT             reduce using rule 26 (funcion -> tipo MODULE ID PARIZQ opcionvarsimple PARDER opvars bloquefunc .)
    FLT             reduce using rule 26 (funcion -> tipo MODULE ID PARIZQ opcionvarsimple PARDER opvars bloquefunc .)
    CHAR            reduce using rule 26 (funcion -> tipo MODULE ID PARIZQ opcionvarsimple PARDER opvars bloquefunc .)
    MAIN            reduce using rule 26 (funcion -> tipo MODULE ID PARIZQ opcionvarsimple PARDER opvars bloquefunc .)


state 124

    (33) bloquefunc -> KEYIZQ . bloqueopcionfunc KEYDER
    (34) bloqueopcionfunc -> . estatutofunc bloqueopcionfunc
    (35) bloqueopcionfunc -> . empty
    (42) estatutofunc -> . asignacion
    (43) estatutofunc -> . decisionfunc
    (44) estatutofunc -> . escritura
    (45) estatutofunc -> . llamadafunc
    (46) estatutofunc -> . repeticionfunc
    (47) estatutofunc -> . lectura
    (48) estatutofunc -> . RETURN PARIZQ expresion PARDER PTOCOM
    (107) empty -> .
    (49) asignacion -> . ID asignacionarr asignacionarr IGU expresion PTOCOM
    (102) decisionfunc -> . IF PARIZQ expresion PARDER THEN bloquefunc ELSE bloquefunc
    (86) escritura -> . WRITE PARIZQ escrituraciclo otro PARDER PTOCOM
    (91) llamadafunc -> . ID PARIZQ parametros PARDER PTOCOM
    (103) repeticionfunc -> . condicionalfunc
    (104) repeticionfunc -> . nocondicionalfunc
    (92) lectura -> . READ PARIZQ iddim ciclodim PARDER PTOCOM
    (105) condicionalfunc -> . WHILE PARIZQ expresion PARDER DO bloquefunc
    (106) nocondicionalfunc -> . FOR iddim IGU expresion TO expresion DO bloquefunc

    RETURN          shift and go to state 179
    KEYDER          reduce using rule 107 (empty -> .)
    ID              shift and go to state 56
    IF              shift and go to state 180
    WRITE           shift and go to state 58
    READ            shift and go to state 61
    WHILE           shift and go to state 183
    FOR             shift and go to state 184

    bloqueopcionfunc               shift and go to state 170
    estatutofunc                   shift and go to state 171
    empty                          shift and go to state 172
    asignacion                     shift and go to state 173
    decisionfunc                   shift and go to state 174
    escritura                      shift and go to state 175
    llamadafunc                    shift and go to state 176
    repeticionfunc                 shift and go to state 177
    lectura                        shift and go to state 178
    condicionalfunc                shift and go to state 181
    nocondicionalfunc              shift and go to state 182

state 125

    (11) tipociclo -> tipo opciontipo .

    VOID            reduce using rule 11 (tipociclo -> tipo opciontipo .)
    INT             reduce using rule 11 (tipociclo -> tipo opciontipo .)
    FLT             reduce using rule 11 (tipociclo -> tipo opciontipo .)
    CHAR            reduce using rule 11 (tipociclo -> tipo opciontipo .)
    MAIN            reduce using rule 11 (tipociclo -> tipo opciontipo .)
    KEYIZQ          reduce using rule 11 (tipociclo -> tipo opciontipo .)


state 126

    (13) opciontipo -> ID . arr arr varciclo PTOCOM tipociclo
    (9) arr -> . CORIZQ CTEI CORDER
    (10) arr -> . empty
    (107) empty -> .

  ! shift/reduce conflict for CORIZQ resolved as shift
    CORIZQ          shift and go to state 29
    COMA            reduce using rule 107 (empty -> .)
    PTOCOM          reduce using rule 107 (empty -> .)

  ! CORIZQ          [ reduce using rule 107 (empty -> .) ]

    arr                            shift and go to state 185
    empty                          shift and go to state 30

state 127

    (14) opciontipo -> MODULE . ID PARIZQ opcionvarsimple PARDER opvars bloquefunc

    ID              shift and go to state 186


state 128

    (7) varciclo -> COMA ID arr arr . varciclo
    (7) varciclo -> . COMA ID arr arr varciclo
    (8) varciclo -> . empty
    (107) empty -> .

    COMA            shift and go to state 44
    PTOCOM          reduce using rule 107 (empty -> .)

    varciclo                       shift and go to state 187
    empty                          shift and go to state 45

state 129

    (49) asignacion -> ID asignacionarr asignacionarr IGU . expresion PTOCOM
    (52) expresion -> . exp expresionsig
    (62) exp -> . termino expciclo
    (66) termino -> . factor factorciclo
    (70) factor -> . PARIZQ expresion PARDER
    (71) factor -> . masomenos varcte
    (72) factor -> . ID opcionid
    (73) masomenos -> . MAS
    (74) masomenos -> . MENOS
    (75) masomenos -> . empty
    (107) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 97
    ID              shift and go to state 96
    MAS             shift and go to state 105
    MENOS           shift and go to state 106
    CTEI            reduce using rule 107 (empty -> .)
    CTEF            reduce using rule 107 (empty -> .)

  ! ID              [ reduce using rule 107 (empty -> .) ]

    expresion                      shift and go to state 188
    exp                            shift and go to state 101
    termino                        shift and go to state 102
    factor                         shift and go to state 103
    masomenos                      shift and go to state 104
    empty                          shift and go to state 108

state 130

    (72) factor -> ID opcionid .

    MULT            reduce using rule 72 (factor -> ID opcionid .)
    DIV             reduce using rule 72 (factor -> ID opcionid .)
    MAS             reduce using rule 72 (factor -> ID opcionid .)
    MENOS           reduce using rule 72 (factor -> ID opcionid .)
    MAY             reduce using rule 72 (factor -> ID opcionid .)
    MEN             reduce using rule 72 (factor -> ID opcionid .)
    DIF             reduce using rule 72 (factor -> ID opcionid .)
    IGUIGU          reduce using rule 72 (factor -> ID opcionid .)
    AND             reduce using rule 72 (factor -> ID opcionid .)
    OR              reduce using rule 72 (factor -> ID opcionid .)
    COMA            reduce using rule 72 (factor -> ID opcionid .)
    PARDER          reduce using rule 72 (factor -> ID opcionid .)
    CORDER          reduce using rule 72 (factor -> ID opcionid .)
    TO              reduce using rule 72 (factor -> ID opcionid .)
    PTOCOM          reduce using rule 72 (factor -> ID opcionid .)
    DO              reduce using rule 72 (factor -> ID opcionid .)


state 131

    (76) opcionid -> arrexp . arrexp
    (96) arrexp -> . CORIZQ expresion CORDER
    (97) arrexp -> . empty
    (107) empty -> .

    CORIZQ          shift and go to state 117
    MULT            reduce using rule 107 (empty -> .)
    DIV             reduce using rule 107 (empty -> .)
    MAS             reduce using rule 107 (empty -> .)
    MENOS           reduce using rule 107 (empty -> .)
    MAY             reduce using rule 107 (empty -> .)
    MEN             reduce using rule 107 (empty -> .)
    DIF             reduce using rule 107 (empty -> .)
    IGUIGU          reduce using rule 107 (empty -> .)
    AND             reduce using rule 107 (empty -> .)
    OR              reduce using rule 107 (empty -> .)
    COMA            reduce using rule 107 (empty -> .)
    PARDER          reduce using rule 107 (empty -> .)
    CORDER          reduce using rule 107 (empty -> .)
    TO              reduce using rule 107 (empty -> .)
    PTOCOM          reduce using rule 107 (empty -> .)
    DO              reduce using rule 107 (empty -> .)

    arrexp                         shift and go to state 189
    empty                          shift and go to state 118

state 132

    (77) opcionid -> PARIZQ . parametros PARDER
    (81) parametros -> . expresion cicloparametros
    (82) parametros -> . empty
    (52) expresion -> . exp expresionsig
    (107) empty -> .
    (62) exp -> . termino expciclo
    (66) termino -> . factor factorciclo
    (70) factor -> . PARIZQ expresion PARDER
    (71) factor -> . masomenos varcte
    (72) factor -> . ID opcionid
    (73) masomenos -> . MAS
    (74) masomenos -> . MENOS
    (75) masomenos -> . empty

  ! shift/reduce conflict for ID resolved as shift
    PARDER          reduce using rule 107 (empty -> .)
    CTEI            reduce using rule 107 (empty -> .)
    CTEF            reduce using rule 107 (empty -> .)
    PARIZQ          shift and go to state 97
    ID              shift and go to state 96
    MAS             shift and go to state 105
    MENOS           shift and go to state 106

  ! ID              [ reduce using rule 107 (empty -> .) ]

    parametros                     shift and go to state 190
    expresion                      shift and go to state 99
    empty                          shift and go to state 100
    exp                            shift and go to state 101
    termino                        shift and go to state 102
    factor                         shift and go to state 103
    masomenos                      shift and go to state 104

state 133

    (70) factor -> PARIZQ expresion . PARDER

    PARDER          shift and go to state 191


state 134

    (91) llamadafunc -> ID PARIZQ parametros PARDER . PTOCOM

    PTOCOM          shift and go to state 192


state 135

    (81) parametros -> expresion cicloparametros .

    PARDER          reduce using rule 81 (parametros -> expresion cicloparametros .)


state 136

    (83) cicloparametros -> COMA . expresion cicloparametros
    (52) expresion -> . exp expresionsig
    (62) exp -> . termino expciclo
    (66) termino -> . factor factorciclo
    (70) factor -> . PARIZQ expresion PARDER
    (71) factor -> . masomenos varcte
    (72) factor -> . ID opcionid
    (73) masomenos -> . MAS
    (74) masomenos -> . MENOS
    (75) masomenos -> . empty
    (107) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 97
    ID              shift and go to state 96
    MAS             shift and go to state 105
    MENOS           shift and go to state 106
    CTEI            reduce using rule 107 (empty -> .)
    CTEF            reduce using rule 107 (empty -> .)

  ! ID              [ reduce using rule 107 (empty -> .) ]

    expresion                      shift and go to state 193
    exp                            shift and go to state 101
    termino                        shift and go to state 102
    factor                         shift and go to state 103
    masomenos                      shift and go to state 104
    empty                          shift and go to state 108

state 137

    (84) cicloparametros -> empty .

    PARDER          reduce using rule 84 (cicloparametros -> empty .)


state 138

    (52) expresion -> exp expresionsig .

    COMA            reduce using rule 52 (expresion -> exp expresionsig .)
    PARDER          reduce using rule 52 (expresion -> exp expresionsig .)
    CORDER          reduce using rule 52 (expresion -> exp expresionsig .)
    TO              reduce using rule 52 (expresion -> exp expresionsig .)
    PTOCOM          reduce using rule 52 (expresion -> exp expresionsig .)
    DO              reduce using rule 52 (expresion -> exp expresionsig .)


state 139

    (53) expresionsig -> MAY . expresionsigequal exp
    (60) expresionsigequal -> . IGU
    (61) expresionsigequal -> . empty
    (107) empty -> .

    IGU             shift and go to state 195
    PARIZQ          reduce using rule 107 (empty -> .)
    ID              reduce using rule 107 (empty -> .)
    MAS             reduce using rule 107 (empty -> .)
    MENOS           reduce using rule 107 (empty -> .)
    CTEI            reduce using rule 107 (empty -> .)
    CTEF            reduce using rule 107 (empty -> .)

    expresionsigequal              shift and go to state 194
    empty                          shift and go to state 196

state 140

    (54) expresionsig -> MEN . expresionsigequal exp
    (60) expresionsigequal -> . IGU
    (61) expresionsigequal -> . empty
    (107) empty -> .

    IGU             shift and go to state 195
    PARIZQ          reduce using rule 107 (empty -> .)
    ID              reduce using rule 107 (empty -> .)
    MAS             reduce using rule 107 (empty -> .)
    MENOS           reduce using rule 107 (empty -> .)
    CTEI            reduce using rule 107 (empty -> .)
    CTEF            reduce using rule 107 (empty -> .)

    expresionsigequal              shift and go to state 197
    empty                          shift and go to state 196

state 141

    (55) expresionsig -> DIF . exp
    (62) exp -> . termino expciclo
    (66) termino -> . factor factorciclo
    (70) factor -> . PARIZQ expresion PARDER
    (71) factor -> . masomenos varcte
    (72) factor -> . ID opcionid
    (73) masomenos -> . MAS
    (74) masomenos -> . MENOS
    (75) masomenos -> . empty
    (107) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 97
    ID              shift and go to state 96
    MAS             shift and go to state 105
    MENOS           shift and go to state 106
    CTEI            reduce using rule 107 (empty -> .)
    CTEF            reduce using rule 107 (empty -> .)

  ! ID              [ reduce using rule 107 (empty -> .) ]

    exp                            shift and go to state 198
    termino                        shift and go to state 102
    factor                         shift and go to state 103
    masomenos                      shift and go to state 104
    empty                          shift and go to state 108

state 142

    (56) expresionsig -> IGUIGU . exp
    (62) exp -> . termino expciclo
    (66) termino -> . factor factorciclo
    (70) factor -> . PARIZQ expresion PARDER
    (71) factor -> . masomenos varcte
    (72) factor -> . ID opcionid
    (73) masomenos -> . MAS
    (74) masomenos -> . MENOS
    (75) masomenos -> . empty
    (107) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 97
    ID              shift and go to state 96
    MAS             shift and go to state 105
    MENOS           shift and go to state 106
    CTEI            reduce using rule 107 (empty -> .)
    CTEF            reduce using rule 107 (empty -> .)

  ! ID              [ reduce using rule 107 (empty -> .) ]

    exp                            shift and go to state 199
    termino                        shift and go to state 102
    factor                         shift and go to state 103
    masomenos                      shift and go to state 104
    empty                          shift and go to state 108

state 143

    (57) expresionsig -> AND . exp
    (62) exp -> . termino expciclo
    (66) termino -> . factor factorciclo
    (70) factor -> . PARIZQ expresion PARDER
    (71) factor -> . masomenos varcte
    (72) factor -> . ID opcionid
    (73) masomenos -> . MAS
    (74) masomenos -> . MENOS
    (75) masomenos -> . empty
    (107) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 97
    ID              shift and go to state 96
    MAS             shift and go to state 105
    MENOS           shift and go to state 106
    CTEI            reduce using rule 107 (empty -> .)
    CTEF            reduce using rule 107 (empty -> .)

  ! ID              [ reduce using rule 107 (empty -> .) ]

    exp                            shift and go to state 200
    termino                        shift and go to state 102
    factor                         shift and go to state 103
    masomenos                      shift and go to state 104
    empty                          shift and go to state 108

state 144

    (58) expresionsig -> OR . exp
    (62) exp -> . termino expciclo
    (66) termino -> . factor factorciclo
    (70) factor -> . PARIZQ expresion PARDER
    (71) factor -> . masomenos varcte
    (72) factor -> . ID opcionid
    (73) masomenos -> . MAS
    (74) masomenos -> . MENOS
    (75) masomenos -> . empty
    (107) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 97
    ID              shift and go to state 96
    MAS             shift and go to state 105
    MENOS           shift and go to state 106
    CTEI            reduce using rule 107 (empty -> .)
    CTEF            reduce using rule 107 (empty -> .)

  ! ID              [ reduce using rule 107 (empty -> .) ]

    exp                            shift and go to state 201
    termino                        shift and go to state 102
    factor                         shift and go to state 103
    masomenos                      shift and go to state 104
    empty                          shift and go to state 108

state 145

    (59) expresionsig -> empty .

    COMA            reduce using rule 59 (expresionsig -> empty .)
    PARDER          reduce using rule 59 (expresionsig -> empty .)
    CORDER          reduce using rule 59 (expresionsig -> empty .)
    TO              reduce using rule 59 (expresionsig -> empty .)
    PTOCOM          reduce using rule 59 (expresionsig -> empty .)
    DO              reduce using rule 59 (expresionsig -> empty .)


state 146

    (62) exp -> termino expciclo .

    MAY             reduce using rule 62 (exp -> termino expciclo .)
    MEN             reduce using rule 62 (exp -> termino expciclo .)
    DIF             reduce using rule 62 (exp -> termino expciclo .)
    IGUIGU          reduce using rule 62 (exp -> termino expciclo .)
    AND             reduce using rule 62 (exp -> termino expciclo .)
    OR              reduce using rule 62 (exp -> termino expciclo .)
    COMA            reduce using rule 62 (exp -> termino expciclo .)
    PARDER          reduce using rule 62 (exp -> termino expciclo .)
    CORDER          reduce using rule 62 (exp -> termino expciclo .)
    TO              reduce using rule 62 (exp -> termino expciclo .)
    PTOCOM          reduce using rule 62 (exp -> termino expciclo .)
    DO              reduce using rule 62 (exp -> termino expciclo .)


state 147

    (63) expciclo -> MAS . exp
    (62) exp -> . termino expciclo
    (66) termino -> . factor factorciclo
    (70) factor -> . PARIZQ expresion PARDER
    (71) factor -> . masomenos varcte
    (72) factor -> . ID opcionid
    (73) masomenos -> . MAS
    (74) masomenos -> . MENOS
    (75) masomenos -> . empty
    (107) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 97
    ID              shift and go to state 96
    MAS             shift and go to state 105
    MENOS           shift and go to state 106
    CTEI            reduce using rule 107 (empty -> .)
    CTEF            reduce using rule 107 (empty -> .)

  ! ID              [ reduce using rule 107 (empty -> .) ]

    exp                            shift and go to state 202
    termino                        shift and go to state 102
    factor                         shift and go to state 103
    masomenos                      shift and go to state 104
    empty                          shift and go to state 108

state 148

    (64) expciclo -> MENOS . exp
    (62) exp -> . termino expciclo
    (66) termino -> . factor factorciclo
    (70) factor -> . PARIZQ expresion PARDER
    (71) factor -> . masomenos varcte
    (72) factor -> . ID opcionid
    (73) masomenos -> . MAS
    (74) masomenos -> . MENOS
    (75) masomenos -> . empty
    (107) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 97
    ID              shift and go to state 96
    MAS             shift and go to state 105
    MENOS           shift and go to state 106
    CTEI            reduce using rule 107 (empty -> .)
    CTEF            reduce using rule 107 (empty -> .)

  ! ID              [ reduce using rule 107 (empty -> .) ]

    exp                            shift and go to state 203
    termino                        shift and go to state 102
    factor                         shift and go to state 103
    masomenos                      shift and go to state 104
    empty                          shift and go to state 108

state 149

    (65) expciclo -> empty .

    MAY             reduce using rule 65 (expciclo -> empty .)
    MEN             reduce using rule 65 (expciclo -> empty .)
    DIF             reduce using rule 65 (expciclo -> empty .)
    IGUIGU          reduce using rule 65 (expciclo -> empty .)
    AND             reduce using rule 65 (expciclo -> empty .)
    OR              reduce using rule 65 (expciclo -> empty .)
    COMA            reduce using rule 65 (expciclo -> empty .)
    PARDER          reduce using rule 65 (expciclo -> empty .)
    CORDER          reduce using rule 65 (expciclo -> empty .)
    TO              reduce using rule 65 (expciclo -> empty .)
    PTOCOM          reduce using rule 65 (expciclo -> empty .)
    DO              reduce using rule 65 (expciclo -> empty .)


state 150

    (66) termino -> factor factorciclo .

    MAS             reduce using rule 66 (termino -> factor factorciclo .)
    MENOS           reduce using rule 66 (termino -> factor factorciclo .)
    MAY             reduce using rule 66 (termino -> factor factorciclo .)
    MEN             reduce using rule 66 (termino -> factor factorciclo .)
    DIF             reduce using rule 66 (termino -> factor factorciclo .)
    IGUIGU          reduce using rule 66 (termino -> factor factorciclo .)
    AND             reduce using rule 66 (termino -> factor factorciclo .)
    OR              reduce using rule 66 (termino -> factor factorciclo .)
    COMA            reduce using rule 66 (termino -> factor factorciclo .)
    PARDER          reduce using rule 66 (termino -> factor factorciclo .)
    CORDER          reduce using rule 66 (termino -> factor factorciclo .)
    TO              reduce using rule 66 (termino -> factor factorciclo .)
    PTOCOM          reduce using rule 66 (termino -> factor factorciclo .)
    DO              reduce using rule 66 (termino -> factor factorciclo .)


state 151

    (67) factorciclo -> MULT . termino
    (66) termino -> . factor factorciclo
    (70) factor -> . PARIZQ expresion PARDER
    (71) factor -> . masomenos varcte
    (72) factor -> . ID opcionid
    (73) masomenos -> . MAS
    (74) masomenos -> . MENOS
    (75) masomenos -> . empty
    (107) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 97
    ID              shift and go to state 96
    MAS             shift and go to state 105
    MENOS           shift and go to state 106
    CTEI            reduce using rule 107 (empty -> .)
    CTEF            reduce using rule 107 (empty -> .)

  ! ID              [ reduce using rule 107 (empty -> .) ]

    termino                        shift and go to state 204
    factor                         shift and go to state 103
    masomenos                      shift and go to state 104
    empty                          shift and go to state 108

state 152

    (68) factorciclo -> DIV . termino
    (66) termino -> . factor factorciclo
    (70) factor -> . PARIZQ expresion PARDER
    (71) factor -> . masomenos varcte
    (72) factor -> . ID opcionid
    (73) masomenos -> . MAS
    (74) masomenos -> . MENOS
    (75) masomenos -> . empty
    (107) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 97
    ID              shift and go to state 96
    MAS             shift and go to state 105
    MENOS           shift and go to state 106
    CTEI            reduce using rule 107 (empty -> .)
    CTEF            reduce using rule 107 (empty -> .)

  ! ID              [ reduce using rule 107 (empty -> .) ]

    termino                        shift and go to state 205
    factor                         shift and go to state 103
    masomenos                      shift and go to state 104
    empty                          shift and go to state 108

state 153

    (69) factorciclo -> empty .

    MAS             reduce using rule 69 (factorciclo -> empty .)
    MENOS           reduce using rule 69 (factorciclo -> empty .)
    MAY             reduce using rule 69 (factorciclo -> empty .)
    MEN             reduce using rule 69 (factorciclo -> empty .)
    DIF             reduce using rule 69 (factorciclo -> empty .)
    IGUIGU          reduce using rule 69 (factorciclo -> empty .)
    AND             reduce using rule 69 (factorciclo -> empty .)
    OR              reduce using rule 69 (factorciclo -> empty .)
    COMA            reduce using rule 69 (factorciclo -> empty .)
    PARDER          reduce using rule 69 (factorciclo -> empty .)
    CORDER          reduce using rule 69 (factorciclo -> empty .)
    TO              reduce using rule 69 (factorciclo -> empty .)
    PTOCOM          reduce using rule 69 (factorciclo -> empty .)
    DO              reduce using rule 69 (factorciclo -> empty .)


state 154

    (71) factor -> masomenos varcte .

    MULT            reduce using rule 71 (factor -> masomenos varcte .)
    DIV             reduce using rule 71 (factor -> masomenos varcte .)
    MAS             reduce using rule 71 (factor -> masomenos varcte .)
    MENOS           reduce using rule 71 (factor -> masomenos varcte .)
    MAY             reduce using rule 71 (factor -> masomenos varcte .)
    MEN             reduce using rule 71 (factor -> masomenos varcte .)
    DIF             reduce using rule 71 (factor -> masomenos varcte .)
    IGUIGU          reduce using rule 71 (factor -> masomenos varcte .)
    AND             reduce using rule 71 (factor -> masomenos varcte .)
    OR              reduce using rule 71 (factor -> masomenos varcte .)
    COMA            reduce using rule 71 (factor -> masomenos varcte .)
    PARDER          reduce using rule 71 (factor -> masomenos varcte .)
    CORDER          reduce using rule 71 (factor -> masomenos varcte .)
    TO              reduce using rule 71 (factor -> masomenos varcte .)
    PTOCOM          reduce using rule 71 (factor -> masomenos varcte .)
    DO              reduce using rule 71 (factor -> masomenos varcte .)


state 155

    (78) varcte -> iddim .

    MULT            reduce using rule 78 (varcte -> iddim .)
    DIV             reduce using rule 78 (varcte -> iddim .)
    MAS             reduce using rule 78 (varcte -> iddim .)
    MENOS           reduce using rule 78 (varcte -> iddim .)
    MAY             reduce using rule 78 (varcte -> iddim .)
    MEN             reduce using rule 78 (varcte -> iddim .)
    DIF             reduce using rule 78 (varcte -> iddim .)
    IGUIGU          reduce using rule 78 (varcte -> iddim .)
    AND             reduce using rule 78 (varcte -> iddim .)
    OR              reduce using rule 78 (varcte -> iddim .)
    COMA            reduce using rule 78 (varcte -> iddim .)
    PARDER          reduce using rule 78 (varcte -> iddim .)
    CORDER          reduce using rule 78 (varcte -> iddim .)
    TO              reduce using rule 78 (varcte -> iddim .)
    PTOCOM          reduce using rule 78 (varcte -> iddim .)
    DO              reduce using rule 78 (varcte -> iddim .)


state 156

    (79) varcte -> CTEI .

    MULT            reduce using rule 79 (varcte -> CTEI .)
    DIV             reduce using rule 79 (varcte -> CTEI .)
    MAS             reduce using rule 79 (varcte -> CTEI .)
    MENOS           reduce using rule 79 (varcte -> CTEI .)
    MAY             reduce using rule 79 (varcte -> CTEI .)
    MEN             reduce using rule 79 (varcte -> CTEI .)
    DIF             reduce using rule 79 (varcte -> CTEI .)
    IGUIGU          reduce using rule 79 (varcte -> CTEI .)
    AND             reduce using rule 79 (varcte -> CTEI .)
    OR              reduce using rule 79 (varcte -> CTEI .)
    COMA            reduce using rule 79 (varcte -> CTEI .)
    PARDER          reduce using rule 79 (varcte -> CTEI .)
    CORDER          reduce using rule 79 (varcte -> CTEI .)
    TO              reduce using rule 79 (varcte -> CTEI .)
    PTOCOM          reduce using rule 79 (varcte -> CTEI .)
    DO              reduce using rule 79 (varcte -> CTEI .)


state 157

    (80) varcte -> CTEF .

    MULT            reduce using rule 80 (varcte -> CTEF .)
    DIV             reduce using rule 80 (varcte -> CTEF .)
    MAS             reduce using rule 80 (varcte -> CTEF .)
    MENOS           reduce using rule 80 (varcte -> CTEF .)
    MAY             reduce using rule 80 (varcte -> CTEF .)
    MEN             reduce using rule 80 (varcte -> CTEF .)
    DIF             reduce using rule 80 (varcte -> CTEF .)
    IGUIGU          reduce using rule 80 (varcte -> CTEF .)
    AND             reduce using rule 80 (varcte -> CTEF .)
    OR              reduce using rule 80 (varcte -> CTEF .)
    COMA            reduce using rule 80 (varcte -> CTEF .)
    PARDER          reduce using rule 80 (varcte -> CTEF .)
    CORDER          reduce using rule 80 (varcte -> CTEF .)
    TO              reduce using rule 80 (varcte -> CTEF .)
    PTOCOM          reduce using rule 80 (varcte -> CTEF .)
    DO              reduce using rule 80 (varcte -> CTEF .)


state 158

    (50) asignacionarr -> CORIZQ expresion CORDER .

    CORIZQ          reduce using rule 50 (asignacionarr -> CORIZQ expresion CORDER .)
    IGU             reduce using rule 50 (asignacionarr -> CORIZQ expresion CORDER .)


state 159

    (85) decision -> IF PARIZQ expresion PARDER . THEN bloque ELSE bloque

    THEN            shift and go to state 206


state 160

    (86) escritura -> WRITE PARIZQ escrituraciclo otro . PARDER PTOCOM

    PARDER          shift and go to state 207


state 161

    (89) otro -> COMA . escrituraciclo otro
    (87) escrituraciclo -> . CTE_STRING
    (88) escrituraciclo -> . expresion
    (52) expresion -> . exp expresionsig
    (62) exp -> . termino expciclo
    (66) termino -> . factor factorciclo
    (70) factor -> . PARIZQ expresion PARDER
    (71) factor -> . masomenos varcte
    (72) factor -> . ID opcionid
    (73) masomenos -> . MAS
    (74) masomenos -> . MENOS
    (75) masomenos -> . empty
    (107) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    CTE_STRING      shift and go to state 111
    PARIZQ          shift and go to state 97
    ID              shift and go to state 96
    MAS             shift and go to state 105
    MENOS           shift and go to state 106
    CTEI            reduce using rule 107 (empty -> .)
    CTEF            reduce using rule 107 (empty -> .)

  ! ID              [ reduce using rule 107 (empty -> .) ]

    escrituraciclo                 shift and go to state 208
    expresion                      shift and go to state 112
    exp                            shift and go to state 101
    termino                        shift and go to state 102
    factor                         shift and go to state 103
    masomenos                      shift and go to state 104
    empty                          shift and go to state 108

state 162

    (90) otro -> empty .

    PARDER          reduce using rule 90 (otro -> empty .)


state 163

    (92) lectura -> READ PARIZQ iddim ciclodim . PARDER PTOCOM

    PARDER          shift and go to state 209


state 164

    (93) ciclodim -> COMA . iddim ciclodim
    (95) iddim -> . ID arrexp arrexp

    ID              shift and go to state 84

    iddim                          shift and go to state 210

state 165

    (94) ciclodim -> empty .

    PARDER          reduce using rule 94 (ciclodim -> empty .)


state 166

    (100) condicional -> WHILE PARIZQ expresion PARDER . DO bloque

    DO              shift and go to state 211


state 167

    (101) nocondicional -> FOR iddim IGU expresion . TO expresion DO bloque

    TO              shift and go to state 212


state 168

    (95) iddim -> ID arrexp arrexp .

    IGU             reduce using rule 95 (iddim -> ID arrexp arrexp .)
    COMA            reduce using rule 95 (iddim -> ID arrexp arrexp .)
    PARDER          reduce using rule 95 (iddim -> ID arrexp arrexp .)
    MULT            reduce using rule 95 (iddim -> ID arrexp arrexp .)
    DIV             reduce using rule 95 (iddim -> ID arrexp arrexp .)
    MAS             reduce using rule 95 (iddim -> ID arrexp arrexp .)
    MENOS           reduce using rule 95 (iddim -> ID arrexp arrexp .)
    MAY             reduce using rule 95 (iddim -> ID arrexp arrexp .)
    MEN             reduce using rule 95 (iddim -> ID arrexp arrexp .)
    DIF             reduce using rule 95 (iddim -> ID arrexp arrexp .)
    IGUIGU          reduce using rule 95 (iddim -> ID arrexp arrexp .)
    AND             reduce using rule 95 (iddim -> ID arrexp arrexp .)
    OR              reduce using rule 95 (iddim -> ID arrexp arrexp .)
    CORDER          reduce using rule 95 (iddim -> ID arrexp arrexp .)
    TO              reduce using rule 95 (iddim -> ID arrexp arrexp .)
    PTOCOM          reduce using rule 95 (iddim -> ID arrexp arrexp .)
    DO              reduce using rule 95 (iddim -> ID arrexp arrexp .)


state 169

    (96) arrexp -> CORIZQ expresion . CORDER

    CORDER          shift and go to state 213


state 170

    (33) bloquefunc -> KEYIZQ bloqueopcionfunc . KEYDER

    KEYDER          shift and go to state 214


state 171

    (34) bloqueopcionfunc -> estatutofunc . bloqueopcionfunc
    (34) bloqueopcionfunc -> . estatutofunc bloqueopcionfunc
    (35) bloqueopcionfunc -> . empty
    (42) estatutofunc -> . asignacion
    (43) estatutofunc -> . decisionfunc
    (44) estatutofunc -> . escritura
    (45) estatutofunc -> . llamadafunc
    (46) estatutofunc -> . repeticionfunc
    (47) estatutofunc -> . lectura
    (48) estatutofunc -> . RETURN PARIZQ expresion PARDER PTOCOM
    (107) empty -> .
    (49) asignacion -> . ID asignacionarr asignacionarr IGU expresion PTOCOM
    (102) decisionfunc -> . IF PARIZQ expresion PARDER THEN bloquefunc ELSE bloquefunc
    (86) escritura -> . WRITE PARIZQ escrituraciclo otro PARDER PTOCOM
    (91) llamadafunc -> . ID PARIZQ parametros PARDER PTOCOM
    (103) repeticionfunc -> . condicionalfunc
    (104) repeticionfunc -> . nocondicionalfunc
    (92) lectura -> . READ PARIZQ iddim ciclodim PARDER PTOCOM
    (105) condicionalfunc -> . WHILE PARIZQ expresion PARDER DO bloquefunc
    (106) nocondicionalfunc -> . FOR iddim IGU expresion TO expresion DO bloquefunc

    RETURN          shift and go to state 179
    KEYDER          reduce using rule 107 (empty -> .)
    ID              shift and go to state 56
    IF              shift and go to state 180
    WRITE           shift and go to state 58
    READ            shift and go to state 61
    WHILE           shift and go to state 183
    FOR             shift and go to state 184

    estatutofunc                   shift and go to state 171
    bloqueopcionfunc               shift and go to state 215
    empty                          shift and go to state 172
    asignacion                     shift and go to state 173
    decisionfunc                   shift and go to state 174
    escritura                      shift and go to state 175
    llamadafunc                    shift and go to state 176
    repeticionfunc                 shift and go to state 177
    lectura                        shift and go to state 178
    condicionalfunc                shift and go to state 181
    nocondicionalfunc              shift and go to state 182

state 172

    (35) bloqueopcionfunc -> empty .

    KEYDER          reduce using rule 35 (bloqueopcionfunc -> empty .)


state 173

    (42) estatutofunc -> asignacion .

    RETURN          reduce using rule 42 (estatutofunc -> asignacion .)
    ID              reduce using rule 42 (estatutofunc -> asignacion .)
    IF              reduce using rule 42 (estatutofunc -> asignacion .)
    WRITE           reduce using rule 42 (estatutofunc -> asignacion .)
    READ            reduce using rule 42 (estatutofunc -> asignacion .)
    WHILE           reduce using rule 42 (estatutofunc -> asignacion .)
    FOR             reduce using rule 42 (estatutofunc -> asignacion .)
    KEYDER          reduce using rule 42 (estatutofunc -> asignacion .)


state 174

    (43) estatutofunc -> decisionfunc .

    RETURN          reduce using rule 43 (estatutofunc -> decisionfunc .)
    ID              reduce using rule 43 (estatutofunc -> decisionfunc .)
    IF              reduce using rule 43 (estatutofunc -> decisionfunc .)
    WRITE           reduce using rule 43 (estatutofunc -> decisionfunc .)
    READ            reduce using rule 43 (estatutofunc -> decisionfunc .)
    WHILE           reduce using rule 43 (estatutofunc -> decisionfunc .)
    FOR             reduce using rule 43 (estatutofunc -> decisionfunc .)
    KEYDER          reduce using rule 43 (estatutofunc -> decisionfunc .)


state 175

    (44) estatutofunc -> escritura .

    RETURN          reduce using rule 44 (estatutofunc -> escritura .)
    ID              reduce using rule 44 (estatutofunc -> escritura .)
    IF              reduce using rule 44 (estatutofunc -> escritura .)
    WRITE           reduce using rule 44 (estatutofunc -> escritura .)
    READ            reduce using rule 44 (estatutofunc -> escritura .)
    WHILE           reduce using rule 44 (estatutofunc -> escritura .)
    FOR             reduce using rule 44 (estatutofunc -> escritura .)
    KEYDER          reduce using rule 44 (estatutofunc -> escritura .)


state 176

    (45) estatutofunc -> llamadafunc .

    RETURN          reduce using rule 45 (estatutofunc -> llamadafunc .)
    ID              reduce using rule 45 (estatutofunc -> llamadafunc .)
    IF              reduce using rule 45 (estatutofunc -> llamadafunc .)
    WRITE           reduce using rule 45 (estatutofunc -> llamadafunc .)
    READ            reduce using rule 45 (estatutofunc -> llamadafunc .)
    WHILE           reduce using rule 45 (estatutofunc -> llamadafunc .)
    FOR             reduce using rule 45 (estatutofunc -> llamadafunc .)
    KEYDER          reduce using rule 45 (estatutofunc -> llamadafunc .)


state 177

    (46) estatutofunc -> repeticionfunc .

    RETURN          reduce using rule 46 (estatutofunc -> repeticionfunc .)
    ID              reduce using rule 46 (estatutofunc -> repeticionfunc .)
    IF              reduce using rule 46 (estatutofunc -> repeticionfunc .)
    WRITE           reduce using rule 46 (estatutofunc -> repeticionfunc .)
    READ            reduce using rule 46 (estatutofunc -> repeticionfunc .)
    WHILE           reduce using rule 46 (estatutofunc -> repeticionfunc .)
    FOR             reduce using rule 46 (estatutofunc -> repeticionfunc .)
    KEYDER          reduce using rule 46 (estatutofunc -> repeticionfunc .)


state 178

    (47) estatutofunc -> lectura .

    RETURN          reduce using rule 47 (estatutofunc -> lectura .)
    ID              reduce using rule 47 (estatutofunc -> lectura .)
    IF              reduce using rule 47 (estatutofunc -> lectura .)
    WRITE           reduce using rule 47 (estatutofunc -> lectura .)
    READ            reduce using rule 47 (estatutofunc -> lectura .)
    WHILE           reduce using rule 47 (estatutofunc -> lectura .)
    FOR             reduce using rule 47 (estatutofunc -> lectura .)
    KEYDER          reduce using rule 47 (estatutofunc -> lectura .)


state 179

    (48) estatutofunc -> RETURN . PARIZQ expresion PARDER PTOCOM

    PARIZQ          shift and go to state 216


state 180

    (102) decisionfunc -> IF . PARIZQ expresion PARDER THEN bloquefunc ELSE bloquefunc

    PARIZQ          shift and go to state 217


state 181

    (103) repeticionfunc -> condicionalfunc .

    RETURN          reduce using rule 103 (repeticionfunc -> condicionalfunc .)
    ID              reduce using rule 103 (repeticionfunc -> condicionalfunc .)
    IF              reduce using rule 103 (repeticionfunc -> condicionalfunc .)
    WRITE           reduce using rule 103 (repeticionfunc -> condicionalfunc .)
    READ            reduce using rule 103 (repeticionfunc -> condicionalfunc .)
    WHILE           reduce using rule 103 (repeticionfunc -> condicionalfunc .)
    FOR             reduce using rule 103 (repeticionfunc -> condicionalfunc .)
    KEYDER          reduce using rule 103 (repeticionfunc -> condicionalfunc .)


state 182

    (104) repeticionfunc -> nocondicionalfunc .

    RETURN          reduce using rule 104 (repeticionfunc -> nocondicionalfunc .)
    ID              reduce using rule 104 (repeticionfunc -> nocondicionalfunc .)
    IF              reduce using rule 104 (repeticionfunc -> nocondicionalfunc .)
    WRITE           reduce using rule 104 (repeticionfunc -> nocondicionalfunc .)
    READ            reduce using rule 104 (repeticionfunc -> nocondicionalfunc .)
    WHILE           reduce using rule 104 (repeticionfunc -> nocondicionalfunc .)
    FOR             reduce using rule 104 (repeticionfunc -> nocondicionalfunc .)
    KEYDER          reduce using rule 104 (repeticionfunc -> nocondicionalfunc .)


state 183

    (105) condicionalfunc -> WHILE . PARIZQ expresion PARDER DO bloquefunc

    PARIZQ          shift and go to state 218


state 184

    (106) nocondicionalfunc -> FOR . iddim IGU expresion TO expresion DO bloquefunc
    (95) iddim -> . ID arrexp arrexp

    ID              shift and go to state 84

    iddim                          shift and go to state 219

state 185

    (13) opciontipo -> ID arr . arr varciclo PTOCOM tipociclo
    (9) arr -> . CORIZQ CTEI CORDER
    (10) arr -> . empty
    (107) empty -> .

    CORIZQ          shift and go to state 29
    COMA            reduce using rule 107 (empty -> .)
    PTOCOM          reduce using rule 107 (empty -> .)

    arr                            shift and go to state 220
    empty                          shift and go to state 30

state 186

    (14) opciontipo -> MODULE ID . PARIZQ opcionvarsimple PARDER opvars bloquefunc

    PARIZQ          shift and go to state 221


state 187

    (7) varciclo -> COMA ID arr arr varciclo .

    PTOCOM          reduce using rule 7 (varciclo -> COMA ID arr arr varciclo .)


state 188

    (49) asignacion -> ID asignacionarr asignacionarr IGU expresion . PTOCOM

    PTOCOM          shift and go to state 222


state 189

    (76) opcionid -> arrexp arrexp .

    MULT            reduce using rule 76 (opcionid -> arrexp arrexp .)
    DIV             reduce using rule 76 (opcionid -> arrexp arrexp .)
    MAS             reduce using rule 76 (opcionid -> arrexp arrexp .)
    MENOS           reduce using rule 76 (opcionid -> arrexp arrexp .)
    MAY             reduce using rule 76 (opcionid -> arrexp arrexp .)
    MEN             reduce using rule 76 (opcionid -> arrexp arrexp .)
    DIF             reduce using rule 76 (opcionid -> arrexp arrexp .)
    IGUIGU          reduce using rule 76 (opcionid -> arrexp arrexp .)
    AND             reduce using rule 76 (opcionid -> arrexp arrexp .)
    OR              reduce using rule 76 (opcionid -> arrexp arrexp .)
    COMA            reduce using rule 76 (opcionid -> arrexp arrexp .)
    PARDER          reduce using rule 76 (opcionid -> arrexp arrexp .)
    CORDER          reduce using rule 76 (opcionid -> arrexp arrexp .)
    TO              reduce using rule 76 (opcionid -> arrexp arrexp .)
    PTOCOM          reduce using rule 76 (opcionid -> arrexp arrexp .)
    DO              reduce using rule 76 (opcionid -> arrexp arrexp .)


state 190

    (77) opcionid -> PARIZQ parametros . PARDER

    PARDER          shift and go to state 223


state 191

    (70) factor -> PARIZQ expresion PARDER .

    MULT            reduce using rule 70 (factor -> PARIZQ expresion PARDER .)
    DIV             reduce using rule 70 (factor -> PARIZQ expresion PARDER .)
    MAS             reduce using rule 70 (factor -> PARIZQ expresion PARDER .)
    MENOS           reduce using rule 70 (factor -> PARIZQ expresion PARDER .)
    MAY             reduce using rule 70 (factor -> PARIZQ expresion PARDER .)
    MEN             reduce using rule 70 (factor -> PARIZQ expresion PARDER .)
    DIF             reduce using rule 70 (factor -> PARIZQ expresion PARDER .)
    IGUIGU          reduce using rule 70 (factor -> PARIZQ expresion PARDER .)
    AND             reduce using rule 70 (factor -> PARIZQ expresion PARDER .)
    OR              reduce using rule 70 (factor -> PARIZQ expresion PARDER .)
    COMA            reduce using rule 70 (factor -> PARIZQ expresion PARDER .)
    PARDER          reduce using rule 70 (factor -> PARIZQ expresion PARDER .)
    CORDER          reduce using rule 70 (factor -> PARIZQ expresion PARDER .)
    TO              reduce using rule 70 (factor -> PARIZQ expresion PARDER .)
    PTOCOM          reduce using rule 70 (factor -> PARIZQ expresion PARDER .)
    DO              reduce using rule 70 (factor -> PARIZQ expresion PARDER .)


state 192

    (91) llamadafunc -> ID PARIZQ parametros PARDER PTOCOM .

    ID              reduce using rule 91 (llamadafunc -> ID PARIZQ parametros PARDER PTOCOM .)
    IF              reduce using rule 91 (llamadafunc -> ID PARIZQ parametros PARDER PTOCOM .)
    WRITE           reduce using rule 91 (llamadafunc -> ID PARIZQ parametros PARDER PTOCOM .)
    READ            reduce using rule 91 (llamadafunc -> ID PARIZQ parametros PARDER PTOCOM .)
    WHILE           reduce using rule 91 (llamadafunc -> ID PARIZQ parametros PARDER PTOCOM .)
    FOR             reduce using rule 91 (llamadafunc -> ID PARIZQ parametros PARDER PTOCOM .)
    KEYDER          reduce using rule 91 (llamadafunc -> ID PARIZQ parametros PARDER PTOCOM .)
    RETURN          reduce using rule 91 (llamadafunc -> ID PARIZQ parametros PARDER PTOCOM .)


state 193

    (83) cicloparametros -> COMA expresion . cicloparametros
    (83) cicloparametros -> . COMA expresion cicloparametros
    (84) cicloparametros -> . empty
    (107) empty -> .

    COMA            shift and go to state 136
    PARDER          reduce using rule 107 (empty -> .)

    cicloparametros                shift and go to state 224
    empty                          shift and go to state 137

state 194

    (53) expresionsig -> MAY expresionsigequal . exp
    (62) exp -> . termino expciclo
    (66) termino -> . factor factorciclo
    (70) factor -> . PARIZQ expresion PARDER
    (71) factor -> . masomenos varcte
    (72) factor -> . ID opcionid
    (73) masomenos -> . MAS
    (74) masomenos -> . MENOS
    (75) masomenos -> . empty
    (107) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 97
    ID              shift and go to state 96
    MAS             shift and go to state 105
    MENOS           shift and go to state 106
    CTEI            reduce using rule 107 (empty -> .)
    CTEF            reduce using rule 107 (empty -> .)

  ! ID              [ reduce using rule 107 (empty -> .) ]

    exp                            shift and go to state 225
    termino                        shift and go to state 102
    factor                         shift and go to state 103
    masomenos                      shift and go to state 104
    empty                          shift and go to state 108

state 195

    (60) expresionsigequal -> IGU .

    PARIZQ          reduce using rule 60 (expresionsigequal -> IGU .)
    ID              reduce using rule 60 (expresionsigequal -> IGU .)
    MAS             reduce using rule 60 (expresionsigequal -> IGU .)
    MENOS           reduce using rule 60 (expresionsigequal -> IGU .)
    CTEI            reduce using rule 60 (expresionsigequal -> IGU .)
    CTEF            reduce using rule 60 (expresionsigequal -> IGU .)


state 196

    (61) expresionsigequal -> empty .

    PARIZQ          reduce using rule 61 (expresionsigequal -> empty .)
    ID              reduce using rule 61 (expresionsigequal -> empty .)
    MAS             reduce using rule 61 (expresionsigequal -> empty .)
    MENOS           reduce using rule 61 (expresionsigequal -> empty .)
    CTEI            reduce using rule 61 (expresionsigequal -> empty .)
    CTEF            reduce using rule 61 (expresionsigequal -> empty .)


state 197

    (54) expresionsig -> MEN expresionsigequal . exp
    (62) exp -> . termino expciclo
    (66) termino -> . factor factorciclo
    (70) factor -> . PARIZQ expresion PARDER
    (71) factor -> . masomenos varcte
    (72) factor -> . ID opcionid
    (73) masomenos -> . MAS
    (74) masomenos -> . MENOS
    (75) masomenos -> . empty
    (107) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 97
    ID              shift and go to state 96
    MAS             shift and go to state 105
    MENOS           shift and go to state 106
    CTEI            reduce using rule 107 (empty -> .)
    CTEF            reduce using rule 107 (empty -> .)

  ! ID              [ reduce using rule 107 (empty -> .) ]

    exp                            shift and go to state 226
    termino                        shift and go to state 102
    factor                         shift and go to state 103
    masomenos                      shift and go to state 104
    empty                          shift and go to state 108

state 198

    (55) expresionsig -> DIF exp .

    COMA            reduce using rule 55 (expresionsig -> DIF exp .)
    PARDER          reduce using rule 55 (expresionsig -> DIF exp .)
    CORDER          reduce using rule 55 (expresionsig -> DIF exp .)
    TO              reduce using rule 55 (expresionsig -> DIF exp .)
    PTOCOM          reduce using rule 55 (expresionsig -> DIF exp .)
    DO              reduce using rule 55 (expresionsig -> DIF exp .)


state 199

    (56) expresionsig -> IGUIGU exp .

    COMA            reduce using rule 56 (expresionsig -> IGUIGU exp .)
    PARDER          reduce using rule 56 (expresionsig -> IGUIGU exp .)
    CORDER          reduce using rule 56 (expresionsig -> IGUIGU exp .)
    TO              reduce using rule 56 (expresionsig -> IGUIGU exp .)
    PTOCOM          reduce using rule 56 (expresionsig -> IGUIGU exp .)
    DO              reduce using rule 56 (expresionsig -> IGUIGU exp .)


state 200

    (57) expresionsig -> AND exp .

    COMA            reduce using rule 57 (expresionsig -> AND exp .)
    PARDER          reduce using rule 57 (expresionsig -> AND exp .)
    CORDER          reduce using rule 57 (expresionsig -> AND exp .)
    TO              reduce using rule 57 (expresionsig -> AND exp .)
    PTOCOM          reduce using rule 57 (expresionsig -> AND exp .)
    DO              reduce using rule 57 (expresionsig -> AND exp .)


state 201

    (58) expresionsig -> OR exp .

    COMA            reduce using rule 58 (expresionsig -> OR exp .)
    PARDER          reduce using rule 58 (expresionsig -> OR exp .)
    CORDER          reduce using rule 58 (expresionsig -> OR exp .)
    TO              reduce using rule 58 (expresionsig -> OR exp .)
    PTOCOM          reduce using rule 58 (expresionsig -> OR exp .)
    DO              reduce using rule 58 (expresionsig -> OR exp .)


state 202

    (63) expciclo -> MAS exp .

    MAY             reduce using rule 63 (expciclo -> MAS exp .)
    MEN             reduce using rule 63 (expciclo -> MAS exp .)
    DIF             reduce using rule 63 (expciclo -> MAS exp .)
    IGUIGU          reduce using rule 63 (expciclo -> MAS exp .)
    AND             reduce using rule 63 (expciclo -> MAS exp .)
    OR              reduce using rule 63 (expciclo -> MAS exp .)
    COMA            reduce using rule 63 (expciclo -> MAS exp .)
    PARDER          reduce using rule 63 (expciclo -> MAS exp .)
    CORDER          reduce using rule 63 (expciclo -> MAS exp .)
    TO              reduce using rule 63 (expciclo -> MAS exp .)
    PTOCOM          reduce using rule 63 (expciclo -> MAS exp .)
    DO              reduce using rule 63 (expciclo -> MAS exp .)


state 203

    (64) expciclo -> MENOS exp .

    MAY             reduce using rule 64 (expciclo -> MENOS exp .)
    MEN             reduce using rule 64 (expciclo -> MENOS exp .)
    DIF             reduce using rule 64 (expciclo -> MENOS exp .)
    IGUIGU          reduce using rule 64 (expciclo -> MENOS exp .)
    AND             reduce using rule 64 (expciclo -> MENOS exp .)
    OR              reduce using rule 64 (expciclo -> MENOS exp .)
    COMA            reduce using rule 64 (expciclo -> MENOS exp .)
    PARDER          reduce using rule 64 (expciclo -> MENOS exp .)
    CORDER          reduce using rule 64 (expciclo -> MENOS exp .)
    TO              reduce using rule 64 (expciclo -> MENOS exp .)
    PTOCOM          reduce using rule 64 (expciclo -> MENOS exp .)
    DO              reduce using rule 64 (expciclo -> MENOS exp .)


state 204

    (67) factorciclo -> MULT termino .

    MAS             reduce using rule 67 (factorciclo -> MULT termino .)
    MENOS           reduce using rule 67 (factorciclo -> MULT termino .)
    MAY             reduce using rule 67 (factorciclo -> MULT termino .)
    MEN             reduce using rule 67 (factorciclo -> MULT termino .)
    DIF             reduce using rule 67 (factorciclo -> MULT termino .)
    IGUIGU          reduce using rule 67 (factorciclo -> MULT termino .)
    AND             reduce using rule 67 (factorciclo -> MULT termino .)
    OR              reduce using rule 67 (factorciclo -> MULT termino .)
    COMA            reduce using rule 67 (factorciclo -> MULT termino .)
    PARDER          reduce using rule 67 (factorciclo -> MULT termino .)
    CORDER          reduce using rule 67 (factorciclo -> MULT termino .)
    TO              reduce using rule 67 (factorciclo -> MULT termino .)
    PTOCOM          reduce using rule 67 (factorciclo -> MULT termino .)
    DO              reduce using rule 67 (factorciclo -> MULT termino .)


state 205

    (68) factorciclo -> DIV termino .

    MAS             reduce using rule 68 (factorciclo -> DIV termino .)
    MENOS           reduce using rule 68 (factorciclo -> DIV termino .)
    MAY             reduce using rule 68 (factorciclo -> DIV termino .)
    MEN             reduce using rule 68 (factorciclo -> DIV termino .)
    DIF             reduce using rule 68 (factorciclo -> DIV termino .)
    IGUIGU          reduce using rule 68 (factorciclo -> DIV termino .)
    AND             reduce using rule 68 (factorciclo -> DIV termino .)
    OR              reduce using rule 68 (factorciclo -> DIV termino .)
    COMA            reduce using rule 68 (factorciclo -> DIV termino .)
    PARDER          reduce using rule 68 (factorciclo -> DIV termino .)
    CORDER          reduce using rule 68 (factorciclo -> DIV termino .)
    TO              reduce using rule 68 (factorciclo -> DIV termino .)
    PTOCOM          reduce using rule 68 (factorciclo -> DIV termino .)
    DO              reduce using rule 68 (factorciclo -> DIV termino .)


state 206

    (85) decision -> IF PARIZQ expresion PARDER THEN . bloque ELSE bloque
    (30) bloque -> . KEYIZQ bloqueopcion KEYDER

    KEYIZQ          shift and go to state 37

    bloque                         shift and go to state 227

state 207

    (86) escritura -> WRITE PARIZQ escrituraciclo otro PARDER . PTOCOM

    PTOCOM          shift and go to state 228


state 208

    (89) otro -> COMA escrituraciclo . otro
    (89) otro -> . COMA escrituraciclo otro
    (90) otro -> . empty
    (107) empty -> .

    COMA            shift and go to state 161
    PARDER          reduce using rule 107 (empty -> .)

    otro                           shift and go to state 229
    empty                          shift and go to state 162

state 209

    (92) lectura -> READ PARIZQ iddim ciclodim PARDER . PTOCOM

    PTOCOM          shift and go to state 230


state 210

    (93) ciclodim -> COMA iddim . ciclodim
    (93) ciclodim -> . COMA iddim ciclodim
    (94) ciclodim -> . empty
    (107) empty -> .

    COMA            shift and go to state 164
    PARDER          reduce using rule 107 (empty -> .)

    ciclodim                       shift and go to state 231
    empty                          shift and go to state 165

state 211

    (100) condicional -> WHILE PARIZQ expresion PARDER DO . bloque
    (30) bloque -> . KEYIZQ bloqueopcion KEYDER

    KEYIZQ          shift and go to state 37

    bloque                         shift and go to state 232

state 212

    (101) nocondicional -> FOR iddim IGU expresion TO . expresion DO bloque
    (52) expresion -> . exp expresionsig
    (62) exp -> . termino expciclo
    (66) termino -> . factor factorciclo
    (70) factor -> . PARIZQ expresion PARDER
    (71) factor -> . masomenos varcte
    (72) factor -> . ID opcionid
    (73) masomenos -> . MAS
    (74) masomenos -> . MENOS
    (75) masomenos -> . empty
    (107) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 97
    ID              shift and go to state 96
    MAS             shift and go to state 105
    MENOS           shift and go to state 106
    CTEI            reduce using rule 107 (empty -> .)
    CTEF            reduce using rule 107 (empty -> .)

  ! ID              [ reduce using rule 107 (empty -> .) ]

    expresion                      shift and go to state 233
    exp                            shift and go to state 101
    termino                        shift and go to state 102
    factor                         shift and go to state 103
    masomenos                      shift and go to state 104
    empty                          shift and go to state 108

state 213

    (96) arrexp -> CORIZQ expresion CORDER .

    CORIZQ          reduce using rule 96 (arrexp -> CORIZQ expresion CORDER .)
    IGU             reduce using rule 96 (arrexp -> CORIZQ expresion CORDER .)
    COMA            reduce using rule 96 (arrexp -> CORIZQ expresion CORDER .)
    PARDER          reduce using rule 96 (arrexp -> CORIZQ expresion CORDER .)
    MULT            reduce using rule 96 (arrexp -> CORIZQ expresion CORDER .)
    DIV             reduce using rule 96 (arrexp -> CORIZQ expresion CORDER .)
    MAS             reduce using rule 96 (arrexp -> CORIZQ expresion CORDER .)
    MENOS           reduce using rule 96 (arrexp -> CORIZQ expresion CORDER .)
    MAY             reduce using rule 96 (arrexp -> CORIZQ expresion CORDER .)
    MEN             reduce using rule 96 (arrexp -> CORIZQ expresion CORDER .)
    DIF             reduce using rule 96 (arrexp -> CORIZQ expresion CORDER .)
    IGUIGU          reduce using rule 96 (arrexp -> CORIZQ expresion CORDER .)
    AND             reduce using rule 96 (arrexp -> CORIZQ expresion CORDER .)
    OR              reduce using rule 96 (arrexp -> CORIZQ expresion CORDER .)
    CORDER          reduce using rule 96 (arrexp -> CORIZQ expresion CORDER .)
    TO              reduce using rule 96 (arrexp -> CORIZQ expresion CORDER .)
    PTOCOM          reduce using rule 96 (arrexp -> CORIZQ expresion CORDER .)
    DO              reduce using rule 96 (arrexp -> CORIZQ expresion CORDER .)


state 214

    (33) bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .

    VOID            reduce using rule 33 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    INT             reduce using rule 33 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    FLT             reduce using rule 33 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    CHAR            reduce using rule 33 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    MAIN            reduce using rule 33 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    ELSE            reduce using rule 33 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    RETURN          reduce using rule 33 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    ID              reduce using rule 33 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    IF              reduce using rule 33 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    WRITE           reduce using rule 33 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    READ            reduce using rule 33 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    WHILE           reduce using rule 33 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    FOR             reduce using rule 33 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    KEYDER          reduce using rule 33 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    KEYIZQ          reduce using rule 33 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)


state 215

    (34) bloqueopcionfunc -> estatutofunc bloqueopcionfunc .

    KEYDER          reduce using rule 34 (bloqueopcionfunc -> estatutofunc bloqueopcionfunc .)


state 216

    (48) estatutofunc -> RETURN PARIZQ . expresion PARDER PTOCOM
    (52) expresion -> . exp expresionsig
    (62) exp -> . termino expciclo
    (66) termino -> . factor factorciclo
    (70) factor -> . PARIZQ expresion PARDER
    (71) factor -> . masomenos varcte
    (72) factor -> . ID opcionid
    (73) masomenos -> . MAS
    (74) masomenos -> . MENOS
    (75) masomenos -> . empty
    (107) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 97
    ID              shift and go to state 96
    MAS             shift and go to state 105
    MENOS           shift and go to state 106
    CTEI            reduce using rule 107 (empty -> .)
    CTEF            reduce using rule 107 (empty -> .)

  ! ID              [ reduce using rule 107 (empty -> .) ]

    expresion                      shift and go to state 234
    exp                            shift and go to state 101
    termino                        shift and go to state 102
    factor                         shift and go to state 103
    masomenos                      shift and go to state 104
    empty                          shift and go to state 108

state 217

    (102) decisionfunc -> IF PARIZQ . expresion PARDER THEN bloquefunc ELSE bloquefunc
    (52) expresion -> . exp expresionsig
    (62) exp -> . termino expciclo
    (66) termino -> . factor factorciclo
    (70) factor -> . PARIZQ expresion PARDER
    (71) factor -> . masomenos varcte
    (72) factor -> . ID opcionid
    (73) masomenos -> . MAS
    (74) masomenos -> . MENOS
    (75) masomenos -> . empty
    (107) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 97
    ID              shift and go to state 96
    MAS             shift and go to state 105
    MENOS           shift and go to state 106
    CTEI            reduce using rule 107 (empty -> .)
    CTEF            reduce using rule 107 (empty -> .)

  ! ID              [ reduce using rule 107 (empty -> .) ]

    expresion                      shift and go to state 235
    exp                            shift and go to state 101
    termino                        shift and go to state 102
    factor                         shift and go to state 103
    masomenos                      shift and go to state 104
    empty                          shift and go to state 108

state 218

    (105) condicionalfunc -> WHILE PARIZQ . expresion PARDER DO bloquefunc
    (52) expresion -> . exp expresionsig
    (62) exp -> . termino expciclo
    (66) termino -> . factor factorciclo
    (70) factor -> . PARIZQ expresion PARDER
    (71) factor -> . masomenos varcte
    (72) factor -> . ID opcionid
    (73) masomenos -> . MAS
    (74) masomenos -> . MENOS
    (75) masomenos -> . empty
    (107) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 97
    ID              shift and go to state 96
    MAS             shift and go to state 105
    MENOS           shift and go to state 106
    CTEI            reduce using rule 107 (empty -> .)
    CTEF            reduce using rule 107 (empty -> .)

  ! ID              [ reduce using rule 107 (empty -> .) ]

    expresion                      shift and go to state 236
    exp                            shift and go to state 101
    termino                        shift and go to state 102
    factor                         shift and go to state 103
    masomenos                      shift and go to state 104
    empty                          shift and go to state 108

state 219

    (106) nocondicionalfunc -> FOR iddim . IGU expresion TO expresion DO bloquefunc

    IGU             shift and go to state 237


state 220

    (13) opciontipo -> ID arr arr . varciclo PTOCOM tipociclo
    (7) varciclo -> . COMA ID arr arr varciclo
    (8) varciclo -> . empty
    (107) empty -> .

    COMA            shift and go to state 44
    PTOCOM          reduce using rule 107 (empty -> .)

    varciclo                       shift and go to state 238
    empty                          shift and go to state 45

state 221

    (14) opciontipo -> MODULE ID PARIZQ . opcionvarsimple PARDER opvars bloquefunc
    (22) opcionvarsimple -> . varsimple ciclovarsimple
    (23) opcionvarsimple -> . empty
    (18) varsimple -> . tipo ident
    (107) empty -> .
    (15) tipo -> . INT
    (16) tipo -> . FLT
    (17) tipo -> . CHAR

    PARDER          reduce using rule 107 (empty -> .)
    INT             shift and go to state 16
    FLT             shift and go to state 17
    CHAR            shift and go to state 18

    opcionvarsimple                shift and go to state 239
    varsimple                      shift and go to state 39
    empty                          shift and go to state 40
    tipo                           shift and go to state 41

state 222

    (49) asignacion -> ID asignacionarr asignacionarr IGU expresion PTOCOM .

    ID              reduce using rule 49 (asignacion -> ID asignacionarr asignacionarr IGU expresion PTOCOM .)
    IF              reduce using rule 49 (asignacion -> ID asignacionarr asignacionarr IGU expresion PTOCOM .)
    WRITE           reduce using rule 49 (asignacion -> ID asignacionarr asignacionarr IGU expresion PTOCOM .)
    READ            reduce using rule 49 (asignacion -> ID asignacionarr asignacionarr IGU expresion PTOCOM .)
    WHILE           reduce using rule 49 (asignacion -> ID asignacionarr asignacionarr IGU expresion PTOCOM .)
    FOR             reduce using rule 49 (asignacion -> ID asignacionarr asignacionarr IGU expresion PTOCOM .)
    KEYDER          reduce using rule 49 (asignacion -> ID asignacionarr asignacionarr IGU expresion PTOCOM .)
    RETURN          reduce using rule 49 (asignacion -> ID asignacionarr asignacionarr IGU expresion PTOCOM .)


state 223

    (77) opcionid -> PARIZQ parametros PARDER .

    MULT            reduce using rule 77 (opcionid -> PARIZQ parametros PARDER .)
    DIV             reduce using rule 77 (opcionid -> PARIZQ parametros PARDER .)
    MAS             reduce using rule 77 (opcionid -> PARIZQ parametros PARDER .)
    MENOS           reduce using rule 77 (opcionid -> PARIZQ parametros PARDER .)
    MAY             reduce using rule 77 (opcionid -> PARIZQ parametros PARDER .)
    MEN             reduce using rule 77 (opcionid -> PARIZQ parametros PARDER .)
    DIF             reduce using rule 77 (opcionid -> PARIZQ parametros PARDER .)
    IGUIGU          reduce using rule 77 (opcionid -> PARIZQ parametros PARDER .)
    AND             reduce using rule 77 (opcionid -> PARIZQ parametros PARDER .)
    OR              reduce using rule 77 (opcionid -> PARIZQ parametros PARDER .)
    COMA            reduce using rule 77 (opcionid -> PARIZQ parametros PARDER .)
    PARDER          reduce using rule 77 (opcionid -> PARIZQ parametros PARDER .)
    CORDER          reduce using rule 77 (opcionid -> PARIZQ parametros PARDER .)
    TO              reduce using rule 77 (opcionid -> PARIZQ parametros PARDER .)
    PTOCOM          reduce using rule 77 (opcionid -> PARIZQ parametros PARDER .)
    DO              reduce using rule 77 (opcionid -> PARIZQ parametros PARDER .)


state 224

    (83) cicloparametros -> COMA expresion cicloparametros .

    PARDER          reduce using rule 83 (cicloparametros -> COMA expresion cicloparametros .)


state 225

    (53) expresionsig -> MAY expresionsigequal exp .

    COMA            reduce using rule 53 (expresionsig -> MAY expresionsigequal exp .)
    PARDER          reduce using rule 53 (expresionsig -> MAY expresionsigequal exp .)
    CORDER          reduce using rule 53 (expresionsig -> MAY expresionsigequal exp .)
    TO              reduce using rule 53 (expresionsig -> MAY expresionsigequal exp .)
    PTOCOM          reduce using rule 53 (expresionsig -> MAY expresionsigequal exp .)
    DO              reduce using rule 53 (expresionsig -> MAY expresionsigequal exp .)


state 226

    (54) expresionsig -> MEN expresionsigequal exp .

    COMA            reduce using rule 54 (expresionsig -> MEN expresionsigequal exp .)
    PARDER          reduce using rule 54 (expresionsig -> MEN expresionsigequal exp .)
    CORDER          reduce using rule 54 (expresionsig -> MEN expresionsigequal exp .)
    TO              reduce using rule 54 (expresionsig -> MEN expresionsigequal exp .)
    PTOCOM          reduce using rule 54 (expresionsig -> MEN expresionsigequal exp .)
    DO              reduce using rule 54 (expresionsig -> MEN expresionsigequal exp .)


state 227

    (85) decision -> IF PARIZQ expresion PARDER THEN bloque . ELSE bloque

    ELSE            shift and go to state 240


state 228

    (86) escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM .

    ID              reduce using rule 86 (escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM .)
    IF              reduce using rule 86 (escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM .)
    WRITE           reduce using rule 86 (escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM .)
    READ            reduce using rule 86 (escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM .)
    WHILE           reduce using rule 86 (escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM .)
    FOR             reduce using rule 86 (escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM .)
    KEYDER          reduce using rule 86 (escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM .)
    RETURN          reduce using rule 86 (escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM .)


state 229

    (89) otro -> COMA escrituraciclo otro .

    PARDER          reduce using rule 89 (otro -> COMA escrituraciclo otro .)


state 230

    (92) lectura -> READ PARIZQ iddim ciclodim PARDER PTOCOM .

    ID              reduce using rule 92 (lectura -> READ PARIZQ iddim ciclodim PARDER PTOCOM .)
    IF              reduce using rule 92 (lectura -> READ PARIZQ iddim ciclodim PARDER PTOCOM .)
    WRITE           reduce using rule 92 (lectura -> READ PARIZQ iddim ciclodim PARDER PTOCOM .)
    READ            reduce using rule 92 (lectura -> READ PARIZQ iddim ciclodim PARDER PTOCOM .)
    WHILE           reduce using rule 92 (lectura -> READ PARIZQ iddim ciclodim PARDER PTOCOM .)
    FOR             reduce using rule 92 (lectura -> READ PARIZQ iddim ciclodim PARDER PTOCOM .)
    KEYDER          reduce using rule 92 (lectura -> READ PARIZQ iddim ciclodim PARDER PTOCOM .)
    RETURN          reduce using rule 92 (lectura -> READ PARIZQ iddim ciclodim PARDER PTOCOM .)


state 231

    (93) ciclodim -> COMA iddim ciclodim .

    PARDER          reduce using rule 93 (ciclodim -> COMA iddim ciclodim .)


state 232

    (100) condicional -> WHILE PARIZQ expresion PARDER DO bloque .

    ID              reduce using rule 100 (condicional -> WHILE PARIZQ expresion PARDER DO bloque .)
    IF              reduce using rule 100 (condicional -> WHILE PARIZQ expresion PARDER DO bloque .)
    WRITE           reduce using rule 100 (condicional -> WHILE PARIZQ expresion PARDER DO bloque .)
    READ            reduce using rule 100 (condicional -> WHILE PARIZQ expresion PARDER DO bloque .)
    WHILE           reduce using rule 100 (condicional -> WHILE PARIZQ expresion PARDER DO bloque .)
    FOR             reduce using rule 100 (condicional -> WHILE PARIZQ expresion PARDER DO bloque .)
    KEYDER          reduce using rule 100 (condicional -> WHILE PARIZQ expresion PARDER DO bloque .)


state 233

    (101) nocondicional -> FOR iddim IGU expresion TO expresion . DO bloque

    DO              shift and go to state 241


state 234

    (48) estatutofunc -> RETURN PARIZQ expresion . PARDER PTOCOM

    PARDER          shift and go to state 242


state 235

    (102) decisionfunc -> IF PARIZQ expresion . PARDER THEN bloquefunc ELSE bloquefunc

    PARDER          shift and go to state 243


state 236

    (105) condicionalfunc -> WHILE PARIZQ expresion . PARDER DO bloquefunc

    PARDER          shift and go to state 244


state 237

    (106) nocondicionalfunc -> FOR iddim IGU . expresion TO expresion DO bloquefunc
    (52) expresion -> . exp expresionsig
    (62) exp -> . termino expciclo
    (66) termino -> . factor factorciclo
    (70) factor -> . PARIZQ expresion PARDER
    (71) factor -> . masomenos varcte
    (72) factor -> . ID opcionid
    (73) masomenos -> . MAS
    (74) masomenos -> . MENOS
    (75) masomenos -> . empty
    (107) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 97
    ID              shift and go to state 96
    MAS             shift and go to state 105
    MENOS           shift and go to state 106
    CTEI            reduce using rule 107 (empty -> .)
    CTEF            reduce using rule 107 (empty -> .)

  ! ID              [ reduce using rule 107 (empty -> .) ]

    expresion                      shift and go to state 245
    exp                            shift and go to state 101
    termino                        shift and go to state 102
    factor                         shift and go to state 103
    masomenos                      shift and go to state 104
    empty                          shift and go to state 108

state 238

    (13) opciontipo -> ID arr arr varciclo . PTOCOM tipociclo

    PTOCOM          shift and go to state 246


state 239

    (14) opciontipo -> MODULE ID PARIZQ opcionvarsimple . PARDER opvars bloquefunc

    PARDER          shift and go to state 247


state 240

    (85) decision -> IF PARIZQ expresion PARDER THEN bloque ELSE . bloque
    (30) bloque -> . KEYIZQ bloqueopcion KEYDER

    KEYIZQ          shift and go to state 37

    bloque                         shift and go to state 248

state 241

    (101) nocondicional -> FOR iddim IGU expresion TO expresion DO . bloque
    (30) bloque -> . KEYIZQ bloqueopcion KEYDER

    KEYIZQ          shift and go to state 37

    bloque                         shift and go to state 249

state 242

    (48) estatutofunc -> RETURN PARIZQ expresion PARDER . PTOCOM

    PTOCOM          shift and go to state 250


state 243

    (102) decisionfunc -> IF PARIZQ expresion PARDER . THEN bloquefunc ELSE bloquefunc

    THEN            shift and go to state 251


state 244

    (105) condicionalfunc -> WHILE PARIZQ expresion PARDER . DO bloquefunc

    DO              shift and go to state 252


state 245

    (106) nocondicionalfunc -> FOR iddim IGU expresion . TO expresion DO bloquefunc

    TO              shift and go to state 253


state 246

    (13) opciontipo -> ID arr arr varciclo PTOCOM . tipociclo
    (11) tipociclo -> . tipo opciontipo
    (12) tipociclo -> . empty
    (15) tipo -> . INT
    (16) tipo -> . FLT
    (17) tipo -> . CHAR
    (107) empty -> .

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    INT             shift and go to state 16
    FLT             shift and go to state 17
    CHAR            shift and go to state 18
    VOID            reduce using rule 107 (empty -> .)
    MAIN            reduce using rule 107 (empty -> .)
    KEYIZQ          reduce using rule 107 (empty -> .)

  ! INT             [ reduce using rule 107 (empty -> .) ]
  ! FLT             [ reduce using rule 107 (empty -> .) ]
  ! CHAR            [ reduce using rule 107 (empty -> .) ]

    tipociclo                      shift and go to state 254
    tipo                           shift and go to state 91
    empty                          shift and go to state 93

state 247

    (14) opciontipo -> MODULE ID PARIZQ opcionvarsimple PARDER . opvars bloquefunc
    (2) opvars -> . vars
    (3) opvars -> . empty
    (6) vars -> . VARTOKEN tipo ID arr arr varciclo PTOCOM tipociclo
    (107) empty -> .

    VARTOKEN        shift and go to state 8
    KEYIZQ          reduce using rule 107 (empty -> .)

    opvars                         shift and go to state 255
    vars                           shift and go to state 6
    empty                          shift and go to state 7

state 248

    (85) decision -> IF PARIZQ expresion PARDER THEN bloque ELSE bloque .

    ID              reduce using rule 85 (decision -> IF PARIZQ expresion PARDER THEN bloque ELSE bloque .)
    IF              reduce using rule 85 (decision -> IF PARIZQ expresion PARDER THEN bloque ELSE bloque .)
    WRITE           reduce using rule 85 (decision -> IF PARIZQ expresion PARDER THEN bloque ELSE bloque .)
    READ            reduce using rule 85 (decision -> IF PARIZQ expresion PARDER THEN bloque ELSE bloque .)
    WHILE           reduce using rule 85 (decision -> IF PARIZQ expresion PARDER THEN bloque ELSE bloque .)
    FOR             reduce using rule 85 (decision -> IF PARIZQ expresion PARDER THEN bloque ELSE bloque .)
    KEYDER          reduce using rule 85 (decision -> IF PARIZQ expresion PARDER THEN bloque ELSE bloque .)


state 249

    (101) nocondicional -> FOR iddim IGU expresion TO expresion DO bloque .

    ID              reduce using rule 101 (nocondicional -> FOR iddim IGU expresion TO expresion DO bloque .)
    IF              reduce using rule 101 (nocondicional -> FOR iddim IGU expresion TO expresion DO bloque .)
    WRITE           reduce using rule 101 (nocondicional -> FOR iddim IGU expresion TO expresion DO bloque .)
    READ            reduce using rule 101 (nocondicional -> FOR iddim IGU expresion TO expresion DO bloque .)
    WHILE           reduce using rule 101 (nocondicional -> FOR iddim IGU expresion TO expresion DO bloque .)
    FOR             reduce using rule 101 (nocondicional -> FOR iddim IGU expresion TO expresion DO bloque .)
    KEYDER          reduce using rule 101 (nocondicional -> FOR iddim IGU expresion TO expresion DO bloque .)


state 250

    (48) estatutofunc -> RETURN PARIZQ expresion PARDER PTOCOM .

    RETURN          reduce using rule 48 (estatutofunc -> RETURN PARIZQ expresion PARDER PTOCOM .)
    ID              reduce using rule 48 (estatutofunc -> RETURN PARIZQ expresion PARDER PTOCOM .)
    IF              reduce using rule 48 (estatutofunc -> RETURN PARIZQ expresion PARDER PTOCOM .)
    WRITE           reduce using rule 48 (estatutofunc -> RETURN PARIZQ expresion PARDER PTOCOM .)
    READ            reduce using rule 48 (estatutofunc -> RETURN PARIZQ expresion PARDER PTOCOM .)
    WHILE           reduce using rule 48 (estatutofunc -> RETURN PARIZQ expresion PARDER PTOCOM .)
    FOR             reduce using rule 48 (estatutofunc -> RETURN PARIZQ expresion PARDER PTOCOM .)
    KEYDER          reduce using rule 48 (estatutofunc -> RETURN PARIZQ expresion PARDER PTOCOM .)


state 251

    (102) decisionfunc -> IF PARIZQ expresion PARDER THEN . bloquefunc ELSE bloquefunc
    (33) bloquefunc -> . KEYIZQ bloqueopcionfunc KEYDER

    KEYIZQ          shift and go to state 124

    bloquefunc                     shift and go to state 256

state 252

    (105) condicionalfunc -> WHILE PARIZQ expresion PARDER DO . bloquefunc
    (33) bloquefunc -> . KEYIZQ bloqueopcionfunc KEYDER

    KEYIZQ          shift and go to state 124

    bloquefunc                     shift and go to state 257

state 253

    (106) nocondicionalfunc -> FOR iddim IGU expresion TO . expresion DO bloquefunc
    (52) expresion -> . exp expresionsig
    (62) exp -> . termino expciclo
    (66) termino -> . factor factorciclo
    (70) factor -> . PARIZQ expresion PARDER
    (71) factor -> . masomenos varcte
    (72) factor -> . ID opcionid
    (73) masomenos -> . MAS
    (74) masomenos -> . MENOS
    (75) masomenos -> . empty
    (107) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 97
    ID              shift and go to state 96
    MAS             shift and go to state 105
    MENOS           shift and go to state 106
    CTEI            reduce using rule 107 (empty -> .)
    CTEF            reduce using rule 107 (empty -> .)

  ! ID              [ reduce using rule 107 (empty -> .) ]

    expresion                      shift and go to state 258
    exp                            shift and go to state 101
    termino                        shift and go to state 102
    factor                         shift and go to state 103
    masomenos                      shift and go to state 104
    empty                          shift and go to state 108

state 254

    (13) opciontipo -> ID arr arr varciclo PTOCOM tipociclo .

    VOID            reduce using rule 13 (opciontipo -> ID arr arr varciclo PTOCOM tipociclo .)
    INT             reduce using rule 13 (opciontipo -> ID arr arr varciclo PTOCOM tipociclo .)
    FLT             reduce using rule 13 (opciontipo -> ID arr arr varciclo PTOCOM tipociclo .)
    CHAR            reduce using rule 13 (opciontipo -> ID arr arr varciclo PTOCOM tipociclo .)
    MAIN            reduce using rule 13 (opciontipo -> ID arr arr varciclo PTOCOM tipociclo .)
    KEYIZQ          reduce using rule 13 (opciontipo -> ID arr arr varciclo PTOCOM tipociclo .)


state 255

    (14) opciontipo -> MODULE ID PARIZQ opcionvarsimple PARDER opvars . bloquefunc
    (33) bloquefunc -> . KEYIZQ bloqueopcionfunc KEYDER

    KEYIZQ          shift and go to state 124

    bloquefunc                     shift and go to state 259

state 256

    (102) decisionfunc -> IF PARIZQ expresion PARDER THEN bloquefunc . ELSE bloquefunc

    ELSE            shift and go to state 260


state 257

    (105) condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc .

    RETURN          reduce using rule 105 (condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc .)
    ID              reduce using rule 105 (condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc .)
    IF              reduce using rule 105 (condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc .)
    WRITE           reduce using rule 105 (condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc .)
    READ            reduce using rule 105 (condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc .)
    WHILE           reduce using rule 105 (condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc .)
    FOR             reduce using rule 105 (condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc .)
    KEYDER          reduce using rule 105 (condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc .)


state 258

    (106) nocondicionalfunc -> FOR iddim IGU expresion TO expresion . DO bloquefunc

    DO              shift and go to state 261


state 259

    (14) opciontipo -> MODULE ID PARIZQ opcionvarsimple PARDER opvars bloquefunc .

    VOID            reduce using rule 14 (opciontipo -> MODULE ID PARIZQ opcionvarsimple PARDER opvars bloquefunc .)
    INT             reduce using rule 14 (opciontipo -> MODULE ID PARIZQ opcionvarsimple PARDER opvars bloquefunc .)
    FLT             reduce using rule 14 (opciontipo -> MODULE ID PARIZQ opcionvarsimple PARDER opvars bloquefunc .)
    CHAR            reduce using rule 14 (opciontipo -> MODULE ID PARIZQ opcionvarsimple PARDER opvars bloquefunc .)
    MAIN            reduce using rule 14 (opciontipo -> MODULE ID PARIZQ opcionvarsimple PARDER opvars bloquefunc .)
    KEYIZQ          reduce using rule 14 (opciontipo -> MODULE ID PARIZQ opcionvarsimple PARDER opvars bloquefunc .)


state 260

    (102) decisionfunc -> IF PARIZQ expresion PARDER THEN bloquefunc ELSE . bloquefunc
    (33) bloquefunc -> . KEYIZQ bloqueopcionfunc KEYDER

    KEYIZQ          shift and go to state 124

    bloquefunc                     shift and go to state 262

state 261

    (106) nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO . bloquefunc
    (33) bloquefunc -> . KEYIZQ bloqueopcionfunc KEYDER

    KEYIZQ          shift and go to state 124

    bloquefunc                     shift and go to state 263

state 262

    (102) decisionfunc -> IF PARIZQ expresion PARDER THEN bloquefunc ELSE bloquefunc .

    RETURN          reduce using rule 102 (decisionfunc -> IF PARIZQ expresion PARDER THEN bloquefunc ELSE bloquefunc .)
    ID              reduce using rule 102 (decisionfunc -> IF PARIZQ expresion PARDER THEN bloquefunc ELSE bloquefunc .)
    IF              reduce using rule 102 (decisionfunc -> IF PARIZQ expresion PARDER THEN bloquefunc ELSE bloquefunc .)
    WRITE           reduce using rule 102 (decisionfunc -> IF PARIZQ expresion PARDER THEN bloquefunc ELSE bloquefunc .)
    READ            reduce using rule 102 (decisionfunc -> IF PARIZQ expresion PARDER THEN bloquefunc ELSE bloquefunc .)
    WHILE           reduce using rule 102 (decisionfunc -> IF PARIZQ expresion PARDER THEN bloquefunc ELSE bloquefunc .)
    FOR             reduce using rule 102 (decisionfunc -> IF PARIZQ expresion PARDER THEN bloquefunc ELSE bloquefunc .)
    KEYDER          reduce using rule 102 (decisionfunc -> IF PARIZQ expresion PARDER THEN bloquefunc ELSE bloquefunc .)


state 263

    (106) nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc .

    RETURN          reduce using rule 106 (nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc .)
    ID              reduce using rule 106 (nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc .)
    IF              reduce using rule 106 (nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc .)
    WRITE           reduce using rule 106 (nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc .)
    READ            reduce using rule 106 (nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc .)
    WHILE           reduce using rule 106 (nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc .)
    FOR             reduce using rule 106 (nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc .)
    KEYDER          reduce using rule 106 (nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for CORIZQ in state 24 resolved as shift
WARNING: shift/reduce conflict for CORIZQ in state 56 resolved as shift
WARNING: shift/reduce conflict for CORIZQ in state 69 resolved as shift
WARNING: shift/reduce conflict for INT in state 71 resolved as shift
WARNING: shift/reduce conflict for FLT in state 71 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 71 resolved as shift
WARNING: shift/reduce conflict for CORIZQ in state 72 resolved as shift
WARNING: shift/reduce conflict for ID in state 76 resolved as shift
WARNING: shift/reduce conflict for ID in state 77 resolved as shift
WARNING: shift/reduce conflict for ID in state 79 resolved as shift
WARNING: shift/reduce conflict for ID in state 80 resolved as shift
WARNING: shift/reduce conflict for ID in state 82 resolved as shift
WARNING: shift/reduce conflict for CORIZQ in state 84 resolved as shift
WARNING: shift/reduce conflict for CORIZQ in state 96 resolved as shift
WARNING: shift/reduce conflict for ID in state 97 resolved as shift
WARNING: shift/reduce conflict for ID in state 115 resolved as shift
WARNING: shift/reduce conflict for ID in state 117 resolved as shift
WARNING: shift/reduce conflict for CORIZQ in state 126 resolved as shift
WARNING: shift/reduce conflict for ID in state 129 resolved as shift
WARNING: shift/reduce conflict for ID in state 132 resolved as shift
WARNING: shift/reduce conflict for ID in state 136 resolved as shift
WARNING: shift/reduce conflict for ID in state 141 resolved as shift
WARNING: shift/reduce conflict for ID in state 142 resolved as shift
WARNING: shift/reduce conflict for ID in state 143 resolved as shift
WARNING: shift/reduce conflict for ID in state 144 resolved as shift
WARNING: shift/reduce conflict for ID in state 147 resolved as shift
WARNING: shift/reduce conflict for ID in state 148 resolved as shift
WARNING: shift/reduce conflict for ID in state 151 resolved as shift
WARNING: shift/reduce conflict for ID in state 152 resolved as shift
WARNING: shift/reduce conflict for ID in state 161 resolved as shift
WARNING: shift/reduce conflict for ID in state 194 resolved as shift
WARNING: shift/reduce conflict for ID in state 197 resolved as shift
WARNING: shift/reduce conflict for ID in state 212 resolved as shift
WARNING: shift/reduce conflict for ID in state 216 resolved as shift
WARNING: shift/reduce conflict for ID in state 217 resolved as shift
WARNING: shift/reduce conflict for ID in state 218 resolved as shift
WARNING: shift/reduce conflict for ID in state 237 resolved as shift
WARNING: shift/reduce conflict for INT in state 246 resolved as shift
WARNING: shift/reduce conflict for FLT in state 246 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 246 resolved as shift
WARNING: shift/reduce conflict for ID in state 253 resolved as shift
