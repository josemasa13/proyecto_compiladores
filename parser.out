Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DOSPTS

Grammar

Rule 0     S' -> program
Rule 1     program -> PRO r_register_gotomain ID r_register_global PTOCOM opvars opfunciones MAIN r_switch_to_global PARIZQ PARDER bloque
Rule 2     opvars -> vars
Rule 3     opvars -> empty
Rule 4     opfunciones -> funciones opfunciones
Rule 5     opfunciones -> empty
Rule 6     vars -> VARTOKEN tipo ID r_register_variable_name arr arr varciclo PTOCOM tipociclo
Rule 7     varciclo -> COMA ID r_register_variable_name arr arr varciclo
Rule 8     varciclo -> empty
Rule 9     arr -> CORIZQ CTEI r_register_const CORDER
Rule 10    arr -> empty
Rule 11    tipociclo -> tipo opciontipo
Rule 12    tipociclo -> empty
Rule 13    opciontipo -> ID r_register_variable_name arr arr varciclo PTOCOM tipociclo
Rule 14    opciontipo -> MODULE ID r_update_func_type r_update_curr_function_name_especial PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return
Rule 15    tipo -> INT r_register_variable_type
Rule 16    tipo -> FLT r_register_variable_type
Rule 17    tipo -> CHAR r_register_variable_type
Rule 18    tipo_func -> INT r_register_function
Rule 19    tipo_func -> FLT r_register_function
Rule 20    tipo_func -> CHAR r_register_function
Rule 21    varsimple -> tipo ident
Rule 22    funciones -> funcionvoid
Rule 23    funciones -> funcion
Rule 24    funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloque r_endfunc
Rule 25    opcionvarsimple -> varsimple ciclovarsimple
Rule 26    opcionvarsimple -> empty
Rule 27    ciclovarsimple -> COMA varsimple ciclovarsimple
Rule 28    ciclovarsimple -> empty
Rule 29    funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return
Rule 30    ident -> ID r_register_variable_name arrini arrini
Rule 31    arrini -> CORIZQ CORDER
Rule 32    arrini -> empty
Rule 33    bloque -> KEYIZQ bloqueopcion KEYDER
Rule 34    bloqueopcion -> estatuto bloqueopcion
Rule 35    bloqueopcion -> empty
Rule 36    bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER
Rule 37    bloqueopcionfunc -> estatutofunc bloqueopcionfunc
Rule 38    bloqueopcionfunc -> empty
Rule 39    estatuto -> asignacion
Rule 40    estatuto -> decision
Rule 41    estatuto -> escritura
Rule 42    estatuto -> llamadafunc
Rule 43    estatuto -> repeticion
Rule 44    estatuto -> lectura
Rule 45    estatutofunc -> asignacion
Rule 46    estatutofunc -> decisionfunc
Rule 47    estatutofunc -> escritura
Rule 48    estatutofunc -> llamadafunc
Rule 49    estatutofunc -> repeticionfunc
Rule 50    estatutofunc -> lectura
Rule 51    estatutofunc -> RETURN PARIZQ expresion r_return_func PARDER PTOCOM
Rule 52    asignacion -> ID r_verifica_variable_existe r_pila_operandos_push_id asignacionarr asignacionarr IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM
Rule 53    asignacionarr -> CORIZQ expresion CORDER
Rule 54    asignacionarr -> empty
Rule 55    expresion -> exp r_pop_comp expresionsig
Rule 56    expresionsig -> MAY r_pila_operadores_push_may expresionsigequal expresion
Rule 57    expresionsig -> MEN r_pila_operadores_push_men expresionsigequal expresion
Rule 58    expresionsig -> DIF r_pila_operadores_push_dif expresion
Rule 59    expresionsig -> IGUIGU r_pila_operadores_push_iguigu expresion
Rule 60    expresionsig -> AND r_pila_operadores_push_and expresion
Rule 61    expresionsig -> OR r_pila_operadores_push_or expresion
Rule 62    expresionsig -> MAYIGU r_pila_operadores_push_mayigu expresionsigequal expresion
Rule 63    expresionsig -> MENIGU r_pila_operadores_push_menigu expresionsigequal expresion
Rule 64    expresionsig -> empty
Rule 65    expresionsigequal -> IGU
Rule 66    expresionsigequal -> empty
Rule 67    exp -> termino r_pop_mas expciclo
Rule 68    expciclo -> MAS r_pila_operadores_push_mas exp
Rule 69    expciclo -> MENOS r_pila_operadores_push_menos exp
Rule 70    expciclo -> empty
Rule 71    termino -> factor r_pop_mult factorciclo
Rule 72    factorciclo -> MULT r_pila_operadores_push_mult termino
Rule 73    factorciclo -> DIV r_pila_operadores_push_div termino
Rule 74    factorciclo -> empty
Rule 75    factor -> PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
Rule 76    factor -> masomenos varcte
Rule 77    factor -> ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
Rule 78    masomenos -> MAS
Rule 79    masomenos -> MENOS
Rule 80    masomenos -> empty
Rule 81    opcionid -> PARIZQ r_era_funcion_retorno parametros r_terminar_parametro PARDER
Rule 82    opcionid -> arrexp arrexp
Rule 83    varcte -> iddim
Rule 84    varcte -> CTEI r_pila_operandos_push_cte_int
Rule 85    varcte -> CTEF r_pila_operandos_push_cte_flt
Rule 86    parametros -> expresion r_extraer_parametro cicloparametros
Rule 87    parametros -> empty
Rule 88    cicloparametros -> COMA expresion r_extraer_parametro cicloparametros
Rule 89    cicloparametros -> empty
Rule 90    llamadafunc -> ID r_verifica_void PARIZQ r_era_funcion_void parametros r_terminar_parametro_void PARDER PTOCOM
Rule 91    decision -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloque decision_else r_if_paso_3
Rule 92    decision_else -> ELSE r_if_paso_2 bloque
Rule 93    decision_else -> empty
Rule 94    escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM
Rule 95    escrituraciclo -> CTE_STRING r_genera_escribe_string
Rule 96    escrituraciclo -> expresion r_genera_escribe
Rule 97    otro -> COMA escrituraciclo otro
Rule 98    otro -> empty
Rule 99    lectura -> READ PARIZQ iddim r_genera_lectura ciclodim PARDER PTOCOM
Rule 100   ciclodim -> COMA iddim r_genera_lectura ciclodim
Rule 101   ciclodim -> empty
Rule 102   iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp
Rule 103   arrexp -> CORIZQ expresion CORDER
Rule 104   arrexp -> empty
Rule 105   repeticion -> condicional
Rule 106   repeticion -> nocondicional
Rule 107   condicional -> WHILE r_while_paso_1 PARIZQ expresion PARDER r_while_paso_2 DO bloque r_while_paso_3
Rule 108   nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2
Rule 109   decisionfunc -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloquefunc decisionfunc_else r_if_paso_3
Rule 110   decisionfunc_else -> ELSE r_if_paso_2 bloquefunc
Rule 111   decisionfunc_else -> empty
Rule 112   repeticionfunc -> condicionalfunc
Rule 113   repeticionfunc -> nocondicionalfunc
Rule 114   condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc
Rule 115   nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc
Rule 116   empty -> <empty>
Rule 117   r_register_gotomain -> <empty>
Rule 118   r_register_global -> <empty>
Rule 119   r_register_function -> <empty>
Rule 120   r_register_const -> <empty>
Rule 121   r_switch_to_global -> <empty>
Rule 122   r_update_curr_function_name_especial -> <empty>
Rule 123   r_update_curr_function_name -> <empty>
Rule 124   r_register_param_types -> <empty>
Rule 125   r_register_variable_type -> <empty>
Rule 126   r_update_func_type -> <empty>
Rule 127   r_register_quad -> <empty>
Rule 128   r_era_funcion_void -> <empty>
Rule 129   r_era_funcion_retorno -> <empty>
Rule 130   r_asegurar_return -> <empty>
Rule 131   r_terminar_parametro -> <empty>
Rule 132   r_terminar_parametro_void -> <empty>
Rule 133   r_extraer_parametro -> <empty>
Rule 134   r_verifica_void -> <empty>
Rule 135   r_marcar_funcion -> <empty>
Rule 136   r_desmarcar_funcion -> <empty>
Rule 137   r_endfunc -> <empty>
Rule 138   r_if_paso_1 -> <empty>
Rule 139   r_register_variable_name -> <empty>
Rule 140   r_verifica_variable_existe -> <empty>
Rule 141   r_return_func -> <empty>
Rule 142   r_if_paso_2 -> <empty>
Rule 143   r_if_paso_3 -> <empty>
Rule 144   r_while_paso_1 -> <empty>
Rule 145   r_while_paso_2 -> <empty>
Rule 146   r_while_paso_3 -> <empty>
Rule 147   r_pop_igu_for -> <empty>
Rule 148   r_for_paso_1 -> <empty>
Rule 149   r_for_paso_2 -> <empty>
Rule 150   r_guardar_variable -> <empty>
Rule 151   r_pila_operandos_push -> <empty>
Rule 152   r_pila_operandos_push_id -> <empty>
Rule 153   r_pila_operandos_push_cte_int -> <empty>
Rule 154   r_pila_operandos_push_cte_flt -> <empty>
Rule 155   r_pop_mult -> <empty>
Rule 156   r_pop_mas -> <empty>
Rule 157   r_genera_escribe -> <empty>
Rule 158   r_genera_lectura -> <empty>
Rule 159   r_genera_escribe_string -> <empty>
Rule 160   r_pop_comp -> <empty>
Rule 161   r_pop_igu -> <empty>
Rule 162   r_marcar_fondo_de_pila -> <empty>
Rule 163   r_desmarcar_fondo_de_pila -> <empty>
Rule 164   r_pila_operadores_push_mult -> <empty>
Rule 165   r_pila_operadores_push_div -> <empty>
Rule 166   r_pila_operadores_push_mas -> <empty>
Rule 167   r_pila_operadores_push_menos -> <empty>
Rule 168   r_pila_operadores_push_may -> <empty>
Rule 169   r_pila_operadores_push_men -> <empty>
Rule 170   r_pila_operadores_push_dif -> <empty>
Rule 171   r_pila_operadores_push_iguigu -> <empty>
Rule 172   r_pila_operadores_push_and -> <empty>
Rule 173   r_pila_operadores_push_or -> <empty>
Rule 174   r_pila_operadores_push_igu -> <empty>
Rule 175   r_pila_operadores_push_mayigu -> <empty>
Rule 176   r_pila_operadores_push_menigu -> <empty>
Rule 177   r_push_fondo_falso -> <empty>
Rule 178   r_vaciar_fondo_falso -> <empty>
Rule 179   r_register_dim -> <empty>

Terminals, with rules where they appear

AND                  : 60
CHAR                 : 17 20
COMA                 : 7 27 88 97 100
CORDER               : 9 31 53 103
CORIZQ               : 9 31 53 103
CTEF                 : 85
CTEI                 : 9 84
CTE_STRING           : 95
DIF                  : 58
DIV                  : 73
DO                   : 107 108 114 115
DOSPTS               : 
ELSE                 : 92 110
FLT                  : 16 19
FOR                  : 108 115
ID                   : 1 6 7 13 14 24 29 30 52 77 90 102
IF                   : 91 109
IGU                  : 52 65 108 115
IGUIGU               : 59
INT                  : 15 18
KEYDER               : 33 36
KEYIZQ               : 33 36
MAIN                 : 1
MAS                  : 68 78
MAY                  : 56
MAYIGU               : 62
MEN                  : 57
MENIGU               : 63
MENOS                : 69 79
MODULE               : 14 24 29
MULT                 : 72
OR                   : 61
PARDER               : 1 14 24 29 51 75 81 90 91 94 99 107 109 114
PARIZQ               : 1 14 24 29 51 75 81 90 91 94 99 107 109 114
PRO                  : 1
PTOCOM               : 1 6 13 51 52 90 94 99
READ                 : 99
RETURN               : 51
THEN                 : 91 109
TO                   : 108 115
VARTOKEN             : 6
VOID                 : 24
WHILE                : 107 114
WRITE                : 94
error                : 

Nonterminals, with rules where they appear

arr                  : 6 6 7 7 13 13
arrexp               : 82 82 102 102
arrini               : 30 30
asignacion           : 39 45
asignacionarr        : 52 52
bloque               : 1 24 91 92 107 108
bloquefunc           : 14 29 109 110 114 115
bloqueopcion         : 33 34
bloqueopcionfunc     : 36 37
ciclodim             : 99 100
cicloparametros      : 86 88
ciclovarsimple       : 25 27
condicional          : 105
condicionalfunc      : 112
decision             : 40
decision_else        : 91
decisionfunc         : 46
decisionfunc_else    : 109
empty                : 3 5 8 10 12 26 28 32 35 38 54 64 66 70 74 80 87 89 93 98 101 104 111
escritura            : 41 47
escrituraciclo       : 94 97
estatuto             : 34
estatutofunc         : 37
exp                  : 55 68 69
expciclo             : 67
expresion            : 51 52 53 56 57 58 59 60 61 62 63 75 86 88 91 96 103 107 108 108 109 114 115 115
expresionsig         : 55
expresionsigequal    : 56 57 62 63
factor               : 71
factorciclo          : 71
funcion              : 23
funciones            : 4
funcionvoid          : 22
iddim                : 83 99 100 108 115
ident                : 21
lectura              : 44 50
llamadafunc          : 42 48
masomenos            : 76
nocondicional        : 106
nocondicionalfunc    : 113
opcionid             : 77
opciontipo           : 11
opcionvarsimple      : 14 24 29
opfunciones          : 1 4
opvars               : 1 14 24 29
otro                 : 94 97
parametros           : 81 90
program              : 0
r_asegurar_return    : 14 29
r_desmarcar_fondo_de_pila : 75
r_desmarcar_funcion  : 14 24 29
r_endfunc            : 14 24 29
r_era_funcion_retorno : 81
r_era_funcion_void   : 90
r_extraer_parametro  : 86 88
r_for_paso_1         : 108
r_for_paso_2         : 108
r_genera_escribe     : 96
r_genera_escribe_string : 95
r_genera_lectura     : 99 100
r_guardar_variable   : 77
r_if_paso_1          : 91 109
r_if_paso_2          : 92 110
r_if_paso_3          : 91 109
r_marcar_fondo_de_pila : 75
r_marcar_funcion     : 14 24 29
r_pila_operadores_push_and : 60
r_pila_operadores_push_dif : 58
r_pila_operadores_push_div : 73
r_pila_operadores_push_igu : 52 108
r_pila_operadores_push_iguigu : 59
r_pila_operadores_push_mas : 68
r_pila_operadores_push_may : 56
r_pila_operadores_push_mayigu : 62
r_pila_operadores_push_men : 57
r_pila_operadores_push_menigu : 63
r_pila_operadores_push_menos : 69
r_pila_operadores_push_mult : 72
r_pila_operadores_push_or : 61
r_pila_operandos_push : 77
r_pila_operandos_push_cte_flt : 85
r_pila_operandos_push_cte_int : 84
r_pila_operandos_push_id : 52 102
r_pop_comp           : 55
r_pop_igu            : 52
r_pop_igu_for        : 108
r_pop_mas            : 67
r_pop_mult           : 71
r_push_fondo_falso   : 
r_register_const     : 9
r_register_dim       : 
r_register_function  : 18 19 20 24
r_register_global    : 1
r_register_gotomain  : 1
r_register_param_types : 14 24 29
r_register_quad      : 14 24 29
r_register_variable_name : 6 7 13 30
r_register_variable_type : 15 16 17
r_return_func        : 51
r_switch_to_global   : 1
r_terminar_parametro : 81
r_terminar_parametro_void : 90
r_update_curr_function_name : 24 29
r_update_curr_function_name_especial : 14
r_update_func_type   : 14
r_vaciar_fondo_falso : 
r_verifica_variable_existe : 52 77 102
r_verifica_void      : 90
r_while_paso_1       : 107
r_while_paso_2       : 107
r_while_paso_3       : 107
repeticion           : 43
repeticionfunc       : 49
termino              : 67 72 73
tipo                 : 6 11 21
tipo_func            : 29
tipociclo            : 6 13
varciclo             : 6 7 13
varcte               : 76
vars                 : 2
varsimple            : 25 27

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PRO r_register_gotomain ID r_register_global PTOCOM opvars opfunciones MAIN r_switch_to_global PARIZQ PARDER bloque

    PRO             shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PRO . r_register_gotomain ID r_register_global PTOCOM opvars opfunciones MAIN r_switch_to_global PARIZQ PARDER bloque
    (117) r_register_gotomain -> .

    ID              reduce using rule 117 (r_register_gotomain -> .)

    r_register_gotomain            shift and go to state 3

state 3

    (1) program -> PRO r_register_gotomain . ID r_register_global PTOCOM opvars opfunciones MAIN r_switch_to_global PARIZQ PARDER bloque

    ID              shift and go to state 4


state 4

    (1) program -> PRO r_register_gotomain ID . r_register_global PTOCOM opvars opfunciones MAIN r_switch_to_global PARIZQ PARDER bloque
    (118) r_register_global -> .

    PTOCOM          reduce using rule 118 (r_register_global -> .)

    r_register_global              shift and go to state 5

state 5

    (1) program -> PRO r_register_gotomain ID r_register_global . PTOCOM opvars opfunciones MAIN r_switch_to_global PARIZQ PARDER bloque

    PTOCOM          shift and go to state 6


state 6

    (1) program -> PRO r_register_gotomain ID r_register_global PTOCOM . opvars opfunciones MAIN r_switch_to_global PARIZQ PARDER bloque
    (2) opvars -> . vars
    (3) opvars -> . empty
    (6) vars -> . VARTOKEN tipo ID r_register_variable_name arr arr varciclo PTOCOM tipociclo
    (116) empty -> .

    VARTOKEN        shift and go to state 10
    VOID            reduce using rule 116 (empty -> .)
    INT             reduce using rule 116 (empty -> .)
    FLT             reduce using rule 116 (empty -> .)
    CHAR            reduce using rule 116 (empty -> .)
    MAIN            reduce using rule 116 (empty -> .)

    opvars                         shift and go to state 7
    vars                           shift and go to state 8
    empty                          shift and go to state 9

state 7

    (1) program -> PRO r_register_gotomain ID r_register_global PTOCOM opvars . opfunciones MAIN r_switch_to_global PARIZQ PARDER bloque
    (4) opfunciones -> . funciones opfunciones
    (5) opfunciones -> . empty
    (22) funciones -> . funcionvoid
    (23) funciones -> . funcion
    (116) empty -> .
    (24) funcionvoid -> . VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloque r_endfunc
    (29) funcion -> . tipo_func MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return
    (18) tipo_func -> . INT r_register_function
    (19) tipo_func -> . FLT r_register_function
    (20) tipo_func -> . CHAR r_register_function

    MAIN            reduce using rule 116 (empty -> .)
    VOID            shift and go to state 16
    INT             shift and go to state 18
    FLT             shift and go to state 19
    CHAR            shift and go to state 20

    opfunciones                    shift and go to state 11
    funciones                      shift and go to state 12
    empty                          shift and go to state 13
    funcionvoid                    shift and go to state 14
    funcion                        shift and go to state 15
    tipo_func                      shift and go to state 17

state 8

    (2) opvars -> vars .

    VOID            reduce using rule 2 (opvars -> vars .)
    INT             reduce using rule 2 (opvars -> vars .)
    FLT             reduce using rule 2 (opvars -> vars .)
    CHAR            reduce using rule 2 (opvars -> vars .)
    MAIN            reduce using rule 2 (opvars -> vars .)
    KEYIZQ          reduce using rule 2 (opvars -> vars .)


state 9

    (3) opvars -> empty .

    VOID            reduce using rule 3 (opvars -> empty .)
    INT             reduce using rule 3 (opvars -> empty .)
    FLT             reduce using rule 3 (opvars -> empty .)
    CHAR            reduce using rule 3 (opvars -> empty .)
    MAIN            reduce using rule 3 (opvars -> empty .)
    KEYIZQ          reduce using rule 3 (opvars -> empty .)


state 10

    (6) vars -> VARTOKEN . tipo ID r_register_variable_name arr arr varciclo PTOCOM tipociclo
    (15) tipo -> . INT r_register_variable_type
    (16) tipo -> . FLT r_register_variable_type
    (17) tipo -> . CHAR r_register_variable_type

    INT             shift and go to state 22
    FLT             shift and go to state 23
    CHAR            shift and go to state 24

    tipo                           shift and go to state 21

state 11

    (1) program -> PRO r_register_gotomain ID r_register_global PTOCOM opvars opfunciones . MAIN r_switch_to_global PARIZQ PARDER bloque

    MAIN            shift and go to state 25


state 12

    (4) opfunciones -> funciones . opfunciones
    (4) opfunciones -> . funciones opfunciones
    (5) opfunciones -> . empty
    (22) funciones -> . funcionvoid
    (23) funciones -> . funcion
    (116) empty -> .
    (24) funcionvoid -> . VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloque r_endfunc
    (29) funcion -> . tipo_func MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return
    (18) tipo_func -> . INT r_register_function
    (19) tipo_func -> . FLT r_register_function
    (20) tipo_func -> . CHAR r_register_function

    MAIN            reduce using rule 116 (empty -> .)
    VOID            shift and go to state 16
    INT             shift and go to state 18
    FLT             shift and go to state 19
    CHAR            shift and go to state 20

    funciones                      shift and go to state 12
    opfunciones                    shift and go to state 26
    empty                          shift and go to state 13
    funcionvoid                    shift and go to state 14
    funcion                        shift and go to state 15
    tipo_func                      shift and go to state 17

state 13

    (5) opfunciones -> empty .

    MAIN            reduce using rule 5 (opfunciones -> empty .)


state 14

    (22) funciones -> funcionvoid .

    VOID            reduce using rule 22 (funciones -> funcionvoid .)
    INT             reduce using rule 22 (funciones -> funcionvoid .)
    FLT             reduce using rule 22 (funciones -> funcionvoid .)
    CHAR            reduce using rule 22 (funciones -> funcionvoid .)
    MAIN            reduce using rule 22 (funciones -> funcionvoid .)


state 15

    (23) funciones -> funcion .

    VOID            reduce using rule 23 (funciones -> funcion .)
    INT             reduce using rule 23 (funciones -> funcion .)
    FLT             reduce using rule 23 (funciones -> funcion .)
    CHAR            reduce using rule 23 (funciones -> funcion .)
    MAIN            reduce using rule 23 (funciones -> funcion .)


state 16

    (24) funcionvoid -> VOID . r_register_function MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloque r_endfunc
    (119) r_register_function -> .

    MODULE          reduce using rule 119 (r_register_function -> .)

    r_register_function            shift and go to state 27

state 17

    (29) funcion -> tipo_func . MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return

    MODULE          shift and go to state 28


state 18

    (18) tipo_func -> INT . r_register_function
    (119) r_register_function -> .

    MODULE          reduce using rule 119 (r_register_function -> .)

    r_register_function            shift and go to state 29

state 19

    (19) tipo_func -> FLT . r_register_function
    (119) r_register_function -> .

    MODULE          reduce using rule 119 (r_register_function -> .)

    r_register_function            shift and go to state 30

state 20

    (20) tipo_func -> CHAR . r_register_function
    (119) r_register_function -> .

    MODULE          reduce using rule 119 (r_register_function -> .)

    r_register_function            shift and go to state 31

state 21

    (6) vars -> VARTOKEN tipo . ID r_register_variable_name arr arr varciclo PTOCOM tipociclo

    ID              shift and go to state 32


state 22

    (15) tipo -> INT . r_register_variable_type
    (125) r_register_variable_type -> .

    ID              reduce using rule 125 (r_register_variable_type -> .)
    MODULE          reduce using rule 125 (r_register_variable_type -> .)

    r_register_variable_type       shift and go to state 33

state 23

    (16) tipo -> FLT . r_register_variable_type
    (125) r_register_variable_type -> .

    ID              reduce using rule 125 (r_register_variable_type -> .)
    MODULE          reduce using rule 125 (r_register_variable_type -> .)

    r_register_variable_type       shift and go to state 34

state 24

    (17) tipo -> CHAR . r_register_variable_type
    (125) r_register_variable_type -> .

    ID              reduce using rule 125 (r_register_variable_type -> .)
    MODULE          reduce using rule 125 (r_register_variable_type -> .)

    r_register_variable_type       shift and go to state 35

state 25

    (1) program -> PRO r_register_gotomain ID r_register_global PTOCOM opvars opfunciones MAIN . r_switch_to_global PARIZQ PARDER bloque
    (121) r_switch_to_global -> .

    PARIZQ          reduce using rule 121 (r_switch_to_global -> .)

    r_switch_to_global             shift and go to state 36

state 26

    (4) opfunciones -> funciones opfunciones .

    MAIN            reduce using rule 4 (opfunciones -> funciones opfunciones .)


state 27

    (24) funcionvoid -> VOID r_register_function . MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloque r_endfunc

    MODULE          shift and go to state 37


state 28

    (29) funcion -> tipo_func MODULE . ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return

    ID              shift and go to state 38


state 29

    (18) tipo_func -> INT r_register_function .

    MODULE          reduce using rule 18 (tipo_func -> INT r_register_function .)


state 30

    (19) tipo_func -> FLT r_register_function .

    MODULE          reduce using rule 19 (tipo_func -> FLT r_register_function .)


state 31

    (20) tipo_func -> CHAR r_register_function .

    MODULE          reduce using rule 20 (tipo_func -> CHAR r_register_function .)


state 32

    (6) vars -> VARTOKEN tipo ID . r_register_variable_name arr arr varciclo PTOCOM tipociclo
    (139) r_register_variable_name -> .

    CORIZQ          reduce using rule 139 (r_register_variable_name -> .)
    COMA            reduce using rule 139 (r_register_variable_name -> .)
    PTOCOM          reduce using rule 139 (r_register_variable_name -> .)

    r_register_variable_name       shift and go to state 39

state 33

    (15) tipo -> INT r_register_variable_type .

    ID              reduce using rule 15 (tipo -> INT r_register_variable_type .)
    MODULE          reduce using rule 15 (tipo -> INT r_register_variable_type .)


state 34

    (16) tipo -> FLT r_register_variable_type .

    ID              reduce using rule 16 (tipo -> FLT r_register_variable_type .)
    MODULE          reduce using rule 16 (tipo -> FLT r_register_variable_type .)


state 35

    (17) tipo -> CHAR r_register_variable_type .

    ID              reduce using rule 17 (tipo -> CHAR r_register_variable_type .)
    MODULE          reduce using rule 17 (tipo -> CHAR r_register_variable_type .)


state 36

    (1) program -> PRO r_register_gotomain ID r_register_global PTOCOM opvars opfunciones MAIN r_switch_to_global . PARIZQ PARDER bloque

    PARIZQ          shift and go to state 40


state 37

    (24) funcionvoid -> VOID r_register_function MODULE . ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloque r_endfunc

    ID              shift and go to state 41


state 38

    (29) funcion -> tipo_func MODULE ID . r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return
    (123) r_update_curr_function_name -> .

    PARIZQ          reduce using rule 123 (r_update_curr_function_name -> .)

    r_update_curr_function_name    shift and go to state 42

state 39

    (6) vars -> VARTOKEN tipo ID r_register_variable_name . arr arr varciclo PTOCOM tipociclo
    (9) arr -> . CORIZQ CTEI r_register_const CORDER
    (10) arr -> . empty
    (116) empty -> .

  ! shift/reduce conflict for CORIZQ resolved as shift
    CORIZQ          shift and go to state 44
    COMA            reduce using rule 116 (empty -> .)
    PTOCOM          reduce using rule 116 (empty -> .)

  ! CORIZQ          [ reduce using rule 116 (empty -> .) ]

    arr                            shift and go to state 43
    empty                          shift and go to state 45

state 40

    (1) program -> PRO r_register_gotomain ID r_register_global PTOCOM opvars opfunciones MAIN r_switch_to_global PARIZQ . PARDER bloque

    PARDER          shift and go to state 46


state 41

    (24) funcionvoid -> VOID r_register_function MODULE ID . r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloque r_endfunc
    (123) r_update_curr_function_name -> .

    PARIZQ          reduce using rule 123 (r_update_curr_function_name -> .)

    r_update_curr_function_name    shift and go to state 47

state 42

    (29) funcion -> tipo_func MODULE ID r_update_curr_function_name . PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return

    PARIZQ          shift and go to state 48


state 43

    (6) vars -> VARTOKEN tipo ID r_register_variable_name arr . arr varciclo PTOCOM tipociclo
    (9) arr -> . CORIZQ CTEI r_register_const CORDER
    (10) arr -> . empty
    (116) empty -> .

    CORIZQ          shift and go to state 44
    COMA            reduce using rule 116 (empty -> .)
    PTOCOM          reduce using rule 116 (empty -> .)

    arr                            shift and go to state 49
    empty                          shift and go to state 45

state 44

    (9) arr -> CORIZQ . CTEI r_register_const CORDER

    CTEI            shift and go to state 50


state 45

    (10) arr -> empty .

    CORIZQ          reduce using rule 10 (arr -> empty .)
    COMA            reduce using rule 10 (arr -> empty .)
    PTOCOM          reduce using rule 10 (arr -> empty .)


state 46

    (1) program -> PRO r_register_gotomain ID r_register_global PTOCOM opvars opfunciones MAIN r_switch_to_global PARIZQ PARDER . bloque
    (33) bloque -> . KEYIZQ bloqueopcion KEYDER

    KEYIZQ          shift and go to state 52

    bloque                         shift and go to state 51

state 47

    (24) funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name . PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloque r_endfunc

    PARIZQ          shift and go to state 53


state 48

    (29) funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ . r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return
    (135) r_marcar_funcion -> .

    INT             reduce using rule 135 (r_marcar_funcion -> .)
    FLT             reduce using rule 135 (r_marcar_funcion -> .)
    CHAR            reduce using rule 135 (r_marcar_funcion -> .)
    PARDER          reduce using rule 135 (r_marcar_funcion -> .)

    r_marcar_funcion               shift and go to state 54

state 49

    (6) vars -> VARTOKEN tipo ID r_register_variable_name arr arr . varciclo PTOCOM tipociclo
    (7) varciclo -> . COMA ID r_register_variable_name arr arr varciclo
    (8) varciclo -> . empty
    (116) empty -> .

    COMA            shift and go to state 56
    PTOCOM          reduce using rule 116 (empty -> .)

    varciclo                       shift and go to state 55
    empty                          shift and go to state 57

state 50

    (9) arr -> CORIZQ CTEI . r_register_const CORDER
    (120) r_register_const -> .

    CORDER          reduce using rule 120 (r_register_const -> .)

    r_register_const               shift and go to state 58

state 51

    (1) program -> PRO r_register_gotomain ID r_register_global PTOCOM opvars opfunciones MAIN r_switch_to_global PARIZQ PARDER bloque .

    $end            reduce using rule 1 (program -> PRO r_register_gotomain ID r_register_global PTOCOM opvars opfunciones MAIN r_switch_to_global PARIZQ PARDER bloque .)


state 52

    (33) bloque -> KEYIZQ . bloqueopcion KEYDER
    (34) bloqueopcion -> . estatuto bloqueopcion
    (35) bloqueopcion -> . empty
    (39) estatuto -> . asignacion
    (40) estatuto -> . decision
    (41) estatuto -> . escritura
    (42) estatuto -> . llamadafunc
    (43) estatuto -> . repeticion
    (44) estatuto -> . lectura
    (116) empty -> .
    (52) asignacion -> . ID r_verifica_variable_existe r_pila_operandos_push_id asignacionarr asignacionarr IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM
    (91) decision -> . IF PARIZQ expresion PARDER r_if_paso_1 THEN bloque decision_else r_if_paso_3
    (94) escritura -> . WRITE PARIZQ escrituraciclo otro PARDER PTOCOM
    (90) llamadafunc -> . ID r_verifica_void PARIZQ r_era_funcion_void parametros r_terminar_parametro_void PARDER PTOCOM
    (105) repeticion -> . condicional
    (106) repeticion -> . nocondicional
    (99) lectura -> . READ PARIZQ iddim r_genera_lectura ciclodim PARDER PTOCOM
    (107) condicional -> . WHILE r_while_paso_1 PARIZQ expresion PARDER r_while_paso_2 DO bloque r_while_paso_3
    (108) nocondicional -> . FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2

    KEYDER          reduce using rule 116 (empty -> .)
    ID              shift and go to state 68
    IF              shift and go to state 69
    WRITE           shift and go to state 70
    READ            shift and go to state 73
    WHILE           shift and go to state 74
    FOR             shift and go to state 75

    bloqueopcion                   shift and go to state 59
    estatuto                       shift and go to state 60
    empty                          shift and go to state 61
    asignacion                     shift and go to state 62
    decision                       shift and go to state 63
    escritura                      shift and go to state 64
    llamadafunc                    shift and go to state 65
    repeticion                     shift and go to state 66
    lectura                        shift and go to state 67
    condicional                    shift and go to state 71
    nocondicional                  shift and go to state 72

state 53

    (24) funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ . r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloque r_endfunc
    (135) r_marcar_funcion -> .

    INT             reduce using rule 135 (r_marcar_funcion -> .)
    FLT             reduce using rule 135 (r_marcar_funcion -> .)
    CHAR            reduce using rule 135 (r_marcar_funcion -> .)
    PARDER          reduce using rule 135 (r_marcar_funcion -> .)

    r_marcar_funcion               shift and go to state 76

state 54

    (29) funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion . opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return
    (25) opcionvarsimple -> . varsimple ciclovarsimple
    (26) opcionvarsimple -> . empty
    (21) varsimple -> . tipo ident
    (116) empty -> .
    (15) tipo -> . INT r_register_variable_type
    (16) tipo -> . FLT r_register_variable_type
    (17) tipo -> . CHAR r_register_variable_type

    PARDER          reduce using rule 116 (empty -> .)
    INT             shift and go to state 22
    FLT             shift and go to state 23
    CHAR            shift and go to state 24

    opcionvarsimple                shift and go to state 77
    varsimple                      shift and go to state 78
    empty                          shift and go to state 79
    tipo                           shift and go to state 80

state 55

    (6) vars -> VARTOKEN tipo ID r_register_variable_name arr arr varciclo . PTOCOM tipociclo

    PTOCOM          shift and go to state 81


state 56

    (7) varciclo -> COMA . ID r_register_variable_name arr arr varciclo

    ID              shift and go to state 82


state 57

    (8) varciclo -> empty .

    PTOCOM          reduce using rule 8 (varciclo -> empty .)


state 58

    (9) arr -> CORIZQ CTEI r_register_const . CORDER

    CORDER          shift and go to state 83


state 59

    (33) bloque -> KEYIZQ bloqueopcion . KEYDER

    KEYDER          shift and go to state 84


state 60

    (34) bloqueopcion -> estatuto . bloqueopcion
    (34) bloqueopcion -> . estatuto bloqueopcion
    (35) bloqueopcion -> . empty
    (39) estatuto -> . asignacion
    (40) estatuto -> . decision
    (41) estatuto -> . escritura
    (42) estatuto -> . llamadafunc
    (43) estatuto -> . repeticion
    (44) estatuto -> . lectura
    (116) empty -> .
    (52) asignacion -> . ID r_verifica_variable_existe r_pila_operandos_push_id asignacionarr asignacionarr IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM
    (91) decision -> . IF PARIZQ expresion PARDER r_if_paso_1 THEN bloque decision_else r_if_paso_3
    (94) escritura -> . WRITE PARIZQ escrituraciclo otro PARDER PTOCOM
    (90) llamadafunc -> . ID r_verifica_void PARIZQ r_era_funcion_void parametros r_terminar_parametro_void PARDER PTOCOM
    (105) repeticion -> . condicional
    (106) repeticion -> . nocondicional
    (99) lectura -> . READ PARIZQ iddim r_genera_lectura ciclodim PARDER PTOCOM
    (107) condicional -> . WHILE r_while_paso_1 PARIZQ expresion PARDER r_while_paso_2 DO bloque r_while_paso_3
    (108) nocondicional -> . FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2

    KEYDER          reduce using rule 116 (empty -> .)
    ID              shift and go to state 68
    IF              shift and go to state 69
    WRITE           shift and go to state 70
    READ            shift and go to state 73
    WHILE           shift and go to state 74
    FOR             shift and go to state 75

    estatuto                       shift and go to state 60
    bloqueopcion                   shift and go to state 85
    empty                          shift and go to state 61
    asignacion                     shift and go to state 62
    decision                       shift and go to state 63
    escritura                      shift and go to state 64
    llamadafunc                    shift and go to state 65
    repeticion                     shift and go to state 66
    lectura                        shift and go to state 67
    condicional                    shift and go to state 71
    nocondicional                  shift and go to state 72

state 61

    (35) bloqueopcion -> empty .

    KEYDER          reduce using rule 35 (bloqueopcion -> empty .)


state 62

    (39) estatuto -> asignacion .

    ID              reduce using rule 39 (estatuto -> asignacion .)
    IF              reduce using rule 39 (estatuto -> asignacion .)
    WRITE           reduce using rule 39 (estatuto -> asignacion .)
    READ            reduce using rule 39 (estatuto -> asignacion .)
    WHILE           reduce using rule 39 (estatuto -> asignacion .)
    FOR             reduce using rule 39 (estatuto -> asignacion .)
    KEYDER          reduce using rule 39 (estatuto -> asignacion .)


state 63

    (40) estatuto -> decision .

    ID              reduce using rule 40 (estatuto -> decision .)
    IF              reduce using rule 40 (estatuto -> decision .)
    WRITE           reduce using rule 40 (estatuto -> decision .)
    READ            reduce using rule 40 (estatuto -> decision .)
    WHILE           reduce using rule 40 (estatuto -> decision .)
    FOR             reduce using rule 40 (estatuto -> decision .)
    KEYDER          reduce using rule 40 (estatuto -> decision .)


state 64

    (41) estatuto -> escritura .

    ID              reduce using rule 41 (estatuto -> escritura .)
    IF              reduce using rule 41 (estatuto -> escritura .)
    WRITE           reduce using rule 41 (estatuto -> escritura .)
    READ            reduce using rule 41 (estatuto -> escritura .)
    WHILE           reduce using rule 41 (estatuto -> escritura .)
    FOR             reduce using rule 41 (estatuto -> escritura .)
    KEYDER          reduce using rule 41 (estatuto -> escritura .)


state 65

    (42) estatuto -> llamadafunc .

    ID              reduce using rule 42 (estatuto -> llamadafunc .)
    IF              reduce using rule 42 (estatuto -> llamadafunc .)
    WRITE           reduce using rule 42 (estatuto -> llamadafunc .)
    READ            reduce using rule 42 (estatuto -> llamadafunc .)
    WHILE           reduce using rule 42 (estatuto -> llamadafunc .)
    FOR             reduce using rule 42 (estatuto -> llamadafunc .)
    KEYDER          reduce using rule 42 (estatuto -> llamadafunc .)


state 66

    (43) estatuto -> repeticion .

    ID              reduce using rule 43 (estatuto -> repeticion .)
    IF              reduce using rule 43 (estatuto -> repeticion .)
    WRITE           reduce using rule 43 (estatuto -> repeticion .)
    READ            reduce using rule 43 (estatuto -> repeticion .)
    WHILE           reduce using rule 43 (estatuto -> repeticion .)
    FOR             reduce using rule 43 (estatuto -> repeticion .)
    KEYDER          reduce using rule 43 (estatuto -> repeticion .)


state 67

    (44) estatuto -> lectura .

    ID              reduce using rule 44 (estatuto -> lectura .)
    IF              reduce using rule 44 (estatuto -> lectura .)
    WRITE           reduce using rule 44 (estatuto -> lectura .)
    READ            reduce using rule 44 (estatuto -> lectura .)
    WHILE           reduce using rule 44 (estatuto -> lectura .)
    FOR             reduce using rule 44 (estatuto -> lectura .)
    KEYDER          reduce using rule 44 (estatuto -> lectura .)


state 68

    (52) asignacion -> ID . r_verifica_variable_existe r_pila_operandos_push_id asignacionarr asignacionarr IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM
    (90) llamadafunc -> ID . r_verifica_void PARIZQ r_era_funcion_void parametros r_terminar_parametro_void PARDER PTOCOM
    (140) r_verifica_variable_existe -> .
    (134) r_verifica_void -> .

    CORIZQ          reduce using rule 140 (r_verifica_variable_existe -> .)
    IGU             reduce using rule 140 (r_verifica_variable_existe -> .)
    PARIZQ          reduce using rule 134 (r_verifica_void -> .)

    r_verifica_variable_existe     shift and go to state 86
    r_verifica_void                shift and go to state 87

state 69

    (91) decision -> IF . PARIZQ expresion PARDER r_if_paso_1 THEN bloque decision_else r_if_paso_3

    PARIZQ          shift and go to state 88


state 70

    (94) escritura -> WRITE . PARIZQ escrituraciclo otro PARDER PTOCOM

    PARIZQ          shift and go to state 89


state 71

    (105) repeticion -> condicional .

    ID              reduce using rule 105 (repeticion -> condicional .)
    IF              reduce using rule 105 (repeticion -> condicional .)
    WRITE           reduce using rule 105 (repeticion -> condicional .)
    READ            reduce using rule 105 (repeticion -> condicional .)
    WHILE           reduce using rule 105 (repeticion -> condicional .)
    FOR             reduce using rule 105 (repeticion -> condicional .)
    KEYDER          reduce using rule 105 (repeticion -> condicional .)


state 72

    (106) repeticion -> nocondicional .

    ID              reduce using rule 106 (repeticion -> nocondicional .)
    IF              reduce using rule 106 (repeticion -> nocondicional .)
    WRITE           reduce using rule 106 (repeticion -> nocondicional .)
    READ            reduce using rule 106 (repeticion -> nocondicional .)
    WHILE           reduce using rule 106 (repeticion -> nocondicional .)
    FOR             reduce using rule 106 (repeticion -> nocondicional .)
    KEYDER          reduce using rule 106 (repeticion -> nocondicional .)


state 73

    (99) lectura -> READ . PARIZQ iddim r_genera_lectura ciclodim PARDER PTOCOM

    PARIZQ          shift and go to state 90


state 74

    (107) condicional -> WHILE . r_while_paso_1 PARIZQ expresion PARDER r_while_paso_2 DO bloque r_while_paso_3
    (144) r_while_paso_1 -> .

    PARIZQ          reduce using rule 144 (r_while_paso_1 -> .)

    r_while_paso_1                 shift and go to state 91

state 75

    (108) nocondicional -> FOR . iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2
    (102) iddim -> . ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp

    ID              shift and go to state 93

    iddim                          shift and go to state 92

state 76

    (24) funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion . opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloque r_endfunc
    (25) opcionvarsimple -> . varsimple ciclovarsimple
    (26) opcionvarsimple -> . empty
    (21) varsimple -> . tipo ident
    (116) empty -> .
    (15) tipo -> . INT r_register_variable_type
    (16) tipo -> . FLT r_register_variable_type
    (17) tipo -> . CHAR r_register_variable_type

    PARDER          reduce using rule 116 (empty -> .)
    INT             shift and go to state 22
    FLT             shift and go to state 23
    CHAR            shift and go to state 24

    opcionvarsimple                shift and go to state 94
    varsimple                      shift and go to state 78
    empty                          shift and go to state 79
    tipo                           shift and go to state 80

state 77

    (29) funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple . r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return
    (136) r_desmarcar_funcion -> .

    PARDER          reduce using rule 136 (r_desmarcar_funcion -> .)

    r_desmarcar_funcion            shift and go to state 95

state 78

    (25) opcionvarsimple -> varsimple . ciclovarsimple
    (27) ciclovarsimple -> . COMA varsimple ciclovarsimple
    (28) ciclovarsimple -> . empty
    (116) empty -> .

    COMA            shift and go to state 97
    PARDER          reduce using rule 116 (empty -> .)

    ciclovarsimple                 shift and go to state 96
    empty                          shift and go to state 98

state 79

    (26) opcionvarsimple -> empty .

    PARDER          reduce using rule 26 (opcionvarsimple -> empty .)


state 80

    (21) varsimple -> tipo . ident
    (30) ident -> . ID r_register_variable_name arrini arrini

    ID              shift and go to state 100

    ident                          shift and go to state 99

state 81

    (6) vars -> VARTOKEN tipo ID r_register_variable_name arr arr varciclo PTOCOM . tipociclo
    (11) tipociclo -> . tipo opciontipo
    (12) tipociclo -> . empty
    (15) tipo -> . INT r_register_variable_type
    (16) tipo -> . FLT r_register_variable_type
    (17) tipo -> . CHAR r_register_variable_type
    (116) empty -> .

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    INT             shift and go to state 22
    FLT             shift and go to state 23
    CHAR            shift and go to state 24
    VOID            reduce using rule 116 (empty -> .)
    MAIN            reduce using rule 116 (empty -> .)
    KEYIZQ          reduce using rule 116 (empty -> .)

  ! INT             [ reduce using rule 116 (empty -> .) ]
  ! FLT             [ reduce using rule 116 (empty -> .) ]
  ! CHAR            [ reduce using rule 116 (empty -> .) ]

    tipo                           shift and go to state 101
    tipociclo                      shift and go to state 102
    empty                          shift and go to state 103

state 82

    (7) varciclo -> COMA ID . r_register_variable_name arr arr varciclo
    (139) r_register_variable_name -> .

    CORIZQ          reduce using rule 139 (r_register_variable_name -> .)
    COMA            reduce using rule 139 (r_register_variable_name -> .)
    PTOCOM          reduce using rule 139 (r_register_variable_name -> .)

    r_register_variable_name       shift and go to state 104

state 83

    (9) arr -> CORIZQ CTEI r_register_const CORDER .

    CORIZQ          reduce using rule 9 (arr -> CORIZQ CTEI r_register_const CORDER .)
    COMA            reduce using rule 9 (arr -> CORIZQ CTEI r_register_const CORDER .)
    PTOCOM          reduce using rule 9 (arr -> CORIZQ CTEI r_register_const CORDER .)


state 84

    (33) bloque -> KEYIZQ bloqueopcion KEYDER .

    $end            reduce using rule 33 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    ELSE            reduce using rule 33 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    ID              reduce using rule 33 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    IF              reduce using rule 33 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    WRITE           reduce using rule 33 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    READ            reduce using rule 33 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    WHILE           reduce using rule 33 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    FOR             reduce using rule 33 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    KEYDER          reduce using rule 33 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    VOID            reduce using rule 33 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    INT             reduce using rule 33 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    FLT             reduce using rule 33 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    CHAR            reduce using rule 33 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    MAIN            reduce using rule 33 (bloque -> KEYIZQ bloqueopcion KEYDER .)


state 85

    (34) bloqueopcion -> estatuto bloqueopcion .

    KEYDER          reduce using rule 34 (bloqueopcion -> estatuto bloqueopcion .)


state 86

    (52) asignacion -> ID r_verifica_variable_existe . r_pila_operandos_push_id asignacionarr asignacionarr IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM
    (152) r_pila_operandos_push_id -> .

    CORIZQ          reduce using rule 152 (r_pila_operandos_push_id -> .)
    IGU             reduce using rule 152 (r_pila_operandos_push_id -> .)

    r_pila_operandos_push_id       shift and go to state 105

state 87

    (90) llamadafunc -> ID r_verifica_void . PARIZQ r_era_funcion_void parametros r_terminar_parametro_void PARDER PTOCOM

    PARIZQ          shift and go to state 106


state 88

    (91) decision -> IF PARIZQ . expresion PARDER r_if_paso_1 THEN bloque decision_else r_if_paso_3
    (55) expresion -> . exp r_pop_comp expresionsig
    (67) exp -> . termino r_pop_mas expciclo
    (71) termino -> . factor r_pop_mult factorciclo
    (75) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (76) factor -> . masomenos varcte
    (77) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (78) masomenos -> . MAS
    (79) masomenos -> . MENOS
    (80) masomenos -> . empty
    (116) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 107
    ID              shift and go to state 113
    MAS             shift and go to state 114
    MENOS           shift and go to state 115
    CTEI            reduce using rule 116 (empty -> .)
    CTEF            reduce using rule 116 (empty -> .)

  ! ID              [ reduce using rule 116 (empty -> .) ]

    expresion                      shift and go to state 108
    exp                            shift and go to state 109
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    masomenos                      shift and go to state 112
    empty                          shift and go to state 116

state 89

    (94) escritura -> WRITE PARIZQ . escrituraciclo otro PARDER PTOCOM
    (95) escrituraciclo -> . CTE_STRING r_genera_escribe_string
    (96) escrituraciclo -> . expresion r_genera_escribe
    (55) expresion -> . exp r_pop_comp expresionsig
    (67) exp -> . termino r_pop_mas expciclo
    (71) termino -> . factor r_pop_mult factorciclo
    (75) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (76) factor -> . masomenos varcte
    (77) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (78) masomenos -> . MAS
    (79) masomenos -> . MENOS
    (80) masomenos -> . empty
    (116) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    CTE_STRING      shift and go to state 118
    PARIZQ          shift and go to state 107
    ID              shift and go to state 113
    MAS             shift and go to state 114
    MENOS           shift and go to state 115
    CTEI            reduce using rule 116 (empty -> .)
    CTEF            reduce using rule 116 (empty -> .)

  ! ID              [ reduce using rule 116 (empty -> .) ]

    escrituraciclo                 shift and go to state 117
    expresion                      shift and go to state 119
    exp                            shift and go to state 109
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    masomenos                      shift and go to state 112
    empty                          shift and go to state 116

state 90

    (99) lectura -> READ PARIZQ . iddim r_genera_lectura ciclodim PARDER PTOCOM
    (102) iddim -> . ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp

    ID              shift and go to state 93

    iddim                          shift and go to state 120

state 91

    (107) condicional -> WHILE r_while_paso_1 . PARIZQ expresion PARDER r_while_paso_2 DO bloque r_while_paso_3

    PARIZQ          shift and go to state 121


state 92

    (108) nocondicional -> FOR iddim . IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2

    IGU             shift and go to state 122


state 93

    (102) iddim -> ID . r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp
    (140) r_verifica_variable_existe -> .

    CORIZQ          reduce using rule 140 (r_verifica_variable_existe -> .)
    IGU             reduce using rule 140 (r_verifica_variable_existe -> .)
    COMA            reduce using rule 140 (r_verifica_variable_existe -> .)
    PARDER          reduce using rule 140 (r_verifica_variable_existe -> .)
    MULT            reduce using rule 140 (r_verifica_variable_existe -> .)
    DIV             reduce using rule 140 (r_verifica_variable_existe -> .)
    MAS             reduce using rule 140 (r_verifica_variable_existe -> .)
    MENOS           reduce using rule 140 (r_verifica_variable_existe -> .)
    MAY             reduce using rule 140 (r_verifica_variable_existe -> .)
    MEN             reduce using rule 140 (r_verifica_variable_existe -> .)
    DIF             reduce using rule 140 (r_verifica_variable_existe -> .)
    IGUIGU          reduce using rule 140 (r_verifica_variable_existe -> .)
    AND             reduce using rule 140 (r_verifica_variable_existe -> .)
    OR              reduce using rule 140 (r_verifica_variable_existe -> .)
    MAYIGU          reduce using rule 140 (r_verifica_variable_existe -> .)
    MENIGU          reduce using rule 140 (r_verifica_variable_existe -> .)
    CORDER          reduce using rule 140 (r_verifica_variable_existe -> .)
    TO              reduce using rule 140 (r_verifica_variable_existe -> .)
    PTOCOM          reduce using rule 140 (r_verifica_variable_existe -> .)
    DO              reduce using rule 140 (r_verifica_variable_existe -> .)

    r_verifica_variable_existe     shift and go to state 123

state 94

    (24) funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple . r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloque r_endfunc
    (136) r_desmarcar_funcion -> .

    PARDER          reduce using rule 136 (r_desmarcar_funcion -> .)

    r_desmarcar_funcion            shift and go to state 124

state 95

    (29) funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion . PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return

    PARDER          shift and go to state 125


state 96

    (25) opcionvarsimple -> varsimple ciclovarsimple .

    PARDER          reduce using rule 25 (opcionvarsimple -> varsimple ciclovarsimple .)


state 97

    (27) ciclovarsimple -> COMA . varsimple ciclovarsimple
    (21) varsimple -> . tipo ident
    (15) tipo -> . INT r_register_variable_type
    (16) tipo -> . FLT r_register_variable_type
    (17) tipo -> . CHAR r_register_variable_type

    INT             shift and go to state 22
    FLT             shift and go to state 23
    CHAR            shift and go to state 24

    varsimple                      shift and go to state 126
    tipo                           shift and go to state 80

state 98

    (28) ciclovarsimple -> empty .

    PARDER          reduce using rule 28 (ciclovarsimple -> empty .)


state 99

    (21) varsimple -> tipo ident .

    COMA            reduce using rule 21 (varsimple -> tipo ident .)
    PARDER          reduce using rule 21 (varsimple -> tipo ident .)


state 100

    (30) ident -> ID . r_register_variable_name arrini arrini
    (139) r_register_variable_name -> .

    CORIZQ          reduce using rule 139 (r_register_variable_name -> .)
    COMA            reduce using rule 139 (r_register_variable_name -> .)
    PARDER          reduce using rule 139 (r_register_variable_name -> .)

    r_register_variable_name       shift and go to state 127

state 101

    (11) tipociclo -> tipo . opciontipo
    (13) opciontipo -> . ID r_register_variable_name arr arr varciclo PTOCOM tipociclo
    (14) opciontipo -> . MODULE ID r_update_func_type r_update_curr_function_name_especial PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return

    ID              shift and go to state 129
    MODULE          shift and go to state 130

    opciontipo                     shift and go to state 128

state 102

    (6) vars -> VARTOKEN tipo ID r_register_variable_name arr arr varciclo PTOCOM tipociclo .

    VOID            reduce using rule 6 (vars -> VARTOKEN tipo ID r_register_variable_name arr arr varciclo PTOCOM tipociclo .)
    INT             reduce using rule 6 (vars -> VARTOKEN tipo ID r_register_variable_name arr arr varciclo PTOCOM tipociclo .)
    FLT             reduce using rule 6 (vars -> VARTOKEN tipo ID r_register_variable_name arr arr varciclo PTOCOM tipociclo .)
    CHAR            reduce using rule 6 (vars -> VARTOKEN tipo ID r_register_variable_name arr arr varciclo PTOCOM tipociclo .)
    MAIN            reduce using rule 6 (vars -> VARTOKEN tipo ID r_register_variable_name arr arr varciclo PTOCOM tipociclo .)
    KEYIZQ          reduce using rule 6 (vars -> VARTOKEN tipo ID r_register_variable_name arr arr varciclo PTOCOM tipociclo .)


state 103

    (12) tipociclo -> empty .

    VOID            reduce using rule 12 (tipociclo -> empty .)
    INT             reduce using rule 12 (tipociclo -> empty .)
    FLT             reduce using rule 12 (tipociclo -> empty .)
    CHAR            reduce using rule 12 (tipociclo -> empty .)
    MAIN            reduce using rule 12 (tipociclo -> empty .)
    KEYIZQ          reduce using rule 12 (tipociclo -> empty .)


state 104

    (7) varciclo -> COMA ID r_register_variable_name . arr arr varciclo
    (9) arr -> . CORIZQ CTEI r_register_const CORDER
    (10) arr -> . empty
    (116) empty -> .

  ! shift/reduce conflict for CORIZQ resolved as shift
    CORIZQ          shift and go to state 44
    COMA            reduce using rule 116 (empty -> .)
    PTOCOM          reduce using rule 116 (empty -> .)

  ! CORIZQ          [ reduce using rule 116 (empty -> .) ]

    arr                            shift and go to state 131
    empty                          shift and go to state 45

state 105

    (52) asignacion -> ID r_verifica_variable_existe r_pila_operandos_push_id . asignacionarr asignacionarr IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM
    (53) asignacionarr -> . CORIZQ expresion CORDER
    (54) asignacionarr -> . empty
    (116) empty -> .

  ! shift/reduce conflict for CORIZQ resolved as shift
    CORIZQ          shift and go to state 133
    IGU             reduce using rule 116 (empty -> .)

  ! CORIZQ          [ reduce using rule 116 (empty -> .) ]

    asignacionarr                  shift and go to state 132
    empty                          shift and go to state 134

state 106

    (90) llamadafunc -> ID r_verifica_void PARIZQ . r_era_funcion_void parametros r_terminar_parametro_void PARDER PTOCOM
    (128) r_era_funcion_void -> .

    PARIZQ          reduce using rule 128 (r_era_funcion_void -> .)
    ID              reduce using rule 128 (r_era_funcion_void -> .)
    MAS             reduce using rule 128 (r_era_funcion_void -> .)
    MENOS           reduce using rule 128 (r_era_funcion_void -> .)
    PARDER          reduce using rule 128 (r_era_funcion_void -> .)
    CTEI            reduce using rule 128 (r_era_funcion_void -> .)
    CTEF            reduce using rule 128 (r_era_funcion_void -> .)

    r_era_funcion_void             shift and go to state 135

state 107

    (75) factor -> PARIZQ . r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (162) r_marcar_fondo_de_pila -> .

    PARIZQ          reduce using rule 162 (r_marcar_fondo_de_pila -> .)
    ID              reduce using rule 162 (r_marcar_fondo_de_pila -> .)
    MAS             reduce using rule 162 (r_marcar_fondo_de_pila -> .)
    MENOS           reduce using rule 162 (r_marcar_fondo_de_pila -> .)
    CTEI            reduce using rule 162 (r_marcar_fondo_de_pila -> .)
    CTEF            reduce using rule 162 (r_marcar_fondo_de_pila -> .)

    r_marcar_fondo_de_pila         shift and go to state 136

state 108

    (91) decision -> IF PARIZQ expresion . PARDER r_if_paso_1 THEN bloque decision_else r_if_paso_3

    PARDER          shift and go to state 137


state 109

    (55) expresion -> exp . r_pop_comp expresionsig
    (160) r_pop_comp -> .

    MAY             reduce using rule 160 (r_pop_comp -> .)
    MEN             reduce using rule 160 (r_pop_comp -> .)
    DIF             reduce using rule 160 (r_pop_comp -> .)
    IGUIGU          reduce using rule 160 (r_pop_comp -> .)
    AND             reduce using rule 160 (r_pop_comp -> .)
    OR              reduce using rule 160 (r_pop_comp -> .)
    MAYIGU          reduce using rule 160 (r_pop_comp -> .)
    MENIGU          reduce using rule 160 (r_pop_comp -> .)
    PARDER          reduce using rule 160 (r_pop_comp -> .)
    COMA            reduce using rule 160 (r_pop_comp -> .)
    CORDER          reduce using rule 160 (r_pop_comp -> .)
    TO              reduce using rule 160 (r_pop_comp -> .)
    PTOCOM          reduce using rule 160 (r_pop_comp -> .)
    DO              reduce using rule 160 (r_pop_comp -> .)

    r_pop_comp                     shift and go to state 138

state 110

    (67) exp -> termino . r_pop_mas expciclo
    (156) r_pop_mas -> .

    MAS             reduce using rule 156 (r_pop_mas -> .)
    MENOS           reduce using rule 156 (r_pop_mas -> .)
    MAY             reduce using rule 156 (r_pop_mas -> .)
    MEN             reduce using rule 156 (r_pop_mas -> .)
    DIF             reduce using rule 156 (r_pop_mas -> .)
    IGUIGU          reduce using rule 156 (r_pop_mas -> .)
    AND             reduce using rule 156 (r_pop_mas -> .)
    OR              reduce using rule 156 (r_pop_mas -> .)
    MAYIGU          reduce using rule 156 (r_pop_mas -> .)
    MENIGU          reduce using rule 156 (r_pop_mas -> .)
    PARDER          reduce using rule 156 (r_pop_mas -> .)
    COMA            reduce using rule 156 (r_pop_mas -> .)
    CORDER          reduce using rule 156 (r_pop_mas -> .)
    TO              reduce using rule 156 (r_pop_mas -> .)
    PTOCOM          reduce using rule 156 (r_pop_mas -> .)
    DO              reduce using rule 156 (r_pop_mas -> .)

    r_pop_mas                      shift and go to state 139

state 111

    (71) termino -> factor . r_pop_mult factorciclo
    (155) r_pop_mult -> .

    MULT            reduce using rule 155 (r_pop_mult -> .)
    DIV             reduce using rule 155 (r_pop_mult -> .)
    MAS             reduce using rule 155 (r_pop_mult -> .)
    MENOS           reduce using rule 155 (r_pop_mult -> .)
    MAY             reduce using rule 155 (r_pop_mult -> .)
    MEN             reduce using rule 155 (r_pop_mult -> .)
    DIF             reduce using rule 155 (r_pop_mult -> .)
    IGUIGU          reduce using rule 155 (r_pop_mult -> .)
    AND             reduce using rule 155 (r_pop_mult -> .)
    OR              reduce using rule 155 (r_pop_mult -> .)
    MAYIGU          reduce using rule 155 (r_pop_mult -> .)
    MENIGU          reduce using rule 155 (r_pop_mult -> .)
    PARDER          reduce using rule 155 (r_pop_mult -> .)
    COMA            reduce using rule 155 (r_pop_mult -> .)
    CORDER          reduce using rule 155 (r_pop_mult -> .)
    TO              reduce using rule 155 (r_pop_mult -> .)
    PTOCOM          reduce using rule 155 (r_pop_mult -> .)
    DO              reduce using rule 155 (r_pop_mult -> .)

    r_pop_mult                     shift and go to state 140

state 112

    (76) factor -> masomenos . varcte
    (83) varcte -> . iddim
    (84) varcte -> . CTEI r_pila_operandos_push_cte_int
    (85) varcte -> . CTEF r_pila_operandos_push_cte_flt
    (102) iddim -> . ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp

    CTEI            shift and go to state 143
    CTEF            shift and go to state 144
    ID              shift and go to state 93

    varcte                         shift and go to state 141
    iddim                          shift and go to state 142

state 113

    (77) factor -> ID . r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (140) r_verifica_variable_existe -> .

    PARIZQ          reduce using rule 140 (r_verifica_variable_existe -> .)
    CORIZQ          reduce using rule 140 (r_verifica_variable_existe -> .)
    MULT            reduce using rule 140 (r_verifica_variable_existe -> .)
    DIV             reduce using rule 140 (r_verifica_variable_existe -> .)
    MAS             reduce using rule 140 (r_verifica_variable_existe -> .)
    MENOS           reduce using rule 140 (r_verifica_variable_existe -> .)
    MAY             reduce using rule 140 (r_verifica_variable_existe -> .)
    MEN             reduce using rule 140 (r_verifica_variable_existe -> .)
    DIF             reduce using rule 140 (r_verifica_variable_existe -> .)
    IGUIGU          reduce using rule 140 (r_verifica_variable_existe -> .)
    AND             reduce using rule 140 (r_verifica_variable_existe -> .)
    OR              reduce using rule 140 (r_verifica_variable_existe -> .)
    MAYIGU          reduce using rule 140 (r_verifica_variable_existe -> .)
    MENIGU          reduce using rule 140 (r_verifica_variable_existe -> .)
    PARDER          reduce using rule 140 (r_verifica_variable_existe -> .)
    COMA            reduce using rule 140 (r_verifica_variable_existe -> .)
    CORDER          reduce using rule 140 (r_verifica_variable_existe -> .)
    TO              reduce using rule 140 (r_verifica_variable_existe -> .)
    PTOCOM          reduce using rule 140 (r_verifica_variable_existe -> .)
    DO              reduce using rule 140 (r_verifica_variable_existe -> .)

    r_verifica_variable_existe     shift and go to state 145

state 114

    (78) masomenos -> MAS .

    CTEI            reduce using rule 78 (masomenos -> MAS .)
    CTEF            reduce using rule 78 (masomenos -> MAS .)
    ID              reduce using rule 78 (masomenos -> MAS .)


state 115

    (79) masomenos -> MENOS .

    CTEI            reduce using rule 79 (masomenos -> MENOS .)
    CTEF            reduce using rule 79 (masomenos -> MENOS .)
    ID              reduce using rule 79 (masomenos -> MENOS .)


state 116

    (80) masomenos -> empty .

    CTEI            reduce using rule 80 (masomenos -> empty .)
    CTEF            reduce using rule 80 (masomenos -> empty .)
    ID              reduce using rule 80 (masomenos -> empty .)


state 117

    (94) escritura -> WRITE PARIZQ escrituraciclo . otro PARDER PTOCOM
    (97) otro -> . COMA escrituraciclo otro
    (98) otro -> . empty
    (116) empty -> .

    COMA            shift and go to state 147
    PARDER          reduce using rule 116 (empty -> .)

    otro                           shift and go to state 146
    empty                          shift and go to state 148

state 118

    (95) escrituraciclo -> CTE_STRING . r_genera_escribe_string
    (159) r_genera_escribe_string -> .

    COMA            reduce using rule 159 (r_genera_escribe_string -> .)
    PARDER          reduce using rule 159 (r_genera_escribe_string -> .)

    r_genera_escribe_string        shift and go to state 149

state 119

    (96) escrituraciclo -> expresion . r_genera_escribe
    (157) r_genera_escribe -> .

    COMA            reduce using rule 157 (r_genera_escribe -> .)
    PARDER          reduce using rule 157 (r_genera_escribe -> .)

    r_genera_escribe               shift and go to state 150

state 120

    (99) lectura -> READ PARIZQ iddim . r_genera_lectura ciclodim PARDER PTOCOM
    (158) r_genera_lectura -> .

    COMA            reduce using rule 158 (r_genera_lectura -> .)
    PARDER          reduce using rule 158 (r_genera_lectura -> .)

    r_genera_lectura               shift and go to state 151

state 121

    (107) condicional -> WHILE r_while_paso_1 PARIZQ . expresion PARDER r_while_paso_2 DO bloque r_while_paso_3
    (55) expresion -> . exp r_pop_comp expresionsig
    (67) exp -> . termino r_pop_mas expciclo
    (71) termino -> . factor r_pop_mult factorciclo
    (75) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (76) factor -> . masomenos varcte
    (77) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (78) masomenos -> . MAS
    (79) masomenos -> . MENOS
    (80) masomenos -> . empty
    (116) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 107
    ID              shift and go to state 113
    MAS             shift and go to state 114
    MENOS           shift and go to state 115
    CTEI            reduce using rule 116 (empty -> .)
    CTEF            reduce using rule 116 (empty -> .)

  ! ID              [ reduce using rule 116 (empty -> .) ]

    expresion                      shift and go to state 152
    exp                            shift and go to state 109
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    masomenos                      shift and go to state 112
    empty                          shift and go to state 116

state 122

    (108) nocondicional -> FOR iddim IGU . r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2
    (174) r_pila_operadores_push_igu -> .

    PARIZQ          reduce using rule 174 (r_pila_operadores_push_igu -> .)
    ID              reduce using rule 174 (r_pila_operadores_push_igu -> .)
    MAS             reduce using rule 174 (r_pila_operadores_push_igu -> .)
    MENOS           reduce using rule 174 (r_pila_operadores_push_igu -> .)
    CTEI            reduce using rule 174 (r_pila_operadores_push_igu -> .)
    CTEF            reduce using rule 174 (r_pila_operadores_push_igu -> .)

    r_pila_operadores_push_igu     shift and go to state 153

state 123

    (102) iddim -> ID r_verifica_variable_existe . r_pila_operandos_push_id arrexp arrexp
    (152) r_pila_operandos_push_id -> .

    CORIZQ          reduce using rule 152 (r_pila_operandos_push_id -> .)
    IGU             reduce using rule 152 (r_pila_operandos_push_id -> .)
    COMA            reduce using rule 152 (r_pila_operandos_push_id -> .)
    PARDER          reduce using rule 152 (r_pila_operandos_push_id -> .)
    MULT            reduce using rule 152 (r_pila_operandos_push_id -> .)
    DIV             reduce using rule 152 (r_pila_operandos_push_id -> .)
    MAS             reduce using rule 152 (r_pila_operandos_push_id -> .)
    MENOS           reduce using rule 152 (r_pila_operandos_push_id -> .)
    MAY             reduce using rule 152 (r_pila_operandos_push_id -> .)
    MEN             reduce using rule 152 (r_pila_operandos_push_id -> .)
    DIF             reduce using rule 152 (r_pila_operandos_push_id -> .)
    IGUIGU          reduce using rule 152 (r_pila_operandos_push_id -> .)
    AND             reduce using rule 152 (r_pila_operandos_push_id -> .)
    OR              reduce using rule 152 (r_pila_operandos_push_id -> .)
    MAYIGU          reduce using rule 152 (r_pila_operandos_push_id -> .)
    MENIGU          reduce using rule 152 (r_pila_operandos_push_id -> .)
    CORDER          reduce using rule 152 (r_pila_operandos_push_id -> .)
    TO              reduce using rule 152 (r_pila_operandos_push_id -> .)
    PTOCOM          reduce using rule 152 (r_pila_operandos_push_id -> .)
    DO              reduce using rule 152 (r_pila_operandos_push_id -> .)

    r_pila_operandos_push_id       shift and go to state 154

state 124

    (24) funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion . PARDER r_register_param_types opvars r_register_quad bloque r_endfunc

    PARDER          shift and go to state 155


state 125

    (29) funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER . r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return
    (124) r_register_param_types -> .

    VARTOKEN        reduce using rule 124 (r_register_param_types -> .)
    KEYIZQ          reduce using rule 124 (r_register_param_types -> .)

    r_register_param_types         shift and go to state 156

state 126

    (27) ciclovarsimple -> COMA varsimple . ciclovarsimple
    (27) ciclovarsimple -> . COMA varsimple ciclovarsimple
    (28) ciclovarsimple -> . empty
    (116) empty -> .

    COMA            shift and go to state 97
    PARDER          reduce using rule 116 (empty -> .)

    ciclovarsimple                 shift and go to state 157
    empty                          shift and go to state 98

state 127

    (30) ident -> ID r_register_variable_name . arrini arrini
    (31) arrini -> . CORIZQ CORDER
    (32) arrini -> . empty
    (116) empty -> .

  ! shift/reduce conflict for CORIZQ resolved as shift
    CORIZQ          shift and go to state 159
    COMA            reduce using rule 116 (empty -> .)
    PARDER          reduce using rule 116 (empty -> .)

  ! CORIZQ          [ reduce using rule 116 (empty -> .) ]

    arrini                         shift and go to state 158
    empty                          shift and go to state 160

state 128

    (11) tipociclo -> tipo opciontipo .

    VOID            reduce using rule 11 (tipociclo -> tipo opciontipo .)
    INT             reduce using rule 11 (tipociclo -> tipo opciontipo .)
    FLT             reduce using rule 11 (tipociclo -> tipo opciontipo .)
    CHAR            reduce using rule 11 (tipociclo -> tipo opciontipo .)
    MAIN            reduce using rule 11 (tipociclo -> tipo opciontipo .)
    KEYIZQ          reduce using rule 11 (tipociclo -> tipo opciontipo .)


state 129

    (13) opciontipo -> ID . r_register_variable_name arr arr varciclo PTOCOM tipociclo
    (139) r_register_variable_name -> .

    CORIZQ          reduce using rule 139 (r_register_variable_name -> .)
    COMA            reduce using rule 139 (r_register_variable_name -> .)
    PTOCOM          reduce using rule 139 (r_register_variable_name -> .)

    r_register_variable_name       shift and go to state 161

state 130

    (14) opciontipo -> MODULE . ID r_update_func_type r_update_curr_function_name_especial PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return

    ID              shift and go to state 162


state 131

    (7) varciclo -> COMA ID r_register_variable_name arr . arr varciclo
    (9) arr -> . CORIZQ CTEI r_register_const CORDER
    (10) arr -> . empty
    (116) empty -> .

    CORIZQ          shift and go to state 44
    COMA            reduce using rule 116 (empty -> .)
    PTOCOM          reduce using rule 116 (empty -> .)

    arr                            shift and go to state 163
    empty                          shift and go to state 45

state 132

    (52) asignacion -> ID r_verifica_variable_existe r_pila_operandos_push_id asignacionarr . asignacionarr IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM
    (53) asignacionarr -> . CORIZQ expresion CORDER
    (54) asignacionarr -> . empty
    (116) empty -> .

    CORIZQ          shift and go to state 133
    IGU             reduce using rule 116 (empty -> .)

    asignacionarr                  shift and go to state 164
    empty                          shift and go to state 134

state 133

    (53) asignacionarr -> CORIZQ . expresion CORDER
    (55) expresion -> . exp r_pop_comp expresionsig
    (67) exp -> . termino r_pop_mas expciclo
    (71) termino -> . factor r_pop_mult factorciclo
    (75) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (76) factor -> . masomenos varcte
    (77) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (78) masomenos -> . MAS
    (79) masomenos -> . MENOS
    (80) masomenos -> . empty
    (116) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 107
    ID              shift and go to state 113
    MAS             shift and go to state 114
    MENOS           shift and go to state 115
    CTEI            reduce using rule 116 (empty -> .)
    CTEF            reduce using rule 116 (empty -> .)

  ! ID              [ reduce using rule 116 (empty -> .) ]

    expresion                      shift and go to state 165
    exp                            shift and go to state 109
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    masomenos                      shift and go to state 112
    empty                          shift and go to state 116

state 134

    (54) asignacionarr -> empty .

    CORIZQ          reduce using rule 54 (asignacionarr -> empty .)
    IGU             reduce using rule 54 (asignacionarr -> empty .)


state 135

    (90) llamadafunc -> ID r_verifica_void PARIZQ r_era_funcion_void . parametros r_terminar_parametro_void PARDER PTOCOM
    (86) parametros -> . expresion r_extraer_parametro cicloparametros
    (87) parametros -> . empty
    (55) expresion -> . exp r_pop_comp expresionsig
    (116) empty -> .
    (67) exp -> . termino r_pop_mas expciclo
    (71) termino -> . factor r_pop_mult factorciclo
    (75) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (76) factor -> . masomenos varcte
    (77) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (78) masomenos -> . MAS
    (79) masomenos -> . MENOS
    (80) masomenos -> . empty

  ! shift/reduce conflict for ID resolved as shift
    PARDER          reduce using rule 116 (empty -> .)
    CTEI            reduce using rule 116 (empty -> .)
    CTEF            reduce using rule 116 (empty -> .)
    PARIZQ          shift and go to state 107
    ID              shift and go to state 113
    MAS             shift and go to state 114
    MENOS           shift and go to state 115

  ! ID              [ reduce using rule 116 (empty -> .) ]

    parametros                     shift and go to state 166
    expresion                      shift and go to state 167
    empty                          shift and go to state 168
    exp                            shift and go to state 109
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    masomenos                      shift and go to state 112

state 136

    (75) factor -> PARIZQ r_marcar_fondo_de_pila . expresion r_desmarcar_fondo_de_pila PARDER
    (55) expresion -> . exp r_pop_comp expresionsig
    (67) exp -> . termino r_pop_mas expciclo
    (71) termino -> . factor r_pop_mult factorciclo
    (75) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (76) factor -> . masomenos varcte
    (77) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (78) masomenos -> . MAS
    (79) masomenos -> . MENOS
    (80) masomenos -> . empty
    (116) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 107
    ID              shift and go to state 113
    MAS             shift and go to state 114
    MENOS           shift and go to state 115
    CTEI            reduce using rule 116 (empty -> .)
    CTEF            reduce using rule 116 (empty -> .)

  ! ID              [ reduce using rule 116 (empty -> .) ]

    expresion                      shift and go to state 169
    exp                            shift and go to state 109
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    masomenos                      shift and go to state 112
    empty                          shift and go to state 116

state 137

    (91) decision -> IF PARIZQ expresion PARDER . r_if_paso_1 THEN bloque decision_else r_if_paso_3
    (138) r_if_paso_1 -> .

    THEN            reduce using rule 138 (r_if_paso_1 -> .)

    r_if_paso_1                    shift and go to state 170

state 138

    (55) expresion -> exp r_pop_comp . expresionsig
    (56) expresionsig -> . MAY r_pila_operadores_push_may expresionsigequal expresion
    (57) expresionsig -> . MEN r_pila_operadores_push_men expresionsigequal expresion
    (58) expresionsig -> . DIF r_pila_operadores_push_dif expresion
    (59) expresionsig -> . IGUIGU r_pila_operadores_push_iguigu expresion
    (60) expresionsig -> . AND r_pila_operadores_push_and expresion
    (61) expresionsig -> . OR r_pila_operadores_push_or expresion
    (62) expresionsig -> . MAYIGU r_pila_operadores_push_mayigu expresionsigequal expresion
    (63) expresionsig -> . MENIGU r_pila_operadores_push_menigu expresionsigequal expresion
    (64) expresionsig -> . empty
    (116) empty -> .

    MAY             shift and go to state 172
    MEN             shift and go to state 173
    DIF             shift and go to state 174
    IGUIGU          shift and go to state 175
    AND             shift and go to state 176
    OR              shift and go to state 177
    MAYIGU          shift and go to state 178
    MENIGU          shift and go to state 179
    PARDER          reduce using rule 116 (empty -> .)
    COMA            reduce using rule 116 (empty -> .)
    CORDER          reduce using rule 116 (empty -> .)
    TO              reduce using rule 116 (empty -> .)
    PTOCOM          reduce using rule 116 (empty -> .)
    DO              reduce using rule 116 (empty -> .)

    expresionsig                   shift and go to state 171
    empty                          shift and go to state 180

state 139

    (67) exp -> termino r_pop_mas . expciclo
    (68) expciclo -> . MAS r_pila_operadores_push_mas exp
    (69) expciclo -> . MENOS r_pila_operadores_push_menos exp
    (70) expciclo -> . empty
    (116) empty -> .

    MAS             shift and go to state 182
    MENOS           shift and go to state 183
    MAY             reduce using rule 116 (empty -> .)
    MEN             reduce using rule 116 (empty -> .)
    DIF             reduce using rule 116 (empty -> .)
    IGUIGU          reduce using rule 116 (empty -> .)
    AND             reduce using rule 116 (empty -> .)
    OR              reduce using rule 116 (empty -> .)
    MAYIGU          reduce using rule 116 (empty -> .)
    MENIGU          reduce using rule 116 (empty -> .)
    PARDER          reduce using rule 116 (empty -> .)
    COMA            reduce using rule 116 (empty -> .)
    CORDER          reduce using rule 116 (empty -> .)
    TO              reduce using rule 116 (empty -> .)
    PTOCOM          reduce using rule 116 (empty -> .)
    DO              reduce using rule 116 (empty -> .)

    expciclo                       shift and go to state 181
    empty                          shift and go to state 184

state 140

    (71) termino -> factor r_pop_mult . factorciclo
    (72) factorciclo -> . MULT r_pila_operadores_push_mult termino
    (73) factorciclo -> . DIV r_pila_operadores_push_div termino
    (74) factorciclo -> . empty
    (116) empty -> .

    MULT            shift and go to state 186
    DIV             shift and go to state 187
    MAS             reduce using rule 116 (empty -> .)
    MENOS           reduce using rule 116 (empty -> .)
    MAY             reduce using rule 116 (empty -> .)
    MEN             reduce using rule 116 (empty -> .)
    DIF             reduce using rule 116 (empty -> .)
    IGUIGU          reduce using rule 116 (empty -> .)
    AND             reduce using rule 116 (empty -> .)
    OR              reduce using rule 116 (empty -> .)
    MAYIGU          reduce using rule 116 (empty -> .)
    MENIGU          reduce using rule 116 (empty -> .)
    PARDER          reduce using rule 116 (empty -> .)
    COMA            reduce using rule 116 (empty -> .)
    CORDER          reduce using rule 116 (empty -> .)
    TO              reduce using rule 116 (empty -> .)
    PTOCOM          reduce using rule 116 (empty -> .)
    DO              reduce using rule 116 (empty -> .)

    factorciclo                    shift and go to state 185
    empty                          shift and go to state 188

state 141

    (76) factor -> masomenos varcte .

    MULT            reduce using rule 76 (factor -> masomenos varcte .)
    DIV             reduce using rule 76 (factor -> masomenos varcte .)
    MAS             reduce using rule 76 (factor -> masomenos varcte .)
    MENOS           reduce using rule 76 (factor -> masomenos varcte .)
    MAY             reduce using rule 76 (factor -> masomenos varcte .)
    MEN             reduce using rule 76 (factor -> masomenos varcte .)
    DIF             reduce using rule 76 (factor -> masomenos varcte .)
    IGUIGU          reduce using rule 76 (factor -> masomenos varcte .)
    AND             reduce using rule 76 (factor -> masomenos varcte .)
    OR              reduce using rule 76 (factor -> masomenos varcte .)
    MAYIGU          reduce using rule 76 (factor -> masomenos varcte .)
    MENIGU          reduce using rule 76 (factor -> masomenos varcte .)
    PARDER          reduce using rule 76 (factor -> masomenos varcte .)
    COMA            reduce using rule 76 (factor -> masomenos varcte .)
    CORDER          reduce using rule 76 (factor -> masomenos varcte .)
    TO              reduce using rule 76 (factor -> masomenos varcte .)
    PTOCOM          reduce using rule 76 (factor -> masomenos varcte .)
    DO              reduce using rule 76 (factor -> masomenos varcte .)


state 142

    (83) varcte -> iddim .

    MULT            reduce using rule 83 (varcte -> iddim .)
    DIV             reduce using rule 83 (varcte -> iddim .)
    MAS             reduce using rule 83 (varcte -> iddim .)
    MENOS           reduce using rule 83 (varcte -> iddim .)
    MAY             reduce using rule 83 (varcte -> iddim .)
    MEN             reduce using rule 83 (varcte -> iddim .)
    DIF             reduce using rule 83 (varcte -> iddim .)
    IGUIGU          reduce using rule 83 (varcte -> iddim .)
    AND             reduce using rule 83 (varcte -> iddim .)
    OR              reduce using rule 83 (varcte -> iddim .)
    MAYIGU          reduce using rule 83 (varcte -> iddim .)
    MENIGU          reduce using rule 83 (varcte -> iddim .)
    PARDER          reduce using rule 83 (varcte -> iddim .)
    COMA            reduce using rule 83 (varcte -> iddim .)
    CORDER          reduce using rule 83 (varcte -> iddim .)
    TO              reduce using rule 83 (varcte -> iddim .)
    PTOCOM          reduce using rule 83 (varcte -> iddim .)
    DO              reduce using rule 83 (varcte -> iddim .)


state 143

    (84) varcte -> CTEI . r_pila_operandos_push_cte_int
    (153) r_pila_operandos_push_cte_int -> .

    MULT            reduce using rule 153 (r_pila_operandos_push_cte_int -> .)
    DIV             reduce using rule 153 (r_pila_operandos_push_cte_int -> .)
    MAS             reduce using rule 153 (r_pila_operandos_push_cte_int -> .)
    MENOS           reduce using rule 153 (r_pila_operandos_push_cte_int -> .)
    MAY             reduce using rule 153 (r_pila_operandos_push_cte_int -> .)
    MEN             reduce using rule 153 (r_pila_operandos_push_cte_int -> .)
    DIF             reduce using rule 153 (r_pila_operandos_push_cte_int -> .)
    IGUIGU          reduce using rule 153 (r_pila_operandos_push_cte_int -> .)
    AND             reduce using rule 153 (r_pila_operandos_push_cte_int -> .)
    OR              reduce using rule 153 (r_pila_operandos_push_cte_int -> .)
    MAYIGU          reduce using rule 153 (r_pila_operandos_push_cte_int -> .)
    MENIGU          reduce using rule 153 (r_pila_operandos_push_cte_int -> .)
    PARDER          reduce using rule 153 (r_pila_operandos_push_cte_int -> .)
    COMA            reduce using rule 153 (r_pila_operandos_push_cte_int -> .)
    CORDER          reduce using rule 153 (r_pila_operandos_push_cte_int -> .)
    TO              reduce using rule 153 (r_pila_operandos_push_cte_int -> .)
    PTOCOM          reduce using rule 153 (r_pila_operandos_push_cte_int -> .)
    DO              reduce using rule 153 (r_pila_operandos_push_cte_int -> .)

    r_pila_operandos_push_cte_int  shift and go to state 189

state 144

    (85) varcte -> CTEF . r_pila_operandos_push_cte_flt
    (154) r_pila_operandos_push_cte_flt -> .

    MULT            reduce using rule 154 (r_pila_operandos_push_cte_flt -> .)
    DIV             reduce using rule 154 (r_pila_operandos_push_cte_flt -> .)
    MAS             reduce using rule 154 (r_pila_operandos_push_cte_flt -> .)
    MENOS           reduce using rule 154 (r_pila_operandos_push_cte_flt -> .)
    MAY             reduce using rule 154 (r_pila_operandos_push_cte_flt -> .)
    MEN             reduce using rule 154 (r_pila_operandos_push_cte_flt -> .)
    DIF             reduce using rule 154 (r_pila_operandos_push_cte_flt -> .)
    IGUIGU          reduce using rule 154 (r_pila_operandos_push_cte_flt -> .)
    AND             reduce using rule 154 (r_pila_operandos_push_cte_flt -> .)
    OR              reduce using rule 154 (r_pila_operandos_push_cte_flt -> .)
    MAYIGU          reduce using rule 154 (r_pila_operandos_push_cte_flt -> .)
    MENIGU          reduce using rule 154 (r_pila_operandos_push_cte_flt -> .)
    PARDER          reduce using rule 154 (r_pila_operandos_push_cte_flt -> .)
    COMA            reduce using rule 154 (r_pila_operandos_push_cte_flt -> .)
    CORDER          reduce using rule 154 (r_pila_operandos_push_cte_flt -> .)
    TO              reduce using rule 154 (r_pila_operandos_push_cte_flt -> .)
    PTOCOM          reduce using rule 154 (r_pila_operandos_push_cte_flt -> .)
    DO              reduce using rule 154 (r_pila_operandos_push_cte_flt -> .)

    r_pila_operandos_push_cte_flt  shift and go to state 190

state 145

    (77) factor -> ID r_verifica_variable_existe . r_guardar_variable opcionid r_pila_operandos_push
    (150) r_guardar_variable -> .

    PARIZQ          reduce using rule 150 (r_guardar_variable -> .)
    CORIZQ          reduce using rule 150 (r_guardar_variable -> .)
    MULT            reduce using rule 150 (r_guardar_variable -> .)
    DIV             reduce using rule 150 (r_guardar_variable -> .)
    MAS             reduce using rule 150 (r_guardar_variable -> .)
    MENOS           reduce using rule 150 (r_guardar_variable -> .)
    MAY             reduce using rule 150 (r_guardar_variable -> .)
    MEN             reduce using rule 150 (r_guardar_variable -> .)
    DIF             reduce using rule 150 (r_guardar_variable -> .)
    IGUIGU          reduce using rule 150 (r_guardar_variable -> .)
    AND             reduce using rule 150 (r_guardar_variable -> .)
    OR              reduce using rule 150 (r_guardar_variable -> .)
    MAYIGU          reduce using rule 150 (r_guardar_variable -> .)
    MENIGU          reduce using rule 150 (r_guardar_variable -> .)
    PARDER          reduce using rule 150 (r_guardar_variable -> .)
    COMA            reduce using rule 150 (r_guardar_variable -> .)
    CORDER          reduce using rule 150 (r_guardar_variable -> .)
    TO              reduce using rule 150 (r_guardar_variable -> .)
    PTOCOM          reduce using rule 150 (r_guardar_variable -> .)
    DO              reduce using rule 150 (r_guardar_variable -> .)

    r_guardar_variable             shift and go to state 191

state 146

    (94) escritura -> WRITE PARIZQ escrituraciclo otro . PARDER PTOCOM

    PARDER          shift and go to state 192


state 147

    (97) otro -> COMA . escrituraciclo otro
    (95) escrituraciclo -> . CTE_STRING r_genera_escribe_string
    (96) escrituraciclo -> . expresion r_genera_escribe
    (55) expresion -> . exp r_pop_comp expresionsig
    (67) exp -> . termino r_pop_mas expciclo
    (71) termino -> . factor r_pop_mult factorciclo
    (75) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (76) factor -> . masomenos varcte
    (77) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (78) masomenos -> . MAS
    (79) masomenos -> . MENOS
    (80) masomenos -> . empty
    (116) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    CTE_STRING      shift and go to state 118
    PARIZQ          shift and go to state 107
    ID              shift and go to state 113
    MAS             shift and go to state 114
    MENOS           shift and go to state 115
    CTEI            reduce using rule 116 (empty -> .)
    CTEF            reduce using rule 116 (empty -> .)

  ! ID              [ reduce using rule 116 (empty -> .) ]

    escrituraciclo                 shift and go to state 193
    expresion                      shift and go to state 119
    exp                            shift and go to state 109
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    masomenos                      shift and go to state 112
    empty                          shift and go to state 116

state 148

    (98) otro -> empty .

    PARDER          reduce using rule 98 (otro -> empty .)


state 149

    (95) escrituraciclo -> CTE_STRING r_genera_escribe_string .

    COMA            reduce using rule 95 (escrituraciclo -> CTE_STRING r_genera_escribe_string .)
    PARDER          reduce using rule 95 (escrituraciclo -> CTE_STRING r_genera_escribe_string .)


state 150

    (96) escrituraciclo -> expresion r_genera_escribe .

    COMA            reduce using rule 96 (escrituraciclo -> expresion r_genera_escribe .)
    PARDER          reduce using rule 96 (escrituraciclo -> expresion r_genera_escribe .)


state 151

    (99) lectura -> READ PARIZQ iddim r_genera_lectura . ciclodim PARDER PTOCOM
    (100) ciclodim -> . COMA iddim r_genera_lectura ciclodim
    (101) ciclodim -> . empty
    (116) empty -> .

    COMA            shift and go to state 195
    PARDER          reduce using rule 116 (empty -> .)

    ciclodim                       shift and go to state 194
    empty                          shift and go to state 196

state 152

    (107) condicional -> WHILE r_while_paso_1 PARIZQ expresion . PARDER r_while_paso_2 DO bloque r_while_paso_3

    PARDER          shift and go to state 197


state 153

    (108) nocondicional -> FOR iddim IGU r_pila_operadores_push_igu . expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2
    (55) expresion -> . exp r_pop_comp expresionsig
    (67) exp -> . termino r_pop_mas expciclo
    (71) termino -> . factor r_pop_mult factorciclo
    (75) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (76) factor -> . masomenos varcte
    (77) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (78) masomenos -> . MAS
    (79) masomenos -> . MENOS
    (80) masomenos -> . empty
    (116) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 107
    ID              shift and go to state 113
    MAS             shift and go to state 114
    MENOS           shift and go to state 115
    CTEI            reduce using rule 116 (empty -> .)
    CTEF            reduce using rule 116 (empty -> .)

  ! ID              [ reduce using rule 116 (empty -> .) ]

    expresion                      shift and go to state 198
    exp                            shift and go to state 109
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    masomenos                      shift and go to state 112
    empty                          shift and go to state 116

state 154

    (102) iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id . arrexp arrexp
    (103) arrexp -> . CORIZQ expresion CORDER
    (104) arrexp -> . empty
    (116) empty -> .

  ! shift/reduce conflict for CORIZQ resolved as shift
    CORIZQ          shift and go to state 200
    IGU             reduce using rule 116 (empty -> .)
    COMA            reduce using rule 116 (empty -> .)
    PARDER          reduce using rule 116 (empty -> .)
    MULT            reduce using rule 116 (empty -> .)
    DIV             reduce using rule 116 (empty -> .)
    MAS             reduce using rule 116 (empty -> .)
    MENOS           reduce using rule 116 (empty -> .)
    MAY             reduce using rule 116 (empty -> .)
    MEN             reduce using rule 116 (empty -> .)
    DIF             reduce using rule 116 (empty -> .)
    IGUIGU          reduce using rule 116 (empty -> .)
    AND             reduce using rule 116 (empty -> .)
    OR              reduce using rule 116 (empty -> .)
    MAYIGU          reduce using rule 116 (empty -> .)
    MENIGU          reduce using rule 116 (empty -> .)
    CORDER          reduce using rule 116 (empty -> .)
    TO              reduce using rule 116 (empty -> .)
    PTOCOM          reduce using rule 116 (empty -> .)
    DO              reduce using rule 116 (empty -> .)

  ! CORIZQ          [ reduce using rule 116 (empty -> .) ]

    arrexp                         shift and go to state 199
    empty                          shift and go to state 201

state 155

    (24) funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER . r_register_param_types opvars r_register_quad bloque r_endfunc
    (124) r_register_param_types -> .

    VARTOKEN        reduce using rule 124 (r_register_param_types -> .)
    KEYIZQ          reduce using rule 124 (r_register_param_types -> .)

    r_register_param_types         shift and go to state 202

state 156

    (29) funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types . opvars r_register_quad bloquefunc r_endfunc r_asegurar_return
    (2) opvars -> . vars
    (3) opvars -> . empty
    (6) vars -> . VARTOKEN tipo ID r_register_variable_name arr arr varciclo PTOCOM tipociclo
    (116) empty -> .

    VARTOKEN        shift and go to state 10
    KEYIZQ          reduce using rule 116 (empty -> .)

    opvars                         shift and go to state 203
    vars                           shift and go to state 8
    empty                          shift and go to state 9

state 157

    (27) ciclovarsimple -> COMA varsimple ciclovarsimple .

    PARDER          reduce using rule 27 (ciclovarsimple -> COMA varsimple ciclovarsimple .)


state 158

    (30) ident -> ID r_register_variable_name arrini . arrini
    (31) arrini -> . CORIZQ CORDER
    (32) arrini -> . empty
    (116) empty -> .

    CORIZQ          shift and go to state 159
    COMA            reduce using rule 116 (empty -> .)
    PARDER          reduce using rule 116 (empty -> .)

    arrini                         shift and go to state 204
    empty                          shift and go to state 160

state 159

    (31) arrini -> CORIZQ . CORDER

    CORDER          shift and go to state 205


state 160

    (32) arrini -> empty .

    CORIZQ          reduce using rule 32 (arrini -> empty .)
    COMA            reduce using rule 32 (arrini -> empty .)
    PARDER          reduce using rule 32 (arrini -> empty .)


state 161

    (13) opciontipo -> ID r_register_variable_name . arr arr varciclo PTOCOM tipociclo
    (9) arr -> . CORIZQ CTEI r_register_const CORDER
    (10) arr -> . empty
    (116) empty -> .

  ! shift/reduce conflict for CORIZQ resolved as shift
    CORIZQ          shift and go to state 44
    COMA            reduce using rule 116 (empty -> .)
    PTOCOM          reduce using rule 116 (empty -> .)

  ! CORIZQ          [ reduce using rule 116 (empty -> .) ]

    arr                            shift and go to state 206
    empty                          shift and go to state 45

state 162

    (14) opciontipo -> MODULE ID . r_update_func_type r_update_curr_function_name_especial PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return
    (126) r_update_func_type -> .

    PARIZQ          reduce using rule 126 (r_update_func_type -> .)

    r_update_func_type             shift and go to state 207

state 163

    (7) varciclo -> COMA ID r_register_variable_name arr arr . varciclo
    (7) varciclo -> . COMA ID r_register_variable_name arr arr varciclo
    (8) varciclo -> . empty
    (116) empty -> .

    COMA            shift and go to state 56
    PTOCOM          reduce using rule 116 (empty -> .)

    varciclo                       shift and go to state 208
    empty                          shift and go to state 57

state 164

    (52) asignacion -> ID r_verifica_variable_existe r_pila_operandos_push_id asignacionarr asignacionarr . IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM

    IGU             shift and go to state 209


state 165

    (53) asignacionarr -> CORIZQ expresion . CORDER

    CORDER          shift and go to state 210


state 166

    (90) llamadafunc -> ID r_verifica_void PARIZQ r_era_funcion_void parametros . r_terminar_parametro_void PARDER PTOCOM
    (132) r_terminar_parametro_void -> .

    PARDER          reduce using rule 132 (r_terminar_parametro_void -> .)

    r_terminar_parametro_void      shift and go to state 211

state 167

    (86) parametros -> expresion . r_extraer_parametro cicloparametros
    (133) r_extraer_parametro -> .

    COMA            reduce using rule 133 (r_extraer_parametro -> .)
    PARDER          reduce using rule 133 (r_extraer_parametro -> .)

    r_extraer_parametro            shift and go to state 212

state 168

    (87) parametros -> empty .
    (80) masomenos -> empty .

    PARDER          reduce using rule 87 (parametros -> empty .)
    CTEI            reduce using rule 80 (masomenos -> empty .)
    CTEF            reduce using rule 80 (masomenos -> empty .)
    ID              reduce using rule 80 (masomenos -> empty .)


state 169

    (75) factor -> PARIZQ r_marcar_fondo_de_pila expresion . r_desmarcar_fondo_de_pila PARDER
    (163) r_desmarcar_fondo_de_pila -> .

    PARDER          reduce using rule 163 (r_desmarcar_fondo_de_pila -> .)

    r_desmarcar_fondo_de_pila      shift and go to state 213

state 170

    (91) decision -> IF PARIZQ expresion PARDER r_if_paso_1 . THEN bloque decision_else r_if_paso_3

    THEN            shift and go to state 214


state 171

    (55) expresion -> exp r_pop_comp expresionsig .

    PARDER          reduce using rule 55 (expresion -> exp r_pop_comp expresionsig .)
    COMA            reduce using rule 55 (expresion -> exp r_pop_comp expresionsig .)
    CORDER          reduce using rule 55 (expresion -> exp r_pop_comp expresionsig .)
    TO              reduce using rule 55 (expresion -> exp r_pop_comp expresionsig .)
    PTOCOM          reduce using rule 55 (expresion -> exp r_pop_comp expresionsig .)
    DO              reduce using rule 55 (expresion -> exp r_pop_comp expresionsig .)


state 172

    (56) expresionsig -> MAY . r_pila_operadores_push_may expresionsigequal expresion
    (168) r_pila_operadores_push_may -> .

    IGU             reduce using rule 168 (r_pila_operadores_push_may -> .)
    PARIZQ          reduce using rule 168 (r_pila_operadores_push_may -> .)
    ID              reduce using rule 168 (r_pila_operadores_push_may -> .)
    MAS             reduce using rule 168 (r_pila_operadores_push_may -> .)
    MENOS           reduce using rule 168 (r_pila_operadores_push_may -> .)
    CTEI            reduce using rule 168 (r_pila_operadores_push_may -> .)
    CTEF            reduce using rule 168 (r_pila_operadores_push_may -> .)

    r_pila_operadores_push_may     shift and go to state 215

state 173

    (57) expresionsig -> MEN . r_pila_operadores_push_men expresionsigequal expresion
    (169) r_pila_operadores_push_men -> .

    IGU             reduce using rule 169 (r_pila_operadores_push_men -> .)
    PARIZQ          reduce using rule 169 (r_pila_operadores_push_men -> .)
    ID              reduce using rule 169 (r_pila_operadores_push_men -> .)
    MAS             reduce using rule 169 (r_pila_operadores_push_men -> .)
    MENOS           reduce using rule 169 (r_pila_operadores_push_men -> .)
    CTEI            reduce using rule 169 (r_pila_operadores_push_men -> .)
    CTEF            reduce using rule 169 (r_pila_operadores_push_men -> .)

    r_pila_operadores_push_men     shift and go to state 216

state 174

    (58) expresionsig -> DIF . r_pila_operadores_push_dif expresion
    (170) r_pila_operadores_push_dif -> .

    PARIZQ          reduce using rule 170 (r_pila_operadores_push_dif -> .)
    ID              reduce using rule 170 (r_pila_operadores_push_dif -> .)
    MAS             reduce using rule 170 (r_pila_operadores_push_dif -> .)
    MENOS           reduce using rule 170 (r_pila_operadores_push_dif -> .)
    CTEI            reduce using rule 170 (r_pila_operadores_push_dif -> .)
    CTEF            reduce using rule 170 (r_pila_operadores_push_dif -> .)

    r_pila_operadores_push_dif     shift and go to state 217

state 175

    (59) expresionsig -> IGUIGU . r_pila_operadores_push_iguigu expresion
    (171) r_pila_operadores_push_iguigu -> .

    PARIZQ          reduce using rule 171 (r_pila_operadores_push_iguigu -> .)
    ID              reduce using rule 171 (r_pila_operadores_push_iguigu -> .)
    MAS             reduce using rule 171 (r_pila_operadores_push_iguigu -> .)
    MENOS           reduce using rule 171 (r_pila_operadores_push_iguigu -> .)
    CTEI            reduce using rule 171 (r_pila_operadores_push_iguigu -> .)
    CTEF            reduce using rule 171 (r_pila_operadores_push_iguigu -> .)

    r_pila_operadores_push_iguigu  shift and go to state 218

state 176

    (60) expresionsig -> AND . r_pila_operadores_push_and expresion
    (172) r_pila_operadores_push_and -> .

    PARIZQ          reduce using rule 172 (r_pila_operadores_push_and -> .)
    ID              reduce using rule 172 (r_pila_operadores_push_and -> .)
    MAS             reduce using rule 172 (r_pila_operadores_push_and -> .)
    MENOS           reduce using rule 172 (r_pila_operadores_push_and -> .)
    CTEI            reduce using rule 172 (r_pila_operadores_push_and -> .)
    CTEF            reduce using rule 172 (r_pila_operadores_push_and -> .)

    r_pila_operadores_push_and     shift and go to state 219

state 177

    (61) expresionsig -> OR . r_pila_operadores_push_or expresion
    (173) r_pila_operadores_push_or -> .

    PARIZQ          reduce using rule 173 (r_pila_operadores_push_or -> .)
    ID              reduce using rule 173 (r_pila_operadores_push_or -> .)
    MAS             reduce using rule 173 (r_pila_operadores_push_or -> .)
    MENOS           reduce using rule 173 (r_pila_operadores_push_or -> .)
    CTEI            reduce using rule 173 (r_pila_operadores_push_or -> .)
    CTEF            reduce using rule 173 (r_pila_operadores_push_or -> .)

    r_pila_operadores_push_or      shift and go to state 220

state 178

    (62) expresionsig -> MAYIGU . r_pila_operadores_push_mayigu expresionsigequal expresion
    (175) r_pila_operadores_push_mayigu -> .

    IGU             reduce using rule 175 (r_pila_operadores_push_mayigu -> .)
    PARIZQ          reduce using rule 175 (r_pila_operadores_push_mayigu -> .)
    ID              reduce using rule 175 (r_pila_operadores_push_mayigu -> .)
    MAS             reduce using rule 175 (r_pila_operadores_push_mayigu -> .)
    MENOS           reduce using rule 175 (r_pila_operadores_push_mayigu -> .)
    CTEI            reduce using rule 175 (r_pila_operadores_push_mayigu -> .)
    CTEF            reduce using rule 175 (r_pila_operadores_push_mayigu -> .)

    r_pila_operadores_push_mayigu  shift and go to state 221

state 179

    (63) expresionsig -> MENIGU . r_pila_operadores_push_menigu expresionsigequal expresion
    (176) r_pila_operadores_push_menigu -> .

    IGU             reduce using rule 176 (r_pila_operadores_push_menigu -> .)
    PARIZQ          reduce using rule 176 (r_pila_operadores_push_menigu -> .)
    ID              reduce using rule 176 (r_pila_operadores_push_menigu -> .)
    MAS             reduce using rule 176 (r_pila_operadores_push_menigu -> .)
    MENOS           reduce using rule 176 (r_pila_operadores_push_menigu -> .)
    CTEI            reduce using rule 176 (r_pila_operadores_push_menigu -> .)
    CTEF            reduce using rule 176 (r_pila_operadores_push_menigu -> .)

    r_pila_operadores_push_menigu  shift and go to state 222

state 180

    (64) expresionsig -> empty .

    PARDER          reduce using rule 64 (expresionsig -> empty .)
    COMA            reduce using rule 64 (expresionsig -> empty .)
    CORDER          reduce using rule 64 (expresionsig -> empty .)
    TO              reduce using rule 64 (expresionsig -> empty .)
    PTOCOM          reduce using rule 64 (expresionsig -> empty .)
    DO              reduce using rule 64 (expresionsig -> empty .)


state 181

    (67) exp -> termino r_pop_mas expciclo .

    MAY             reduce using rule 67 (exp -> termino r_pop_mas expciclo .)
    MEN             reduce using rule 67 (exp -> termino r_pop_mas expciclo .)
    DIF             reduce using rule 67 (exp -> termino r_pop_mas expciclo .)
    IGUIGU          reduce using rule 67 (exp -> termino r_pop_mas expciclo .)
    AND             reduce using rule 67 (exp -> termino r_pop_mas expciclo .)
    OR              reduce using rule 67 (exp -> termino r_pop_mas expciclo .)
    MAYIGU          reduce using rule 67 (exp -> termino r_pop_mas expciclo .)
    MENIGU          reduce using rule 67 (exp -> termino r_pop_mas expciclo .)
    PARDER          reduce using rule 67 (exp -> termino r_pop_mas expciclo .)
    COMA            reduce using rule 67 (exp -> termino r_pop_mas expciclo .)
    CORDER          reduce using rule 67 (exp -> termino r_pop_mas expciclo .)
    TO              reduce using rule 67 (exp -> termino r_pop_mas expciclo .)
    PTOCOM          reduce using rule 67 (exp -> termino r_pop_mas expciclo .)
    DO              reduce using rule 67 (exp -> termino r_pop_mas expciclo .)


state 182

    (68) expciclo -> MAS . r_pila_operadores_push_mas exp
    (166) r_pila_operadores_push_mas -> .

    PARIZQ          reduce using rule 166 (r_pila_operadores_push_mas -> .)
    ID              reduce using rule 166 (r_pila_operadores_push_mas -> .)
    MAS             reduce using rule 166 (r_pila_operadores_push_mas -> .)
    MENOS           reduce using rule 166 (r_pila_operadores_push_mas -> .)
    CTEI            reduce using rule 166 (r_pila_operadores_push_mas -> .)
    CTEF            reduce using rule 166 (r_pila_operadores_push_mas -> .)

    r_pila_operadores_push_mas     shift and go to state 223

state 183

    (69) expciclo -> MENOS . r_pila_operadores_push_menos exp
    (167) r_pila_operadores_push_menos -> .

    PARIZQ          reduce using rule 167 (r_pila_operadores_push_menos -> .)
    ID              reduce using rule 167 (r_pila_operadores_push_menos -> .)
    MAS             reduce using rule 167 (r_pila_operadores_push_menos -> .)
    MENOS           reduce using rule 167 (r_pila_operadores_push_menos -> .)
    CTEI            reduce using rule 167 (r_pila_operadores_push_menos -> .)
    CTEF            reduce using rule 167 (r_pila_operadores_push_menos -> .)

    r_pila_operadores_push_menos   shift and go to state 224

state 184

    (70) expciclo -> empty .

    MAY             reduce using rule 70 (expciclo -> empty .)
    MEN             reduce using rule 70 (expciclo -> empty .)
    DIF             reduce using rule 70 (expciclo -> empty .)
    IGUIGU          reduce using rule 70 (expciclo -> empty .)
    AND             reduce using rule 70 (expciclo -> empty .)
    OR              reduce using rule 70 (expciclo -> empty .)
    MAYIGU          reduce using rule 70 (expciclo -> empty .)
    MENIGU          reduce using rule 70 (expciclo -> empty .)
    PARDER          reduce using rule 70 (expciclo -> empty .)
    COMA            reduce using rule 70 (expciclo -> empty .)
    CORDER          reduce using rule 70 (expciclo -> empty .)
    TO              reduce using rule 70 (expciclo -> empty .)
    PTOCOM          reduce using rule 70 (expciclo -> empty .)
    DO              reduce using rule 70 (expciclo -> empty .)


state 185

    (71) termino -> factor r_pop_mult factorciclo .

    MAS             reduce using rule 71 (termino -> factor r_pop_mult factorciclo .)
    MENOS           reduce using rule 71 (termino -> factor r_pop_mult factorciclo .)
    MAY             reduce using rule 71 (termino -> factor r_pop_mult factorciclo .)
    MEN             reduce using rule 71 (termino -> factor r_pop_mult factorciclo .)
    DIF             reduce using rule 71 (termino -> factor r_pop_mult factorciclo .)
    IGUIGU          reduce using rule 71 (termino -> factor r_pop_mult factorciclo .)
    AND             reduce using rule 71 (termino -> factor r_pop_mult factorciclo .)
    OR              reduce using rule 71 (termino -> factor r_pop_mult factorciclo .)
    MAYIGU          reduce using rule 71 (termino -> factor r_pop_mult factorciclo .)
    MENIGU          reduce using rule 71 (termino -> factor r_pop_mult factorciclo .)
    PARDER          reduce using rule 71 (termino -> factor r_pop_mult factorciclo .)
    COMA            reduce using rule 71 (termino -> factor r_pop_mult factorciclo .)
    CORDER          reduce using rule 71 (termino -> factor r_pop_mult factorciclo .)
    TO              reduce using rule 71 (termino -> factor r_pop_mult factorciclo .)
    PTOCOM          reduce using rule 71 (termino -> factor r_pop_mult factorciclo .)
    DO              reduce using rule 71 (termino -> factor r_pop_mult factorciclo .)


state 186

    (72) factorciclo -> MULT . r_pila_operadores_push_mult termino
    (164) r_pila_operadores_push_mult -> .

    PARIZQ          reduce using rule 164 (r_pila_operadores_push_mult -> .)
    ID              reduce using rule 164 (r_pila_operadores_push_mult -> .)
    MAS             reduce using rule 164 (r_pila_operadores_push_mult -> .)
    MENOS           reduce using rule 164 (r_pila_operadores_push_mult -> .)
    CTEI            reduce using rule 164 (r_pila_operadores_push_mult -> .)
    CTEF            reduce using rule 164 (r_pila_operadores_push_mult -> .)

    r_pila_operadores_push_mult    shift and go to state 225

state 187

    (73) factorciclo -> DIV . r_pila_operadores_push_div termino
    (165) r_pila_operadores_push_div -> .

    PARIZQ          reduce using rule 165 (r_pila_operadores_push_div -> .)
    ID              reduce using rule 165 (r_pila_operadores_push_div -> .)
    MAS             reduce using rule 165 (r_pila_operadores_push_div -> .)
    MENOS           reduce using rule 165 (r_pila_operadores_push_div -> .)
    CTEI            reduce using rule 165 (r_pila_operadores_push_div -> .)
    CTEF            reduce using rule 165 (r_pila_operadores_push_div -> .)

    r_pila_operadores_push_div     shift and go to state 226

state 188

    (74) factorciclo -> empty .

    MAS             reduce using rule 74 (factorciclo -> empty .)
    MENOS           reduce using rule 74 (factorciclo -> empty .)
    MAY             reduce using rule 74 (factorciclo -> empty .)
    MEN             reduce using rule 74 (factorciclo -> empty .)
    DIF             reduce using rule 74 (factorciclo -> empty .)
    IGUIGU          reduce using rule 74 (factorciclo -> empty .)
    AND             reduce using rule 74 (factorciclo -> empty .)
    OR              reduce using rule 74 (factorciclo -> empty .)
    MAYIGU          reduce using rule 74 (factorciclo -> empty .)
    MENIGU          reduce using rule 74 (factorciclo -> empty .)
    PARDER          reduce using rule 74 (factorciclo -> empty .)
    COMA            reduce using rule 74 (factorciclo -> empty .)
    CORDER          reduce using rule 74 (factorciclo -> empty .)
    TO              reduce using rule 74 (factorciclo -> empty .)
    PTOCOM          reduce using rule 74 (factorciclo -> empty .)
    DO              reduce using rule 74 (factorciclo -> empty .)


state 189

    (84) varcte -> CTEI r_pila_operandos_push_cte_int .

    MULT            reduce using rule 84 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    DIV             reduce using rule 84 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    MAS             reduce using rule 84 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    MENOS           reduce using rule 84 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    MAY             reduce using rule 84 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    MEN             reduce using rule 84 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    DIF             reduce using rule 84 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    IGUIGU          reduce using rule 84 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    AND             reduce using rule 84 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    OR              reduce using rule 84 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    MAYIGU          reduce using rule 84 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    MENIGU          reduce using rule 84 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    PARDER          reduce using rule 84 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    COMA            reduce using rule 84 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    CORDER          reduce using rule 84 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    TO              reduce using rule 84 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    PTOCOM          reduce using rule 84 (varcte -> CTEI r_pila_operandos_push_cte_int .)
    DO              reduce using rule 84 (varcte -> CTEI r_pila_operandos_push_cte_int .)


state 190

    (85) varcte -> CTEF r_pila_operandos_push_cte_flt .

    MULT            reduce using rule 85 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    DIV             reduce using rule 85 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    MAS             reduce using rule 85 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    MENOS           reduce using rule 85 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    MAY             reduce using rule 85 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    MEN             reduce using rule 85 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    DIF             reduce using rule 85 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    IGUIGU          reduce using rule 85 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    AND             reduce using rule 85 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    OR              reduce using rule 85 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    MAYIGU          reduce using rule 85 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    MENIGU          reduce using rule 85 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    PARDER          reduce using rule 85 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    COMA            reduce using rule 85 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    CORDER          reduce using rule 85 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    TO              reduce using rule 85 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    PTOCOM          reduce using rule 85 (varcte -> CTEF r_pila_operandos_push_cte_flt .)
    DO              reduce using rule 85 (varcte -> CTEF r_pila_operandos_push_cte_flt .)


state 191

    (77) factor -> ID r_verifica_variable_existe r_guardar_variable . opcionid r_pila_operandos_push
    (81) opcionid -> . PARIZQ r_era_funcion_retorno parametros r_terminar_parametro PARDER
    (82) opcionid -> . arrexp arrexp
    (103) arrexp -> . CORIZQ expresion CORDER
    (104) arrexp -> . empty
    (116) empty -> .

  ! shift/reduce conflict for CORIZQ resolved as shift
    PARIZQ          shift and go to state 228
    CORIZQ          shift and go to state 200
    MULT            reduce using rule 116 (empty -> .)
    DIV             reduce using rule 116 (empty -> .)
    MAS             reduce using rule 116 (empty -> .)
    MENOS           reduce using rule 116 (empty -> .)
    MAY             reduce using rule 116 (empty -> .)
    MEN             reduce using rule 116 (empty -> .)
    DIF             reduce using rule 116 (empty -> .)
    IGUIGU          reduce using rule 116 (empty -> .)
    AND             reduce using rule 116 (empty -> .)
    OR              reduce using rule 116 (empty -> .)
    MAYIGU          reduce using rule 116 (empty -> .)
    MENIGU          reduce using rule 116 (empty -> .)
    PARDER          reduce using rule 116 (empty -> .)
    COMA            reduce using rule 116 (empty -> .)
    CORDER          reduce using rule 116 (empty -> .)
    TO              reduce using rule 116 (empty -> .)
    PTOCOM          reduce using rule 116 (empty -> .)
    DO              reduce using rule 116 (empty -> .)

  ! CORIZQ          [ reduce using rule 116 (empty -> .) ]

    opcionid                       shift and go to state 227
    arrexp                         shift and go to state 229
    empty                          shift and go to state 201

state 192

    (94) escritura -> WRITE PARIZQ escrituraciclo otro PARDER . PTOCOM

    PTOCOM          shift and go to state 230


state 193

    (97) otro -> COMA escrituraciclo . otro
    (97) otro -> . COMA escrituraciclo otro
    (98) otro -> . empty
    (116) empty -> .

    COMA            shift and go to state 147
    PARDER          reduce using rule 116 (empty -> .)

    otro                           shift and go to state 231
    empty                          shift and go to state 148

state 194

    (99) lectura -> READ PARIZQ iddim r_genera_lectura ciclodim . PARDER PTOCOM

    PARDER          shift and go to state 232


state 195

    (100) ciclodim -> COMA . iddim r_genera_lectura ciclodim
    (102) iddim -> . ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp

    ID              shift and go to state 93

    iddim                          shift and go to state 233

state 196

    (101) ciclodim -> empty .

    PARDER          reduce using rule 101 (ciclodim -> empty .)


state 197

    (107) condicional -> WHILE r_while_paso_1 PARIZQ expresion PARDER . r_while_paso_2 DO bloque r_while_paso_3
    (145) r_while_paso_2 -> .

    DO              reduce using rule 145 (r_while_paso_2 -> .)

    r_while_paso_2                 shift and go to state 234

state 198

    (108) nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion . TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2

    TO              shift and go to state 235


state 199

    (102) iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id arrexp . arrexp
    (103) arrexp -> . CORIZQ expresion CORDER
    (104) arrexp -> . empty
    (116) empty -> .

    CORIZQ          shift and go to state 200
    IGU             reduce using rule 116 (empty -> .)
    COMA            reduce using rule 116 (empty -> .)
    PARDER          reduce using rule 116 (empty -> .)
    MULT            reduce using rule 116 (empty -> .)
    DIV             reduce using rule 116 (empty -> .)
    MAS             reduce using rule 116 (empty -> .)
    MENOS           reduce using rule 116 (empty -> .)
    MAY             reduce using rule 116 (empty -> .)
    MEN             reduce using rule 116 (empty -> .)
    DIF             reduce using rule 116 (empty -> .)
    IGUIGU          reduce using rule 116 (empty -> .)
    AND             reduce using rule 116 (empty -> .)
    OR              reduce using rule 116 (empty -> .)
    MAYIGU          reduce using rule 116 (empty -> .)
    MENIGU          reduce using rule 116 (empty -> .)
    CORDER          reduce using rule 116 (empty -> .)
    TO              reduce using rule 116 (empty -> .)
    PTOCOM          reduce using rule 116 (empty -> .)
    DO              reduce using rule 116 (empty -> .)

    arrexp                         shift and go to state 236
    empty                          shift and go to state 201

state 200

    (103) arrexp -> CORIZQ . expresion CORDER
    (55) expresion -> . exp r_pop_comp expresionsig
    (67) exp -> . termino r_pop_mas expciclo
    (71) termino -> . factor r_pop_mult factorciclo
    (75) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (76) factor -> . masomenos varcte
    (77) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (78) masomenos -> . MAS
    (79) masomenos -> . MENOS
    (80) masomenos -> . empty
    (116) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 107
    ID              shift and go to state 113
    MAS             shift and go to state 114
    MENOS           shift and go to state 115
    CTEI            reduce using rule 116 (empty -> .)
    CTEF            reduce using rule 116 (empty -> .)

  ! ID              [ reduce using rule 116 (empty -> .) ]

    expresion                      shift and go to state 237
    exp                            shift and go to state 109
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    masomenos                      shift and go to state 112
    empty                          shift and go to state 116

state 201

    (104) arrexp -> empty .

    CORIZQ          reduce using rule 104 (arrexp -> empty .)
    IGU             reduce using rule 104 (arrexp -> empty .)
    COMA            reduce using rule 104 (arrexp -> empty .)
    PARDER          reduce using rule 104 (arrexp -> empty .)
    MULT            reduce using rule 104 (arrexp -> empty .)
    DIV             reduce using rule 104 (arrexp -> empty .)
    MAS             reduce using rule 104 (arrexp -> empty .)
    MENOS           reduce using rule 104 (arrexp -> empty .)
    MAY             reduce using rule 104 (arrexp -> empty .)
    MEN             reduce using rule 104 (arrexp -> empty .)
    DIF             reduce using rule 104 (arrexp -> empty .)
    IGUIGU          reduce using rule 104 (arrexp -> empty .)
    AND             reduce using rule 104 (arrexp -> empty .)
    OR              reduce using rule 104 (arrexp -> empty .)
    MAYIGU          reduce using rule 104 (arrexp -> empty .)
    MENIGU          reduce using rule 104 (arrexp -> empty .)
    CORDER          reduce using rule 104 (arrexp -> empty .)
    TO              reduce using rule 104 (arrexp -> empty .)
    PTOCOM          reduce using rule 104 (arrexp -> empty .)
    DO              reduce using rule 104 (arrexp -> empty .)


state 202

    (24) funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types . opvars r_register_quad bloque r_endfunc
    (2) opvars -> . vars
    (3) opvars -> . empty
    (6) vars -> . VARTOKEN tipo ID r_register_variable_name arr arr varciclo PTOCOM tipociclo
    (116) empty -> .

    VARTOKEN        shift and go to state 10
    KEYIZQ          reduce using rule 116 (empty -> .)

    opvars                         shift and go to state 238
    vars                           shift and go to state 8
    empty                          shift and go to state 9

state 203

    (29) funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars . r_register_quad bloquefunc r_endfunc r_asegurar_return
    (127) r_register_quad -> .

    KEYIZQ          reduce using rule 127 (r_register_quad -> .)

    r_register_quad                shift and go to state 239

state 204

    (30) ident -> ID r_register_variable_name arrini arrini .

    COMA            reduce using rule 30 (ident -> ID r_register_variable_name arrini arrini .)
    PARDER          reduce using rule 30 (ident -> ID r_register_variable_name arrini arrini .)


state 205

    (31) arrini -> CORIZQ CORDER .

    CORIZQ          reduce using rule 31 (arrini -> CORIZQ CORDER .)
    COMA            reduce using rule 31 (arrini -> CORIZQ CORDER .)
    PARDER          reduce using rule 31 (arrini -> CORIZQ CORDER .)


state 206

    (13) opciontipo -> ID r_register_variable_name arr . arr varciclo PTOCOM tipociclo
    (9) arr -> . CORIZQ CTEI r_register_const CORDER
    (10) arr -> . empty
    (116) empty -> .

    CORIZQ          shift and go to state 44
    COMA            reduce using rule 116 (empty -> .)
    PTOCOM          reduce using rule 116 (empty -> .)

    arr                            shift and go to state 240
    empty                          shift and go to state 45

state 207

    (14) opciontipo -> MODULE ID r_update_func_type . r_update_curr_function_name_especial PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return
    (122) r_update_curr_function_name_especial -> .

    PARIZQ          reduce using rule 122 (r_update_curr_function_name_especial -> .)

    r_update_curr_function_name_especial shift and go to state 241

state 208

    (7) varciclo -> COMA ID r_register_variable_name arr arr varciclo .

    PTOCOM          reduce using rule 7 (varciclo -> COMA ID r_register_variable_name arr arr varciclo .)


state 209

    (52) asignacion -> ID r_verifica_variable_existe r_pila_operandos_push_id asignacionarr asignacionarr IGU . r_pila_operadores_push_igu expresion r_pop_igu PTOCOM
    (174) r_pila_operadores_push_igu -> .

    PARIZQ          reduce using rule 174 (r_pila_operadores_push_igu -> .)
    ID              reduce using rule 174 (r_pila_operadores_push_igu -> .)
    MAS             reduce using rule 174 (r_pila_operadores_push_igu -> .)
    MENOS           reduce using rule 174 (r_pila_operadores_push_igu -> .)
    CTEI            reduce using rule 174 (r_pila_operadores_push_igu -> .)
    CTEF            reduce using rule 174 (r_pila_operadores_push_igu -> .)

    r_pila_operadores_push_igu     shift and go to state 242

state 210

    (53) asignacionarr -> CORIZQ expresion CORDER .

    CORIZQ          reduce using rule 53 (asignacionarr -> CORIZQ expresion CORDER .)
    IGU             reduce using rule 53 (asignacionarr -> CORIZQ expresion CORDER .)


state 211

    (90) llamadafunc -> ID r_verifica_void PARIZQ r_era_funcion_void parametros r_terminar_parametro_void . PARDER PTOCOM

    PARDER          shift and go to state 243


state 212

    (86) parametros -> expresion r_extraer_parametro . cicloparametros
    (88) cicloparametros -> . COMA expresion r_extraer_parametro cicloparametros
    (89) cicloparametros -> . empty
    (116) empty -> .

    COMA            shift and go to state 245
    PARDER          reduce using rule 116 (empty -> .)

    cicloparametros                shift and go to state 244
    empty                          shift and go to state 246

state 213

    (75) factor -> PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila . PARDER

    PARDER          shift and go to state 247


state 214

    (91) decision -> IF PARIZQ expresion PARDER r_if_paso_1 THEN . bloque decision_else r_if_paso_3
    (33) bloque -> . KEYIZQ bloqueopcion KEYDER

    KEYIZQ          shift and go to state 52

    bloque                         shift and go to state 248

state 215

    (56) expresionsig -> MAY r_pila_operadores_push_may . expresionsigequal expresion
    (65) expresionsigequal -> . IGU
    (66) expresionsigequal -> . empty
    (116) empty -> .

    IGU             shift and go to state 250
    PARIZQ          reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    MAS             reduce using rule 116 (empty -> .)
    MENOS           reduce using rule 116 (empty -> .)
    CTEI            reduce using rule 116 (empty -> .)
    CTEF            reduce using rule 116 (empty -> .)

    expresionsigequal              shift and go to state 249
    empty                          shift and go to state 251

state 216

    (57) expresionsig -> MEN r_pila_operadores_push_men . expresionsigequal expresion
    (65) expresionsigequal -> . IGU
    (66) expresionsigequal -> . empty
    (116) empty -> .

    IGU             shift and go to state 250
    PARIZQ          reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    MAS             reduce using rule 116 (empty -> .)
    MENOS           reduce using rule 116 (empty -> .)
    CTEI            reduce using rule 116 (empty -> .)
    CTEF            reduce using rule 116 (empty -> .)

    expresionsigequal              shift and go to state 252
    empty                          shift and go to state 251

state 217

    (58) expresionsig -> DIF r_pila_operadores_push_dif . expresion
    (55) expresion -> . exp r_pop_comp expresionsig
    (67) exp -> . termino r_pop_mas expciclo
    (71) termino -> . factor r_pop_mult factorciclo
    (75) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (76) factor -> . masomenos varcte
    (77) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (78) masomenos -> . MAS
    (79) masomenos -> . MENOS
    (80) masomenos -> . empty
    (116) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 107
    ID              shift and go to state 113
    MAS             shift and go to state 114
    MENOS           shift and go to state 115
    CTEI            reduce using rule 116 (empty -> .)
    CTEF            reduce using rule 116 (empty -> .)

  ! ID              [ reduce using rule 116 (empty -> .) ]

    expresion                      shift and go to state 253
    exp                            shift and go to state 109
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    masomenos                      shift and go to state 112
    empty                          shift and go to state 116

state 218

    (59) expresionsig -> IGUIGU r_pila_operadores_push_iguigu . expresion
    (55) expresion -> . exp r_pop_comp expresionsig
    (67) exp -> . termino r_pop_mas expciclo
    (71) termino -> . factor r_pop_mult factorciclo
    (75) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (76) factor -> . masomenos varcte
    (77) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (78) masomenos -> . MAS
    (79) masomenos -> . MENOS
    (80) masomenos -> . empty
    (116) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 107
    ID              shift and go to state 113
    MAS             shift and go to state 114
    MENOS           shift and go to state 115
    CTEI            reduce using rule 116 (empty -> .)
    CTEF            reduce using rule 116 (empty -> .)

  ! ID              [ reduce using rule 116 (empty -> .) ]

    expresion                      shift and go to state 254
    exp                            shift and go to state 109
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    masomenos                      shift and go to state 112
    empty                          shift and go to state 116

state 219

    (60) expresionsig -> AND r_pila_operadores_push_and . expresion
    (55) expresion -> . exp r_pop_comp expresionsig
    (67) exp -> . termino r_pop_mas expciclo
    (71) termino -> . factor r_pop_mult factorciclo
    (75) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (76) factor -> . masomenos varcte
    (77) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (78) masomenos -> . MAS
    (79) masomenos -> . MENOS
    (80) masomenos -> . empty
    (116) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 107
    ID              shift and go to state 113
    MAS             shift and go to state 114
    MENOS           shift and go to state 115
    CTEI            reduce using rule 116 (empty -> .)
    CTEF            reduce using rule 116 (empty -> .)

  ! ID              [ reduce using rule 116 (empty -> .) ]

    expresion                      shift and go to state 255
    exp                            shift and go to state 109
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    masomenos                      shift and go to state 112
    empty                          shift and go to state 116

state 220

    (61) expresionsig -> OR r_pila_operadores_push_or . expresion
    (55) expresion -> . exp r_pop_comp expresionsig
    (67) exp -> . termino r_pop_mas expciclo
    (71) termino -> . factor r_pop_mult factorciclo
    (75) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (76) factor -> . masomenos varcte
    (77) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (78) masomenos -> . MAS
    (79) masomenos -> . MENOS
    (80) masomenos -> . empty
    (116) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 107
    ID              shift and go to state 113
    MAS             shift and go to state 114
    MENOS           shift and go to state 115
    CTEI            reduce using rule 116 (empty -> .)
    CTEF            reduce using rule 116 (empty -> .)

  ! ID              [ reduce using rule 116 (empty -> .) ]

    expresion                      shift and go to state 256
    exp                            shift and go to state 109
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    masomenos                      shift and go to state 112
    empty                          shift and go to state 116

state 221

    (62) expresionsig -> MAYIGU r_pila_operadores_push_mayigu . expresionsigequal expresion
    (65) expresionsigequal -> . IGU
    (66) expresionsigequal -> . empty
    (116) empty -> .

    IGU             shift and go to state 250
    PARIZQ          reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    MAS             reduce using rule 116 (empty -> .)
    MENOS           reduce using rule 116 (empty -> .)
    CTEI            reduce using rule 116 (empty -> .)
    CTEF            reduce using rule 116 (empty -> .)

    expresionsigequal              shift and go to state 257
    empty                          shift and go to state 251

state 222

    (63) expresionsig -> MENIGU r_pila_operadores_push_menigu . expresionsigequal expresion
    (65) expresionsigequal -> . IGU
    (66) expresionsigequal -> . empty
    (116) empty -> .

    IGU             shift and go to state 250
    PARIZQ          reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    MAS             reduce using rule 116 (empty -> .)
    MENOS           reduce using rule 116 (empty -> .)
    CTEI            reduce using rule 116 (empty -> .)
    CTEF            reduce using rule 116 (empty -> .)

    expresionsigequal              shift and go to state 258
    empty                          shift and go to state 251

state 223

    (68) expciclo -> MAS r_pila_operadores_push_mas . exp
    (67) exp -> . termino r_pop_mas expciclo
    (71) termino -> . factor r_pop_mult factorciclo
    (75) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (76) factor -> . masomenos varcte
    (77) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (78) masomenos -> . MAS
    (79) masomenos -> . MENOS
    (80) masomenos -> . empty
    (116) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 107
    ID              shift and go to state 113
    MAS             shift and go to state 114
    MENOS           shift and go to state 115
    CTEI            reduce using rule 116 (empty -> .)
    CTEF            reduce using rule 116 (empty -> .)

  ! ID              [ reduce using rule 116 (empty -> .) ]

    exp                            shift and go to state 259
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    masomenos                      shift and go to state 112
    empty                          shift and go to state 116

state 224

    (69) expciclo -> MENOS r_pila_operadores_push_menos . exp
    (67) exp -> . termino r_pop_mas expciclo
    (71) termino -> . factor r_pop_mult factorciclo
    (75) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (76) factor -> . masomenos varcte
    (77) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (78) masomenos -> . MAS
    (79) masomenos -> . MENOS
    (80) masomenos -> . empty
    (116) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 107
    ID              shift and go to state 113
    MAS             shift and go to state 114
    MENOS           shift and go to state 115
    CTEI            reduce using rule 116 (empty -> .)
    CTEF            reduce using rule 116 (empty -> .)

  ! ID              [ reduce using rule 116 (empty -> .) ]

    exp                            shift and go to state 260
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    masomenos                      shift and go to state 112
    empty                          shift and go to state 116

state 225

    (72) factorciclo -> MULT r_pila_operadores_push_mult . termino
    (71) termino -> . factor r_pop_mult factorciclo
    (75) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (76) factor -> . masomenos varcte
    (77) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (78) masomenos -> . MAS
    (79) masomenos -> . MENOS
    (80) masomenos -> . empty
    (116) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 107
    ID              shift and go to state 113
    MAS             shift and go to state 114
    MENOS           shift and go to state 115
    CTEI            reduce using rule 116 (empty -> .)
    CTEF            reduce using rule 116 (empty -> .)

  ! ID              [ reduce using rule 116 (empty -> .) ]

    termino                        shift and go to state 261
    factor                         shift and go to state 111
    masomenos                      shift and go to state 112
    empty                          shift and go to state 116

state 226

    (73) factorciclo -> DIV r_pila_operadores_push_div . termino
    (71) termino -> . factor r_pop_mult factorciclo
    (75) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (76) factor -> . masomenos varcte
    (77) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (78) masomenos -> . MAS
    (79) masomenos -> . MENOS
    (80) masomenos -> . empty
    (116) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 107
    ID              shift and go to state 113
    MAS             shift and go to state 114
    MENOS           shift and go to state 115
    CTEI            reduce using rule 116 (empty -> .)
    CTEF            reduce using rule 116 (empty -> .)

  ! ID              [ reduce using rule 116 (empty -> .) ]

    termino                        shift and go to state 262
    factor                         shift and go to state 111
    masomenos                      shift and go to state 112
    empty                          shift and go to state 116

state 227

    (77) factor -> ID r_verifica_variable_existe r_guardar_variable opcionid . r_pila_operandos_push
    (151) r_pila_operandos_push -> .

    MULT            reduce using rule 151 (r_pila_operandos_push -> .)
    DIV             reduce using rule 151 (r_pila_operandos_push -> .)
    MAS             reduce using rule 151 (r_pila_operandos_push -> .)
    MENOS           reduce using rule 151 (r_pila_operandos_push -> .)
    MAY             reduce using rule 151 (r_pila_operandos_push -> .)
    MEN             reduce using rule 151 (r_pila_operandos_push -> .)
    DIF             reduce using rule 151 (r_pila_operandos_push -> .)
    IGUIGU          reduce using rule 151 (r_pila_operandos_push -> .)
    AND             reduce using rule 151 (r_pila_operandos_push -> .)
    OR              reduce using rule 151 (r_pila_operandos_push -> .)
    MAYIGU          reduce using rule 151 (r_pila_operandos_push -> .)
    MENIGU          reduce using rule 151 (r_pila_operandos_push -> .)
    PARDER          reduce using rule 151 (r_pila_operandos_push -> .)
    COMA            reduce using rule 151 (r_pila_operandos_push -> .)
    CORDER          reduce using rule 151 (r_pila_operandos_push -> .)
    TO              reduce using rule 151 (r_pila_operandos_push -> .)
    PTOCOM          reduce using rule 151 (r_pila_operandos_push -> .)
    DO              reduce using rule 151 (r_pila_operandos_push -> .)

    r_pila_operandos_push          shift and go to state 263

state 228

    (81) opcionid -> PARIZQ . r_era_funcion_retorno parametros r_terminar_parametro PARDER
    (129) r_era_funcion_retorno -> .

    PARIZQ          reduce using rule 129 (r_era_funcion_retorno -> .)
    ID              reduce using rule 129 (r_era_funcion_retorno -> .)
    MAS             reduce using rule 129 (r_era_funcion_retorno -> .)
    MENOS           reduce using rule 129 (r_era_funcion_retorno -> .)
    PARDER          reduce using rule 129 (r_era_funcion_retorno -> .)
    CTEI            reduce using rule 129 (r_era_funcion_retorno -> .)
    CTEF            reduce using rule 129 (r_era_funcion_retorno -> .)

    r_era_funcion_retorno          shift and go to state 264

state 229

    (82) opcionid -> arrexp . arrexp
    (103) arrexp -> . CORIZQ expresion CORDER
    (104) arrexp -> . empty
    (116) empty -> .

    CORIZQ          shift and go to state 200
    MULT            reduce using rule 116 (empty -> .)
    DIV             reduce using rule 116 (empty -> .)
    MAS             reduce using rule 116 (empty -> .)
    MENOS           reduce using rule 116 (empty -> .)
    MAY             reduce using rule 116 (empty -> .)
    MEN             reduce using rule 116 (empty -> .)
    DIF             reduce using rule 116 (empty -> .)
    IGUIGU          reduce using rule 116 (empty -> .)
    AND             reduce using rule 116 (empty -> .)
    OR              reduce using rule 116 (empty -> .)
    MAYIGU          reduce using rule 116 (empty -> .)
    MENIGU          reduce using rule 116 (empty -> .)
    PARDER          reduce using rule 116 (empty -> .)
    COMA            reduce using rule 116 (empty -> .)
    CORDER          reduce using rule 116 (empty -> .)
    TO              reduce using rule 116 (empty -> .)
    PTOCOM          reduce using rule 116 (empty -> .)
    DO              reduce using rule 116 (empty -> .)

    arrexp                         shift and go to state 265
    empty                          shift and go to state 201

state 230

    (94) escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM .

    ID              reduce using rule 94 (escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM .)
    IF              reduce using rule 94 (escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM .)
    WRITE           reduce using rule 94 (escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM .)
    READ            reduce using rule 94 (escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM .)
    WHILE           reduce using rule 94 (escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM .)
    FOR             reduce using rule 94 (escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM .)
    KEYDER          reduce using rule 94 (escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM .)
    RETURN          reduce using rule 94 (escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM .)


state 231

    (97) otro -> COMA escrituraciclo otro .

    PARDER          reduce using rule 97 (otro -> COMA escrituraciclo otro .)


state 232

    (99) lectura -> READ PARIZQ iddim r_genera_lectura ciclodim PARDER . PTOCOM

    PTOCOM          shift and go to state 266


state 233

    (100) ciclodim -> COMA iddim . r_genera_lectura ciclodim
    (158) r_genera_lectura -> .

    COMA            reduce using rule 158 (r_genera_lectura -> .)
    PARDER          reduce using rule 158 (r_genera_lectura -> .)

    r_genera_lectura               shift and go to state 267

state 234

    (107) condicional -> WHILE r_while_paso_1 PARIZQ expresion PARDER r_while_paso_2 . DO bloque r_while_paso_3

    DO              shift and go to state 268


state 235

    (108) nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion TO . r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2
    (147) r_pop_igu_for -> .

    PARIZQ          reduce using rule 147 (r_pop_igu_for -> .)
    ID              reduce using rule 147 (r_pop_igu_for -> .)
    MAS             reduce using rule 147 (r_pop_igu_for -> .)
    MENOS           reduce using rule 147 (r_pop_igu_for -> .)
    CTEI            reduce using rule 147 (r_pop_igu_for -> .)
    CTEF            reduce using rule 147 (r_pop_igu_for -> .)

    r_pop_igu_for                  shift and go to state 269

state 236

    (102) iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp .

    IGU             reduce using rule 102 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp .)
    COMA            reduce using rule 102 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp .)
    PARDER          reduce using rule 102 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp .)
    MULT            reduce using rule 102 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp .)
    DIV             reduce using rule 102 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp .)
    MAS             reduce using rule 102 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp .)
    MENOS           reduce using rule 102 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp .)
    MAY             reduce using rule 102 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp .)
    MEN             reduce using rule 102 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp .)
    DIF             reduce using rule 102 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp .)
    IGUIGU          reduce using rule 102 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp .)
    AND             reduce using rule 102 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp .)
    OR              reduce using rule 102 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp .)
    MAYIGU          reduce using rule 102 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp .)
    MENIGU          reduce using rule 102 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp .)
    CORDER          reduce using rule 102 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp .)
    TO              reduce using rule 102 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp .)
    PTOCOM          reduce using rule 102 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp .)
    DO              reduce using rule 102 (iddim -> ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp .)


state 237

    (103) arrexp -> CORIZQ expresion . CORDER

    CORDER          shift and go to state 270


state 238

    (24) funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars . r_register_quad bloque r_endfunc
    (127) r_register_quad -> .

    KEYIZQ          reduce using rule 127 (r_register_quad -> .)

    r_register_quad                shift and go to state 271

state 239

    (29) funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad . bloquefunc r_endfunc r_asegurar_return
    (36) bloquefunc -> . KEYIZQ bloqueopcionfunc KEYDER

    KEYIZQ          shift and go to state 273

    bloquefunc                     shift and go to state 272

state 240

    (13) opciontipo -> ID r_register_variable_name arr arr . varciclo PTOCOM tipociclo
    (7) varciclo -> . COMA ID r_register_variable_name arr arr varciclo
    (8) varciclo -> . empty
    (116) empty -> .

    COMA            shift and go to state 56
    PTOCOM          reduce using rule 116 (empty -> .)

    varciclo                       shift and go to state 274
    empty                          shift and go to state 57

state 241

    (14) opciontipo -> MODULE ID r_update_func_type r_update_curr_function_name_especial . PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return

    PARIZQ          shift and go to state 275


state 242

    (52) asignacion -> ID r_verifica_variable_existe r_pila_operandos_push_id asignacionarr asignacionarr IGU r_pila_operadores_push_igu . expresion r_pop_igu PTOCOM
    (55) expresion -> . exp r_pop_comp expresionsig
    (67) exp -> . termino r_pop_mas expciclo
    (71) termino -> . factor r_pop_mult factorciclo
    (75) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (76) factor -> . masomenos varcte
    (77) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (78) masomenos -> . MAS
    (79) masomenos -> . MENOS
    (80) masomenos -> . empty
    (116) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 107
    ID              shift and go to state 113
    MAS             shift and go to state 114
    MENOS           shift and go to state 115
    CTEI            reduce using rule 116 (empty -> .)
    CTEF            reduce using rule 116 (empty -> .)

  ! ID              [ reduce using rule 116 (empty -> .) ]

    expresion                      shift and go to state 276
    exp                            shift and go to state 109
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    masomenos                      shift and go to state 112
    empty                          shift and go to state 116

state 243

    (90) llamadafunc -> ID r_verifica_void PARIZQ r_era_funcion_void parametros r_terminar_parametro_void PARDER . PTOCOM

    PTOCOM          shift and go to state 277


state 244

    (86) parametros -> expresion r_extraer_parametro cicloparametros .

    PARDER          reduce using rule 86 (parametros -> expresion r_extraer_parametro cicloparametros .)


state 245

    (88) cicloparametros -> COMA . expresion r_extraer_parametro cicloparametros
    (55) expresion -> . exp r_pop_comp expresionsig
    (67) exp -> . termino r_pop_mas expciclo
    (71) termino -> . factor r_pop_mult factorciclo
    (75) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (76) factor -> . masomenos varcte
    (77) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (78) masomenos -> . MAS
    (79) masomenos -> . MENOS
    (80) masomenos -> . empty
    (116) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 107
    ID              shift and go to state 113
    MAS             shift and go to state 114
    MENOS           shift and go to state 115
    CTEI            reduce using rule 116 (empty -> .)
    CTEF            reduce using rule 116 (empty -> .)

  ! ID              [ reduce using rule 116 (empty -> .) ]

    expresion                      shift and go to state 278
    exp                            shift and go to state 109
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    masomenos                      shift and go to state 112
    empty                          shift and go to state 116

state 246

    (89) cicloparametros -> empty .

    PARDER          reduce using rule 89 (cicloparametros -> empty .)


state 247

    (75) factor -> PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER .

    MULT            reduce using rule 75 (factor -> PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER .)
    DIV             reduce using rule 75 (factor -> PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER .)
    MAS             reduce using rule 75 (factor -> PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER .)
    MENOS           reduce using rule 75 (factor -> PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER .)
    MAY             reduce using rule 75 (factor -> PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER .)
    MEN             reduce using rule 75 (factor -> PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER .)
    DIF             reduce using rule 75 (factor -> PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER .)
    IGUIGU          reduce using rule 75 (factor -> PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER .)
    AND             reduce using rule 75 (factor -> PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER .)
    OR              reduce using rule 75 (factor -> PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER .)
    MAYIGU          reduce using rule 75 (factor -> PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER .)
    MENIGU          reduce using rule 75 (factor -> PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER .)
    PARDER          reduce using rule 75 (factor -> PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER .)
    COMA            reduce using rule 75 (factor -> PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER .)
    CORDER          reduce using rule 75 (factor -> PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER .)
    TO              reduce using rule 75 (factor -> PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER .)
    PTOCOM          reduce using rule 75 (factor -> PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER .)
    DO              reduce using rule 75 (factor -> PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER .)


state 248

    (91) decision -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloque . decision_else r_if_paso_3
    (92) decision_else -> . ELSE r_if_paso_2 bloque
    (93) decision_else -> . empty
    (116) empty -> .

    ELSE            shift and go to state 280
    ID              reduce using rule 116 (empty -> .)
    IF              reduce using rule 116 (empty -> .)
    WRITE           reduce using rule 116 (empty -> .)
    READ            reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    FOR             reduce using rule 116 (empty -> .)
    KEYDER          reduce using rule 116 (empty -> .)

    decision_else                  shift and go to state 279
    empty                          shift and go to state 281

state 249

    (56) expresionsig -> MAY r_pila_operadores_push_may expresionsigequal . expresion
    (55) expresion -> . exp r_pop_comp expresionsig
    (67) exp -> . termino r_pop_mas expciclo
    (71) termino -> . factor r_pop_mult factorciclo
    (75) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (76) factor -> . masomenos varcte
    (77) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (78) masomenos -> . MAS
    (79) masomenos -> . MENOS
    (80) masomenos -> . empty
    (116) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 107
    ID              shift and go to state 113
    MAS             shift and go to state 114
    MENOS           shift and go to state 115
    CTEI            reduce using rule 116 (empty -> .)
    CTEF            reduce using rule 116 (empty -> .)

  ! ID              [ reduce using rule 116 (empty -> .) ]

    expresion                      shift and go to state 282
    exp                            shift and go to state 109
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    masomenos                      shift and go to state 112
    empty                          shift and go to state 116

state 250

    (65) expresionsigequal -> IGU .

    PARIZQ          reduce using rule 65 (expresionsigequal -> IGU .)
    ID              reduce using rule 65 (expresionsigequal -> IGU .)
    MAS             reduce using rule 65 (expresionsigequal -> IGU .)
    MENOS           reduce using rule 65 (expresionsigequal -> IGU .)
    CTEI            reduce using rule 65 (expresionsigequal -> IGU .)
    CTEF            reduce using rule 65 (expresionsigequal -> IGU .)


state 251

    (66) expresionsigequal -> empty .

    PARIZQ          reduce using rule 66 (expresionsigequal -> empty .)
    ID              reduce using rule 66 (expresionsigequal -> empty .)
    MAS             reduce using rule 66 (expresionsigequal -> empty .)
    MENOS           reduce using rule 66 (expresionsigequal -> empty .)
    CTEI            reduce using rule 66 (expresionsigequal -> empty .)
    CTEF            reduce using rule 66 (expresionsigequal -> empty .)


state 252

    (57) expresionsig -> MEN r_pila_operadores_push_men expresionsigequal . expresion
    (55) expresion -> . exp r_pop_comp expresionsig
    (67) exp -> . termino r_pop_mas expciclo
    (71) termino -> . factor r_pop_mult factorciclo
    (75) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (76) factor -> . masomenos varcte
    (77) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (78) masomenos -> . MAS
    (79) masomenos -> . MENOS
    (80) masomenos -> . empty
    (116) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 107
    ID              shift and go to state 113
    MAS             shift and go to state 114
    MENOS           shift and go to state 115
    CTEI            reduce using rule 116 (empty -> .)
    CTEF            reduce using rule 116 (empty -> .)

  ! ID              [ reduce using rule 116 (empty -> .) ]

    expresion                      shift and go to state 283
    exp                            shift and go to state 109
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    masomenos                      shift and go to state 112
    empty                          shift and go to state 116

state 253

    (58) expresionsig -> DIF r_pila_operadores_push_dif expresion .

    PARDER          reduce using rule 58 (expresionsig -> DIF r_pila_operadores_push_dif expresion .)
    COMA            reduce using rule 58 (expresionsig -> DIF r_pila_operadores_push_dif expresion .)
    CORDER          reduce using rule 58 (expresionsig -> DIF r_pila_operadores_push_dif expresion .)
    TO              reduce using rule 58 (expresionsig -> DIF r_pila_operadores_push_dif expresion .)
    PTOCOM          reduce using rule 58 (expresionsig -> DIF r_pila_operadores_push_dif expresion .)
    DO              reduce using rule 58 (expresionsig -> DIF r_pila_operadores_push_dif expresion .)


state 254

    (59) expresionsig -> IGUIGU r_pila_operadores_push_iguigu expresion .

    PARDER          reduce using rule 59 (expresionsig -> IGUIGU r_pila_operadores_push_iguigu expresion .)
    COMA            reduce using rule 59 (expresionsig -> IGUIGU r_pila_operadores_push_iguigu expresion .)
    CORDER          reduce using rule 59 (expresionsig -> IGUIGU r_pila_operadores_push_iguigu expresion .)
    TO              reduce using rule 59 (expresionsig -> IGUIGU r_pila_operadores_push_iguigu expresion .)
    PTOCOM          reduce using rule 59 (expresionsig -> IGUIGU r_pila_operadores_push_iguigu expresion .)
    DO              reduce using rule 59 (expresionsig -> IGUIGU r_pila_operadores_push_iguigu expresion .)


state 255

    (60) expresionsig -> AND r_pila_operadores_push_and expresion .

    PARDER          reduce using rule 60 (expresionsig -> AND r_pila_operadores_push_and expresion .)
    COMA            reduce using rule 60 (expresionsig -> AND r_pila_operadores_push_and expresion .)
    CORDER          reduce using rule 60 (expresionsig -> AND r_pila_operadores_push_and expresion .)
    TO              reduce using rule 60 (expresionsig -> AND r_pila_operadores_push_and expresion .)
    PTOCOM          reduce using rule 60 (expresionsig -> AND r_pila_operadores_push_and expresion .)
    DO              reduce using rule 60 (expresionsig -> AND r_pila_operadores_push_and expresion .)


state 256

    (61) expresionsig -> OR r_pila_operadores_push_or expresion .

    PARDER          reduce using rule 61 (expresionsig -> OR r_pila_operadores_push_or expresion .)
    COMA            reduce using rule 61 (expresionsig -> OR r_pila_operadores_push_or expresion .)
    CORDER          reduce using rule 61 (expresionsig -> OR r_pila_operadores_push_or expresion .)
    TO              reduce using rule 61 (expresionsig -> OR r_pila_operadores_push_or expresion .)
    PTOCOM          reduce using rule 61 (expresionsig -> OR r_pila_operadores_push_or expresion .)
    DO              reduce using rule 61 (expresionsig -> OR r_pila_operadores_push_or expresion .)


state 257

    (62) expresionsig -> MAYIGU r_pila_operadores_push_mayigu expresionsigequal . expresion
    (55) expresion -> . exp r_pop_comp expresionsig
    (67) exp -> . termino r_pop_mas expciclo
    (71) termino -> . factor r_pop_mult factorciclo
    (75) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (76) factor -> . masomenos varcte
    (77) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (78) masomenos -> . MAS
    (79) masomenos -> . MENOS
    (80) masomenos -> . empty
    (116) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 107
    ID              shift and go to state 113
    MAS             shift and go to state 114
    MENOS           shift and go to state 115
    CTEI            reduce using rule 116 (empty -> .)
    CTEF            reduce using rule 116 (empty -> .)

  ! ID              [ reduce using rule 116 (empty -> .) ]

    expresion                      shift and go to state 284
    exp                            shift and go to state 109
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    masomenos                      shift and go to state 112
    empty                          shift and go to state 116

state 258

    (63) expresionsig -> MENIGU r_pila_operadores_push_menigu expresionsigequal . expresion
    (55) expresion -> . exp r_pop_comp expresionsig
    (67) exp -> . termino r_pop_mas expciclo
    (71) termino -> . factor r_pop_mult factorciclo
    (75) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (76) factor -> . masomenos varcte
    (77) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (78) masomenos -> . MAS
    (79) masomenos -> . MENOS
    (80) masomenos -> . empty
    (116) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 107
    ID              shift and go to state 113
    MAS             shift and go to state 114
    MENOS           shift and go to state 115
    CTEI            reduce using rule 116 (empty -> .)
    CTEF            reduce using rule 116 (empty -> .)

  ! ID              [ reduce using rule 116 (empty -> .) ]

    expresion                      shift and go to state 285
    exp                            shift and go to state 109
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    masomenos                      shift and go to state 112
    empty                          shift and go to state 116

state 259

    (68) expciclo -> MAS r_pila_operadores_push_mas exp .

    MAY             reduce using rule 68 (expciclo -> MAS r_pila_operadores_push_mas exp .)
    MEN             reduce using rule 68 (expciclo -> MAS r_pila_operadores_push_mas exp .)
    DIF             reduce using rule 68 (expciclo -> MAS r_pila_operadores_push_mas exp .)
    IGUIGU          reduce using rule 68 (expciclo -> MAS r_pila_operadores_push_mas exp .)
    AND             reduce using rule 68 (expciclo -> MAS r_pila_operadores_push_mas exp .)
    OR              reduce using rule 68 (expciclo -> MAS r_pila_operadores_push_mas exp .)
    MAYIGU          reduce using rule 68 (expciclo -> MAS r_pila_operadores_push_mas exp .)
    MENIGU          reduce using rule 68 (expciclo -> MAS r_pila_operadores_push_mas exp .)
    PARDER          reduce using rule 68 (expciclo -> MAS r_pila_operadores_push_mas exp .)
    COMA            reduce using rule 68 (expciclo -> MAS r_pila_operadores_push_mas exp .)
    CORDER          reduce using rule 68 (expciclo -> MAS r_pila_operadores_push_mas exp .)
    TO              reduce using rule 68 (expciclo -> MAS r_pila_operadores_push_mas exp .)
    PTOCOM          reduce using rule 68 (expciclo -> MAS r_pila_operadores_push_mas exp .)
    DO              reduce using rule 68 (expciclo -> MAS r_pila_operadores_push_mas exp .)


state 260

    (69) expciclo -> MENOS r_pila_operadores_push_menos exp .

    MAY             reduce using rule 69 (expciclo -> MENOS r_pila_operadores_push_menos exp .)
    MEN             reduce using rule 69 (expciclo -> MENOS r_pila_operadores_push_menos exp .)
    DIF             reduce using rule 69 (expciclo -> MENOS r_pila_operadores_push_menos exp .)
    IGUIGU          reduce using rule 69 (expciclo -> MENOS r_pila_operadores_push_menos exp .)
    AND             reduce using rule 69 (expciclo -> MENOS r_pila_operadores_push_menos exp .)
    OR              reduce using rule 69 (expciclo -> MENOS r_pila_operadores_push_menos exp .)
    MAYIGU          reduce using rule 69 (expciclo -> MENOS r_pila_operadores_push_menos exp .)
    MENIGU          reduce using rule 69 (expciclo -> MENOS r_pila_operadores_push_menos exp .)
    PARDER          reduce using rule 69 (expciclo -> MENOS r_pila_operadores_push_menos exp .)
    COMA            reduce using rule 69 (expciclo -> MENOS r_pila_operadores_push_menos exp .)
    CORDER          reduce using rule 69 (expciclo -> MENOS r_pila_operadores_push_menos exp .)
    TO              reduce using rule 69 (expciclo -> MENOS r_pila_operadores_push_menos exp .)
    PTOCOM          reduce using rule 69 (expciclo -> MENOS r_pila_operadores_push_menos exp .)
    DO              reduce using rule 69 (expciclo -> MENOS r_pila_operadores_push_menos exp .)


state 261

    (72) factorciclo -> MULT r_pila_operadores_push_mult termino .

    MAS             reduce using rule 72 (factorciclo -> MULT r_pila_operadores_push_mult termino .)
    MENOS           reduce using rule 72 (factorciclo -> MULT r_pila_operadores_push_mult termino .)
    MAY             reduce using rule 72 (factorciclo -> MULT r_pila_operadores_push_mult termino .)
    MEN             reduce using rule 72 (factorciclo -> MULT r_pila_operadores_push_mult termino .)
    DIF             reduce using rule 72 (factorciclo -> MULT r_pila_operadores_push_mult termino .)
    IGUIGU          reduce using rule 72 (factorciclo -> MULT r_pila_operadores_push_mult termino .)
    AND             reduce using rule 72 (factorciclo -> MULT r_pila_operadores_push_mult termino .)
    OR              reduce using rule 72 (factorciclo -> MULT r_pila_operadores_push_mult termino .)
    MAYIGU          reduce using rule 72 (factorciclo -> MULT r_pila_operadores_push_mult termino .)
    MENIGU          reduce using rule 72 (factorciclo -> MULT r_pila_operadores_push_mult termino .)
    PARDER          reduce using rule 72 (factorciclo -> MULT r_pila_operadores_push_mult termino .)
    COMA            reduce using rule 72 (factorciclo -> MULT r_pila_operadores_push_mult termino .)
    CORDER          reduce using rule 72 (factorciclo -> MULT r_pila_operadores_push_mult termino .)
    TO              reduce using rule 72 (factorciclo -> MULT r_pila_operadores_push_mult termino .)
    PTOCOM          reduce using rule 72 (factorciclo -> MULT r_pila_operadores_push_mult termino .)
    DO              reduce using rule 72 (factorciclo -> MULT r_pila_operadores_push_mult termino .)


state 262

    (73) factorciclo -> DIV r_pila_operadores_push_div termino .

    MAS             reduce using rule 73 (factorciclo -> DIV r_pila_operadores_push_div termino .)
    MENOS           reduce using rule 73 (factorciclo -> DIV r_pila_operadores_push_div termino .)
    MAY             reduce using rule 73 (factorciclo -> DIV r_pila_operadores_push_div termino .)
    MEN             reduce using rule 73 (factorciclo -> DIV r_pila_operadores_push_div termino .)
    DIF             reduce using rule 73 (factorciclo -> DIV r_pila_operadores_push_div termino .)
    IGUIGU          reduce using rule 73 (factorciclo -> DIV r_pila_operadores_push_div termino .)
    AND             reduce using rule 73 (factorciclo -> DIV r_pila_operadores_push_div termino .)
    OR              reduce using rule 73 (factorciclo -> DIV r_pila_operadores_push_div termino .)
    MAYIGU          reduce using rule 73 (factorciclo -> DIV r_pila_operadores_push_div termino .)
    MENIGU          reduce using rule 73 (factorciclo -> DIV r_pila_operadores_push_div termino .)
    PARDER          reduce using rule 73 (factorciclo -> DIV r_pila_operadores_push_div termino .)
    COMA            reduce using rule 73 (factorciclo -> DIV r_pila_operadores_push_div termino .)
    CORDER          reduce using rule 73 (factorciclo -> DIV r_pila_operadores_push_div termino .)
    TO              reduce using rule 73 (factorciclo -> DIV r_pila_operadores_push_div termino .)
    PTOCOM          reduce using rule 73 (factorciclo -> DIV r_pila_operadores_push_div termino .)
    DO              reduce using rule 73 (factorciclo -> DIV r_pila_operadores_push_div termino .)


state 263

    (77) factor -> ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push .

    MULT            reduce using rule 77 (factor -> ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push .)
    DIV             reduce using rule 77 (factor -> ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push .)
    MAS             reduce using rule 77 (factor -> ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push .)
    MENOS           reduce using rule 77 (factor -> ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push .)
    MAY             reduce using rule 77 (factor -> ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push .)
    MEN             reduce using rule 77 (factor -> ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push .)
    DIF             reduce using rule 77 (factor -> ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push .)
    IGUIGU          reduce using rule 77 (factor -> ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push .)
    AND             reduce using rule 77 (factor -> ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push .)
    OR              reduce using rule 77 (factor -> ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push .)
    MAYIGU          reduce using rule 77 (factor -> ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push .)
    MENIGU          reduce using rule 77 (factor -> ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push .)
    PARDER          reduce using rule 77 (factor -> ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push .)
    COMA            reduce using rule 77 (factor -> ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push .)
    CORDER          reduce using rule 77 (factor -> ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push .)
    TO              reduce using rule 77 (factor -> ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push .)
    PTOCOM          reduce using rule 77 (factor -> ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push .)
    DO              reduce using rule 77 (factor -> ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push .)


state 264

    (81) opcionid -> PARIZQ r_era_funcion_retorno . parametros r_terminar_parametro PARDER
    (86) parametros -> . expresion r_extraer_parametro cicloparametros
    (87) parametros -> . empty
    (55) expresion -> . exp r_pop_comp expresionsig
    (116) empty -> .
    (67) exp -> . termino r_pop_mas expciclo
    (71) termino -> . factor r_pop_mult factorciclo
    (75) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (76) factor -> . masomenos varcte
    (77) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (78) masomenos -> . MAS
    (79) masomenos -> . MENOS
    (80) masomenos -> . empty

  ! shift/reduce conflict for ID resolved as shift
    PARDER          reduce using rule 116 (empty -> .)
    CTEI            reduce using rule 116 (empty -> .)
    CTEF            reduce using rule 116 (empty -> .)
    PARIZQ          shift and go to state 107
    ID              shift and go to state 113
    MAS             shift and go to state 114
    MENOS           shift and go to state 115

  ! ID              [ reduce using rule 116 (empty -> .) ]

    parametros                     shift and go to state 286
    expresion                      shift and go to state 167
    empty                          shift and go to state 168
    exp                            shift and go to state 109
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    masomenos                      shift and go to state 112

state 265

    (82) opcionid -> arrexp arrexp .

    MULT            reduce using rule 82 (opcionid -> arrexp arrexp .)
    DIV             reduce using rule 82 (opcionid -> arrexp arrexp .)
    MAS             reduce using rule 82 (opcionid -> arrexp arrexp .)
    MENOS           reduce using rule 82 (opcionid -> arrexp arrexp .)
    MAY             reduce using rule 82 (opcionid -> arrexp arrexp .)
    MEN             reduce using rule 82 (opcionid -> arrexp arrexp .)
    DIF             reduce using rule 82 (opcionid -> arrexp arrexp .)
    IGUIGU          reduce using rule 82 (opcionid -> arrexp arrexp .)
    AND             reduce using rule 82 (opcionid -> arrexp arrexp .)
    OR              reduce using rule 82 (opcionid -> arrexp arrexp .)
    MAYIGU          reduce using rule 82 (opcionid -> arrexp arrexp .)
    MENIGU          reduce using rule 82 (opcionid -> arrexp arrexp .)
    PARDER          reduce using rule 82 (opcionid -> arrexp arrexp .)
    COMA            reduce using rule 82 (opcionid -> arrexp arrexp .)
    CORDER          reduce using rule 82 (opcionid -> arrexp arrexp .)
    TO              reduce using rule 82 (opcionid -> arrexp arrexp .)
    PTOCOM          reduce using rule 82 (opcionid -> arrexp arrexp .)
    DO              reduce using rule 82 (opcionid -> arrexp arrexp .)


state 266

    (99) lectura -> READ PARIZQ iddim r_genera_lectura ciclodim PARDER PTOCOM .

    ID              reduce using rule 99 (lectura -> READ PARIZQ iddim r_genera_lectura ciclodim PARDER PTOCOM .)
    IF              reduce using rule 99 (lectura -> READ PARIZQ iddim r_genera_lectura ciclodim PARDER PTOCOM .)
    WRITE           reduce using rule 99 (lectura -> READ PARIZQ iddim r_genera_lectura ciclodim PARDER PTOCOM .)
    READ            reduce using rule 99 (lectura -> READ PARIZQ iddim r_genera_lectura ciclodim PARDER PTOCOM .)
    WHILE           reduce using rule 99 (lectura -> READ PARIZQ iddim r_genera_lectura ciclodim PARDER PTOCOM .)
    FOR             reduce using rule 99 (lectura -> READ PARIZQ iddim r_genera_lectura ciclodim PARDER PTOCOM .)
    KEYDER          reduce using rule 99 (lectura -> READ PARIZQ iddim r_genera_lectura ciclodim PARDER PTOCOM .)
    RETURN          reduce using rule 99 (lectura -> READ PARIZQ iddim r_genera_lectura ciclodim PARDER PTOCOM .)


state 267

    (100) ciclodim -> COMA iddim r_genera_lectura . ciclodim
    (100) ciclodim -> . COMA iddim r_genera_lectura ciclodim
    (101) ciclodim -> . empty
    (116) empty -> .

    COMA            shift and go to state 195
    PARDER          reduce using rule 116 (empty -> .)

    ciclodim                       shift and go to state 287
    empty                          shift and go to state 196

state 268

    (107) condicional -> WHILE r_while_paso_1 PARIZQ expresion PARDER r_while_paso_2 DO . bloque r_while_paso_3
    (33) bloque -> . KEYIZQ bloqueopcion KEYDER

    KEYIZQ          shift and go to state 52

    bloque                         shift and go to state 288

state 269

    (108) nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for . expresion r_for_paso_1 DO bloque r_for_paso_2
    (55) expresion -> . exp r_pop_comp expresionsig
    (67) exp -> . termino r_pop_mas expciclo
    (71) termino -> . factor r_pop_mult factorciclo
    (75) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (76) factor -> . masomenos varcte
    (77) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (78) masomenos -> . MAS
    (79) masomenos -> . MENOS
    (80) masomenos -> . empty
    (116) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 107
    ID              shift and go to state 113
    MAS             shift and go to state 114
    MENOS           shift and go to state 115
    CTEI            reduce using rule 116 (empty -> .)
    CTEF            reduce using rule 116 (empty -> .)

  ! ID              [ reduce using rule 116 (empty -> .) ]

    expresion                      shift and go to state 289
    exp                            shift and go to state 109
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    masomenos                      shift and go to state 112
    empty                          shift and go to state 116

state 270

    (103) arrexp -> CORIZQ expresion CORDER .

    CORIZQ          reduce using rule 103 (arrexp -> CORIZQ expresion CORDER .)
    IGU             reduce using rule 103 (arrexp -> CORIZQ expresion CORDER .)
    COMA            reduce using rule 103 (arrexp -> CORIZQ expresion CORDER .)
    PARDER          reduce using rule 103 (arrexp -> CORIZQ expresion CORDER .)
    MULT            reduce using rule 103 (arrexp -> CORIZQ expresion CORDER .)
    DIV             reduce using rule 103 (arrexp -> CORIZQ expresion CORDER .)
    MAS             reduce using rule 103 (arrexp -> CORIZQ expresion CORDER .)
    MENOS           reduce using rule 103 (arrexp -> CORIZQ expresion CORDER .)
    MAY             reduce using rule 103 (arrexp -> CORIZQ expresion CORDER .)
    MEN             reduce using rule 103 (arrexp -> CORIZQ expresion CORDER .)
    DIF             reduce using rule 103 (arrexp -> CORIZQ expresion CORDER .)
    IGUIGU          reduce using rule 103 (arrexp -> CORIZQ expresion CORDER .)
    AND             reduce using rule 103 (arrexp -> CORIZQ expresion CORDER .)
    OR              reduce using rule 103 (arrexp -> CORIZQ expresion CORDER .)
    MAYIGU          reduce using rule 103 (arrexp -> CORIZQ expresion CORDER .)
    MENIGU          reduce using rule 103 (arrexp -> CORIZQ expresion CORDER .)
    CORDER          reduce using rule 103 (arrexp -> CORIZQ expresion CORDER .)
    TO              reduce using rule 103 (arrexp -> CORIZQ expresion CORDER .)
    PTOCOM          reduce using rule 103 (arrexp -> CORIZQ expresion CORDER .)
    DO              reduce using rule 103 (arrexp -> CORIZQ expresion CORDER .)


state 271

    (24) funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad . bloque r_endfunc
    (33) bloque -> . KEYIZQ bloqueopcion KEYDER

    KEYIZQ          shift and go to state 52

    bloque                         shift and go to state 290

state 272

    (29) funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc . r_endfunc r_asegurar_return
    (137) r_endfunc -> .

    VOID            reduce using rule 137 (r_endfunc -> .)
    INT             reduce using rule 137 (r_endfunc -> .)
    FLT             reduce using rule 137 (r_endfunc -> .)
    CHAR            reduce using rule 137 (r_endfunc -> .)
    MAIN            reduce using rule 137 (r_endfunc -> .)

    r_endfunc                      shift and go to state 291

state 273

    (36) bloquefunc -> KEYIZQ . bloqueopcionfunc KEYDER
    (37) bloqueopcionfunc -> . estatutofunc bloqueopcionfunc
    (38) bloqueopcionfunc -> . empty
    (45) estatutofunc -> . asignacion
    (46) estatutofunc -> . decisionfunc
    (47) estatutofunc -> . escritura
    (48) estatutofunc -> . llamadafunc
    (49) estatutofunc -> . repeticionfunc
    (50) estatutofunc -> . lectura
    (51) estatutofunc -> . RETURN PARIZQ expresion r_return_func PARDER PTOCOM
    (116) empty -> .
    (52) asignacion -> . ID r_verifica_variable_existe r_pila_operandos_push_id asignacionarr asignacionarr IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM
    (109) decisionfunc -> . IF PARIZQ expresion PARDER r_if_paso_1 THEN bloquefunc decisionfunc_else r_if_paso_3
    (94) escritura -> . WRITE PARIZQ escrituraciclo otro PARDER PTOCOM
    (90) llamadafunc -> . ID r_verifica_void PARIZQ r_era_funcion_void parametros r_terminar_parametro_void PARDER PTOCOM
    (112) repeticionfunc -> . condicionalfunc
    (113) repeticionfunc -> . nocondicionalfunc
    (99) lectura -> . READ PARIZQ iddim r_genera_lectura ciclodim PARDER PTOCOM
    (114) condicionalfunc -> . WHILE PARIZQ expresion PARDER DO bloquefunc
    (115) nocondicionalfunc -> . FOR iddim IGU expresion TO expresion DO bloquefunc

    RETURN          shift and go to state 301
    KEYDER          reduce using rule 116 (empty -> .)
    ID              shift and go to state 68
    IF              shift and go to state 302
    WRITE           shift and go to state 70
    READ            shift and go to state 73
    WHILE           shift and go to state 305
    FOR             shift and go to state 306

    bloqueopcionfunc               shift and go to state 292
    estatutofunc                   shift and go to state 293
    empty                          shift and go to state 294
    asignacion                     shift and go to state 295
    decisionfunc                   shift and go to state 296
    escritura                      shift and go to state 297
    llamadafunc                    shift and go to state 298
    repeticionfunc                 shift and go to state 299
    lectura                        shift and go to state 300
    condicionalfunc                shift and go to state 303
    nocondicionalfunc              shift and go to state 304

state 274

    (13) opciontipo -> ID r_register_variable_name arr arr varciclo . PTOCOM tipociclo

    PTOCOM          shift and go to state 307


state 275

    (14) opciontipo -> MODULE ID r_update_func_type r_update_curr_function_name_especial PARIZQ . r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return
    (135) r_marcar_funcion -> .

    INT             reduce using rule 135 (r_marcar_funcion -> .)
    FLT             reduce using rule 135 (r_marcar_funcion -> .)
    CHAR            reduce using rule 135 (r_marcar_funcion -> .)
    PARDER          reduce using rule 135 (r_marcar_funcion -> .)

    r_marcar_funcion               shift and go to state 308

state 276

    (52) asignacion -> ID r_verifica_variable_existe r_pila_operandos_push_id asignacionarr asignacionarr IGU r_pila_operadores_push_igu expresion . r_pop_igu PTOCOM
    (161) r_pop_igu -> .

    PTOCOM          reduce using rule 161 (r_pop_igu -> .)

    r_pop_igu                      shift and go to state 309

state 277

    (90) llamadafunc -> ID r_verifica_void PARIZQ r_era_funcion_void parametros r_terminar_parametro_void PARDER PTOCOM .

    ID              reduce using rule 90 (llamadafunc -> ID r_verifica_void PARIZQ r_era_funcion_void parametros r_terminar_parametro_void PARDER PTOCOM .)
    IF              reduce using rule 90 (llamadafunc -> ID r_verifica_void PARIZQ r_era_funcion_void parametros r_terminar_parametro_void PARDER PTOCOM .)
    WRITE           reduce using rule 90 (llamadafunc -> ID r_verifica_void PARIZQ r_era_funcion_void parametros r_terminar_parametro_void PARDER PTOCOM .)
    READ            reduce using rule 90 (llamadafunc -> ID r_verifica_void PARIZQ r_era_funcion_void parametros r_terminar_parametro_void PARDER PTOCOM .)
    WHILE           reduce using rule 90 (llamadafunc -> ID r_verifica_void PARIZQ r_era_funcion_void parametros r_terminar_parametro_void PARDER PTOCOM .)
    FOR             reduce using rule 90 (llamadafunc -> ID r_verifica_void PARIZQ r_era_funcion_void parametros r_terminar_parametro_void PARDER PTOCOM .)
    KEYDER          reduce using rule 90 (llamadafunc -> ID r_verifica_void PARIZQ r_era_funcion_void parametros r_terminar_parametro_void PARDER PTOCOM .)
    RETURN          reduce using rule 90 (llamadafunc -> ID r_verifica_void PARIZQ r_era_funcion_void parametros r_terminar_parametro_void PARDER PTOCOM .)


state 278

    (88) cicloparametros -> COMA expresion . r_extraer_parametro cicloparametros
    (133) r_extraer_parametro -> .

    COMA            reduce using rule 133 (r_extraer_parametro -> .)
    PARDER          reduce using rule 133 (r_extraer_parametro -> .)

    r_extraer_parametro            shift and go to state 310

state 279

    (91) decision -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloque decision_else . r_if_paso_3
    (143) r_if_paso_3 -> .

    ID              reduce using rule 143 (r_if_paso_3 -> .)
    IF              reduce using rule 143 (r_if_paso_3 -> .)
    WRITE           reduce using rule 143 (r_if_paso_3 -> .)
    READ            reduce using rule 143 (r_if_paso_3 -> .)
    WHILE           reduce using rule 143 (r_if_paso_3 -> .)
    FOR             reduce using rule 143 (r_if_paso_3 -> .)
    KEYDER          reduce using rule 143 (r_if_paso_3 -> .)

    r_if_paso_3                    shift and go to state 311

state 280

    (92) decision_else -> ELSE . r_if_paso_2 bloque
    (142) r_if_paso_2 -> .

    KEYIZQ          reduce using rule 142 (r_if_paso_2 -> .)

    r_if_paso_2                    shift and go to state 312

state 281

    (93) decision_else -> empty .

    ID              reduce using rule 93 (decision_else -> empty .)
    IF              reduce using rule 93 (decision_else -> empty .)
    WRITE           reduce using rule 93 (decision_else -> empty .)
    READ            reduce using rule 93 (decision_else -> empty .)
    WHILE           reduce using rule 93 (decision_else -> empty .)
    FOR             reduce using rule 93 (decision_else -> empty .)
    KEYDER          reduce using rule 93 (decision_else -> empty .)


state 282

    (56) expresionsig -> MAY r_pila_operadores_push_may expresionsigequal expresion .

    PARDER          reduce using rule 56 (expresionsig -> MAY r_pila_operadores_push_may expresionsigequal expresion .)
    COMA            reduce using rule 56 (expresionsig -> MAY r_pila_operadores_push_may expresionsigequal expresion .)
    CORDER          reduce using rule 56 (expresionsig -> MAY r_pila_operadores_push_may expresionsigequal expresion .)
    TO              reduce using rule 56 (expresionsig -> MAY r_pila_operadores_push_may expresionsigequal expresion .)
    PTOCOM          reduce using rule 56 (expresionsig -> MAY r_pila_operadores_push_may expresionsigequal expresion .)
    DO              reduce using rule 56 (expresionsig -> MAY r_pila_operadores_push_may expresionsigequal expresion .)


state 283

    (57) expresionsig -> MEN r_pila_operadores_push_men expresionsigequal expresion .

    PARDER          reduce using rule 57 (expresionsig -> MEN r_pila_operadores_push_men expresionsigequal expresion .)
    COMA            reduce using rule 57 (expresionsig -> MEN r_pila_operadores_push_men expresionsigequal expresion .)
    CORDER          reduce using rule 57 (expresionsig -> MEN r_pila_operadores_push_men expresionsigequal expresion .)
    TO              reduce using rule 57 (expresionsig -> MEN r_pila_operadores_push_men expresionsigequal expresion .)
    PTOCOM          reduce using rule 57 (expresionsig -> MEN r_pila_operadores_push_men expresionsigequal expresion .)
    DO              reduce using rule 57 (expresionsig -> MEN r_pila_operadores_push_men expresionsigequal expresion .)


state 284

    (62) expresionsig -> MAYIGU r_pila_operadores_push_mayigu expresionsigequal expresion .

    PARDER          reduce using rule 62 (expresionsig -> MAYIGU r_pila_operadores_push_mayigu expresionsigequal expresion .)
    COMA            reduce using rule 62 (expresionsig -> MAYIGU r_pila_operadores_push_mayigu expresionsigequal expresion .)
    CORDER          reduce using rule 62 (expresionsig -> MAYIGU r_pila_operadores_push_mayigu expresionsigequal expresion .)
    TO              reduce using rule 62 (expresionsig -> MAYIGU r_pila_operadores_push_mayigu expresionsigequal expresion .)
    PTOCOM          reduce using rule 62 (expresionsig -> MAYIGU r_pila_operadores_push_mayigu expresionsigequal expresion .)
    DO              reduce using rule 62 (expresionsig -> MAYIGU r_pila_operadores_push_mayigu expresionsigequal expresion .)


state 285

    (63) expresionsig -> MENIGU r_pila_operadores_push_menigu expresionsigequal expresion .

    PARDER          reduce using rule 63 (expresionsig -> MENIGU r_pila_operadores_push_menigu expresionsigequal expresion .)
    COMA            reduce using rule 63 (expresionsig -> MENIGU r_pila_operadores_push_menigu expresionsigequal expresion .)
    CORDER          reduce using rule 63 (expresionsig -> MENIGU r_pila_operadores_push_menigu expresionsigequal expresion .)
    TO              reduce using rule 63 (expresionsig -> MENIGU r_pila_operadores_push_menigu expresionsigequal expresion .)
    PTOCOM          reduce using rule 63 (expresionsig -> MENIGU r_pila_operadores_push_menigu expresionsigequal expresion .)
    DO              reduce using rule 63 (expresionsig -> MENIGU r_pila_operadores_push_menigu expresionsigequal expresion .)


state 286

    (81) opcionid -> PARIZQ r_era_funcion_retorno parametros . r_terminar_parametro PARDER
    (131) r_terminar_parametro -> .

    PARDER          reduce using rule 131 (r_terminar_parametro -> .)

    r_terminar_parametro           shift and go to state 313

state 287

    (100) ciclodim -> COMA iddim r_genera_lectura ciclodim .

    PARDER          reduce using rule 100 (ciclodim -> COMA iddim r_genera_lectura ciclodim .)


state 288

    (107) condicional -> WHILE r_while_paso_1 PARIZQ expresion PARDER r_while_paso_2 DO bloque . r_while_paso_3
    (146) r_while_paso_3 -> .

    ID              reduce using rule 146 (r_while_paso_3 -> .)
    IF              reduce using rule 146 (r_while_paso_3 -> .)
    WRITE           reduce using rule 146 (r_while_paso_3 -> .)
    READ            reduce using rule 146 (r_while_paso_3 -> .)
    WHILE           reduce using rule 146 (r_while_paso_3 -> .)
    FOR             reduce using rule 146 (r_while_paso_3 -> .)
    KEYDER          reduce using rule 146 (r_while_paso_3 -> .)

    r_while_paso_3                 shift and go to state 314

state 289

    (108) nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion . r_for_paso_1 DO bloque r_for_paso_2
    (148) r_for_paso_1 -> .

    DO              reduce using rule 148 (r_for_paso_1 -> .)

    r_for_paso_1                   shift and go to state 315

state 290

    (24) funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloque . r_endfunc
    (137) r_endfunc -> .

    VOID            reduce using rule 137 (r_endfunc -> .)
    INT             reduce using rule 137 (r_endfunc -> .)
    FLT             reduce using rule 137 (r_endfunc -> .)
    CHAR            reduce using rule 137 (r_endfunc -> .)
    MAIN            reduce using rule 137 (r_endfunc -> .)

    r_endfunc                      shift and go to state 316

state 291

    (29) funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc . r_asegurar_return
    (130) r_asegurar_return -> .

    VOID            reduce using rule 130 (r_asegurar_return -> .)
    INT             reduce using rule 130 (r_asegurar_return -> .)
    FLT             reduce using rule 130 (r_asegurar_return -> .)
    CHAR            reduce using rule 130 (r_asegurar_return -> .)
    MAIN            reduce using rule 130 (r_asegurar_return -> .)

    r_asegurar_return              shift and go to state 317

state 292

    (36) bloquefunc -> KEYIZQ bloqueopcionfunc . KEYDER

    KEYDER          shift and go to state 318


state 293

    (37) bloqueopcionfunc -> estatutofunc . bloqueopcionfunc
    (37) bloqueopcionfunc -> . estatutofunc bloqueopcionfunc
    (38) bloqueopcionfunc -> . empty
    (45) estatutofunc -> . asignacion
    (46) estatutofunc -> . decisionfunc
    (47) estatutofunc -> . escritura
    (48) estatutofunc -> . llamadafunc
    (49) estatutofunc -> . repeticionfunc
    (50) estatutofunc -> . lectura
    (51) estatutofunc -> . RETURN PARIZQ expresion r_return_func PARDER PTOCOM
    (116) empty -> .
    (52) asignacion -> . ID r_verifica_variable_existe r_pila_operandos_push_id asignacionarr asignacionarr IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM
    (109) decisionfunc -> . IF PARIZQ expresion PARDER r_if_paso_1 THEN bloquefunc decisionfunc_else r_if_paso_3
    (94) escritura -> . WRITE PARIZQ escrituraciclo otro PARDER PTOCOM
    (90) llamadafunc -> . ID r_verifica_void PARIZQ r_era_funcion_void parametros r_terminar_parametro_void PARDER PTOCOM
    (112) repeticionfunc -> . condicionalfunc
    (113) repeticionfunc -> . nocondicionalfunc
    (99) lectura -> . READ PARIZQ iddim r_genera_lectura ciclodim PARDER PTOCOM
    (114) condicionalfunc -> . WHILE PARIZQ expresion PARDER DO bloquefunc
    (115) nocondicionalfunc -> . FOR iddim IGU expresion TO expresion DO bloquefunc

    RETURN          shift and go to state 301
    KEYDER          reduce using rule 116 (empty -> .)
    ID              shift and go to state 68
    IF              shift and go to state 302
    WRITE           shift and go to state 70
    READ            shift and go to state 73
    WHILE           shift and go to state 305
    FOR             shift and go to state 306

    estatutofunc                   shift and go to state 293
    bloqueopcionfunc               shift and go to state 319
    empty                          shift and go to state 294
    asignacion                     shift and go to state 295
    decisionfunc                   shift and go to state 296
    escritura                      shift and go to state 297
    llamadafunc                    shift and go to state 298
    repeticionfunc                 shift and go to state 299
    lectura                        shift and go to state 300
    condicionalfunc                shift and go to state 303
    nocondicionalfunc              shift and go to state 304

state 294

    (38) bloqueopcionfunc -> empty .

    KEYDER          reduce using rule 38 (bloqueopcionfunc -> empty .)


state 295

    (45) estatutofunc -> asignacion .

    RETURN          reduce using rule 45 (estatutofunc -> asignacion .)
    ID              reduce using rule 45 (estatutofunc -> asignacion .)
    IF              reduce using rule 45 (estatutofunc -> asignacion .)
    WRITE           reduce using rule 45 (estatutofunc -> asignacion .)
    READ            reduce using rule 45 (estatutofunc -> asignacion .)
    WHILE           reduce using rule 45 (estatutofunc -> asignacion .)
    FOR             reduce using rule 45 (estatutofunc -> asignacion .)
    KEYDER          reduce using rule 45 (estatutofunc -> asignacion .)


state 296

    (46) estatutofunc -> decisionfunc .

    RETURN          reduce using rule 46 (estatutofunc -> decisionfunc .)
    ID              reduce using rule 46 (estatutofunc -> decisionfunc .)
    IF              reduce using rule 46 (estatutofunc -> decisionfunc .)
    WRITE           reduce using rule 46 (estatutofunc -> decisionfunc .)
    READ            reduce using rule 46 (estatutofunc -> decisionfunc .)
    WHILE           reduce using rule 46 (estatutofunc -> decisionfunc .)
    FOR             reduce using rule 46 (estatutofunc -> decisionfunc .)
    KEYDER          reduce using rule 46 (estatutofunc -> decisionfunc .)


state 297

    (47) estatutofunc -> escritura .

    RETURN          reduce using rule 47 (estatutofunc -> escritura .)
    ID              reduce using rule 47 (estatutofunc -> escritura .)
    IF              reduce using rule 47 (estatutofunc -> escritura .)
    WRITE           reduce using rule 47 (estatutofunc -> escritura .)
    READ            reduce using rule 47 (estatutofunc -> escritura .)
    WHILE           reduce using rule 47 (estatutofunc -> escritura .)
    FOR             reduce using rule 47 (estatutofunc -> escritura .)
    KEYDER          reduce using rule 47 (estatutofunc -> escritura .)


state 298

    (48) estatutofunc -> llamadafunc .

    RETURN          reduce using rule 48 (estatutofunc -> llamadafunc .)
    ID              reduce using rule 48 (estatutofunc -> llamadafunc .)
    IF              reduce using rule 48 (estatutofunc -> llamadafunc .)
    WRITE           reduce using rule 48 (estatutofunc -> llamadafunc .)
    READ            reduce using rule 48 (estatutofunc -> llamadafunc .)
    WHILE           reduce using rule 48 (estatutofunc -> llamadafunc .)
    FOR             reduce using rule 48 (estatutofunc -> llamadafunc .)
    KEYDER          reduce using rule 48 (estatutofunc -> llamadafunc .)


state 299

    (49) estatutofunc -> repeticionfunc .

    RETURN          reduce using rule 49 (estatutofunc -> repeticionfunc .)
    ID              reduce using rule 49 (estatutofunc -> repeticionfunc .)
    IF              reduce using rule 49 (estatutofunc -> repeticionfunc .)
    WRITE           reduce using rule 49 (estatutofunc -> repeticionfunc .)
    READ            reduce using rule 49 (estatutofunc -> repeticionfunc .)
    WHILE           reduce using rule 49 (estatutofunc -> repeticionfunc .)
    FOR             reduce using rule 49 (estatutofunc -> repeticionfunc .)
    KEYDER          reduce using rule 49 (estatutofunc -> repeticionfunc .)


state 300

    (50) estatutofunc -> lectura .

    RETURN          reduce using rule 50 (estatutofunc -> lectura .)
    ID              reduce using rule 50 (estatutofunc -> lectura .)
    IF              reduce using rule 50 (estatutofunc -> lectura .)
    WRITE           reduce using rule 50 (estatutofunc -> lectura .)
    READ            reduce using rule 50 (estatutofunc -> lectura .)
    WHILE           reduce using rule 50 (estatutofunc -> lectura .)
    FOR             reduce using rule 50 (estatutofunc -> lectura .)
    KEYDER          reduce using rule 50 (estatutofunc -> lectura .)


state 301

    (51) estatutofunc -> RETURN . PARIZQ expresion r_return_func PARDER PTOCOM

    PARIZQ          shift and go to state 320


state 302

    (109) decisionfunc -> IF . PARIZQ expresion PARDER r_if_paso_1 THEN bloquefunc decisionfunc_else r_if_paso_3

    PARIZQ          shift and go to state 321


state 303

    (112) repeticionfunc -> condicionalfunc .

    RETURN          reduce using rule 112 (repeticionfunc -> condicionalfunc .)
    ID              reduce using rule 112 (repeticionfunc -> condicionalfunc .)
    IF              reduce using rule 112 (repeticionfunc -> condicionalfunc .)
    WRITE           reduce using rule 112 (repeticionfunc -> condicionalfunc .)
    READ            reduce using rule 112 (repeticionfunc -> condicionalfunc .)
    WHILE           reduce using rule 112 (repeticionfunc -> condicionalfunc .)
    FOR             reduce using rule 112 (repeticionfunc -> condicionalfunc .)
    KEYDER          reduce using rule 112 (repeticionfunc -> condicionalfunc .)


state 304

    (113) repeticionfunc -> nocondicionalfunc .

    RETURN          reduce using rule 113 (repeticionfunc -> nocondicionalfunc .)
    ID              reduce using rule 113 (repeticionfunc -> nocondicionalfunc .)
    IF              reduce using rule 113 (repeticionfunc -> nocondicionalfunc .)
    WRITE           reduce using rule 113 (repeticionfunc -> nocondicionalfunc .)
    READ            reduce using rule 113 (repeticionfunc -> nocondicionalfunc .)
    WHILE           reduce using rule 113 (repeticionfunc -> nocondicionalfunc .)
    FOR             reduce using rule 113 (repeticionfunc -> nocondicionalfunc .)
    KEYDER          reduce using rule 113 (repeticionfunc -> nocondicionalfunc .)


state 305

    (114) condicionalfunc -> WHILE . PARIZQ expresion PARDER DO bloquefunc

    PARIZQ          shift and go to state 322


state 306

    (115) nocondicionalfunc -> FOR . iddim IGU expresion TO expresion DO bloquefunc
    (102) iddim -> . ID r_verifica_variable_existe r_pila_operandos_push_id arrexp arrexp

    ID              shift and go to state 93

    iddim                          shift and go to state 323

state 307

    (13) opciontipo -> ID r_register_variable_name arr arr varciclo PTOCOM . tipociclo
    (11) tipociclo -> . tipo opciontipo
    (12) tipociclo -> . empty
    (15) tipo -> . INT r_register_variable_type
    (16) tipo -> . FLT r_register_variable_type
    (17) tipo -> . CHAR r_register_variable_type
    (116) empty -> .

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    INT             shift and go to state 22
    FLT             shift and go to state 23
    CHAR            shift and go to state 24
    VOID            reduce using rule 116 (empty -> .)
    MAIN            reduce using rule 116 (empty -> .)
    KEYIZQ          reduce using rule 116 (empty -> .)

  ! INT             [ reduce using rule 116 (empty -> .) ]
  ! FLT             [ reduce using rule 116 (empty -> .) ]
  ! CHAR            [ reduce using rule 116 (empty -> .) ]

    tipociclo                      shift and go to state 324
    tipo                           shift and go to state 101
    empty                          shift and go to state 103

state 308

    (14) opciontipo -> MODULE ID r_update_func_type r_update_curr_function_name_especial PARIZQ r_marcar_funcion . opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return
    (25) opcionvarsimple -> . varsimple ciclovarsimple
    (26) opcionvarsimple -> . empty
    (21) varsimple -> . tipo ident
    (116) empty -> .
    (15) tipo -> . INT r_register_variable_type
    (16) tipo -> . FLT r_register_variable_type
    (17) tipo -> . CHAR r_register_variable_type

    PARDER          reduce using rule 116 (empty -> .)
    INT             shift and go to state 22
    FLT             shift and go to state 23
    CHAR            shift and go to state 24

    opcionvarsimple                shift and go to state 325
    varsimple                      shift and go to state 78
    empty                          shift and go to state 79
    tipo                           shift and go to state 80

state 309

    (52) asignacion -> ID r_verifica_variable_existe r_pila_operandos_push_id asignacionarr asignacionarr IGU r_pila_operadores_push_igu expresion r_pop_igu . PTOCOM

    PTOCOM          shift and go to state 326


state 310

    (88) cicloparametros -> COMA expresion r_extraer_parametro . cicloparametros
    (88) cicloparametros -> . COMA expresion r_extraer_parametro cicloparametros
    (89) cicloparametros -> . empty
    (116) empty -> .

    COMA            shift and go to state 245
    PARDER          reduce using rule 116 (empty -> .)

    cicloparametros                shift and go to state 327
    empty                          shift and go to state 246

state 311

    (91) decision -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloque decision_else r_if_paso_3 .

    ID              reduce using rule 91 (decision -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloque decision_else r_if_paso_3 .)
    IF              reduce using rule 91 (decision -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloque decision_else r_if_paso_3 .)
    WRITE           reduce using rule 91 (decision -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloque decision_else r_if_paso_3 .)
    READ            reduce using rule 91 (decision -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloque decision_else r_if_paso_3 .)
    WHILE           reduce using rule 91 (decision -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloque decision_else r_if_paso_3 .)
    FOR             reduce using rule 91 (decision -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloque decision_else r_if_paso_3 .)
    KEYDER          reduce using rule 91 (decision -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloque decision_else r_if_paso_3 .)


state 312

    (92) decision_else -> ELSE r_if_paso_2 . bloque
    (33) bloque -> . KEYIZQ bloqueopcion KEYDER

    KEYIZQ          shift and go to state 52

    bloque                         shift and go to state 328

state 313

    (81) opcionid -> PARIZQ r_era_funcion_retorno parametros r_terminar_parametro . PARDER

    PARDER          shift and go to state 329


state 314

    (107) condicional -> WHILE r_while_paso_1 PARIZQ expresion PARDER r_while_paso_2 DO bloque r_while_paso_3 .

    ID              reduce using rule 107 (condicional -> WHILE r_while_paso_1 PARIZQ expresion PARDER r_while_paso_2 DO bloque r_while_paso_3 .)
    IF              reduce using rule 107 (condicional -> WHILE r_while_paso_1 PARIZQ expresion PARDER r_while_paso_2 DO bloque r_while_paso_3 .)
    WRITE           reduce using rule 107 (condicional -> WHILE r_while_paso_1 PARIZQ expresion PARDER r_while_paso_2 DO bloque r_while_paso_3 .)
    READ            reduce using rule 107 (condicional -> WHILE r_while_paso_1 PARIZQ expresion PARDER r_while_paso_2 DO bloque r_while_paso_3 .)
    WHILE           reduce using rule 107 (condicional -> WHILE r_while_paso_1 PARIZQ expresion PARDER r_while_paso_2 DO bloque r_while_paso_3 .)
    FOR             reduce using rule 107 (condicional -> WHILE r_while_paso_1 PARIZQ expresion PARDER r_while_paso_2 DO bloque r_while_paso_3 .)
    KEYDER          reduce using rule 107 (condicional -> WHILE r_while_paso_1 PARIZQ expresion PARDER r_while_paso_2 DO bloque r_while_paso_3 .)


state 315

    (108) nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 . DO bloque r_for_paso_2

    DO              shift and go to state 330


state 316

    (24) funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloque r_endfunc .

    VOID            reduce using rule 24 (funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloque r_endfunc .)
    INT             reduce using rule 24 (funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloque r_endfunc .)
    FLT             reduce using rule 24 (funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloque r_endfunc .)
    CHAR            reduce using rule 24 (funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloque r_endfunc .)
    MAIN            reduce using rule 24 (funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloque r_endfunc .)


state 317

    (29) funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return .

    VOID            reduce using rule 29 (funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return .)
    INT             reduce using rule 29 (funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return .)
    FLT             reduce using rule 29 (funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return .)
    CHAR            reduce using rule 29 (funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return .)
    MAIN            reduce using rule 29 (funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return .)


state 318

    (36) bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .

    VOID            reduce using rule 36 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    INT             reduce using rule 36 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    FLT             reduce using rule 36 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    CHAR            reduce using rule 36 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    MAIN            reduce using rule 36 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    RETURN          reduce using rule 36 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    ID              reduce using rule 36 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    IF              reduce using rule 36 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    WRITE           reduce using rule 36 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    READ            reduce using rule 36 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    WHILE           reduce using rule 36 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    FOR             reduce using rule 36 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    KEYDER          reduce using rule 36 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    ELSE            reduce using rule 36 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    KEYIZQ          reduce using rule 36 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)


state 319

    (37) bloqueopcionfunc -> estatutofunc bloqueopcionfunc .

    KEYDER          reduce using rule 37 (bloqueopcionfunc -> estatutofunc bloqueopcionfunc .)


state 320

    (51) estatutofunc -> RETURN PARIZQ . expresion r_return_func PARDER PTOCOM
    (55) expresion -> . exp r_pop_comp expresionsig
    (67) exp -> . termino r_pop_mas expciclo
    (71) termino -> . factor r_pop_mult factorciclo
    (75) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (76) factor -> . masomenos varcte
    (77) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (78) masomenos -> . MAS
    (79) masomenos -> . MENOS
    (80) masomenos -> . empty
    (116) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 107
    ID              shift and go to state 113
    MAS             shift and go to state 114
    MENOS           shift and go to state 115
    CTEI            reduce using rule 116 (empty -> .)
    CTEF            reduce using rule 116 (empty -> .)

  ! ID              [ reduce using rule 116 (empty -> .) ]

    expresion                      shift and go to state 331
    exp                            shift and go to state 109
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    masomenos                      shift and go to state 112
    empty                          shift and go to state 116

state 321

    (109) decisionfunc -> IF PARIZQ . expresion PARDER r_if_paso_1 THEN bloquefunc decisionfunc_else r_if_paso_3
    (55) expresion -> . exp r_pop_comp expresionsig
    (67) exp -> . termino r_pop_mas expciclo
    (71) termino -> . factor r_pop_mult factorciclo
    (75) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (76) factor -> . masomenos varcte
    (77) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (78) masomenos -> . MAS
    (79) masomenos -> . MENOS
    (80) masomenos -> . empty
    (116) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 107
    ID              shift and go to state 113
    MAS             shift and go to state 114
    MENOS           shift and go to state 115
    CTEI            reduce using rule 116 (empty -> .)
    CTEF            reduce using rule 116 (empty -> .)

  ! ID              [ reduce using rule 116 (empty -> .) ]

    expresion                      shift and go to state 332
    exp                            shift and go to state 109
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    masomenos                      shift and go to state 112
    empty                          shift and go to state 116

state 322

    (114) condicionalfunc -> WHILE PARIZQ . expresion PARDER DO bloquefunc
    (55) expresion -> . exp r_pop_comp expresionsig
    (67) exp -> . termino r_pop_mas expciclo
    (71) termino -> . factor r_pop_mult factorciclo
    (75) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (76) factor -> . masomenos varcte
    (77) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (78) masomenos -> . MAS
    (79) masomenos -> . MENOS
    (80) masomenos -> . empty
    (116) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 107
    ID              shift and go to state 113
    MAS             shift and go to state 114
    MENOS           shift and go to state 115
    CTEI            reduce using rule 116 (empty -> .)
    CTEF            reduce using rule 116 (empty -> .)

  ! ID              [ reduce using rule 116 (empty -> .) ]

    expresion                      shift and go to state 333
    exp                            shift and go to state 109
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    masomenos                      shift and go to state 112
    empty                          shift and go to state 116

state 323

    (115) nocondicionalfunc -> FOR iddim . IGU expresion TO expresion DO bloquefunc

    IGU             shift and go to state 334


state 324

    (13) opciontipo -> ID r_register_variable_name arr arr varciclo PTOCOM tipociclo .

    VOID            reduce using rule 13 (opciontipo -> ID r_register_variable_name arr arr varciclo PTOCOM tipociclo .)
    INT             reduce using rule 13 (opciontipo -> ID r_register_variable_name arr arr varciclo PTOCOM tipociclo .)
    FLT             reduce using rule 13 (opciontipo -> ID r_register_variable_name arr arr varciclo PTOCOM tipociclo .)
    CHAR            reduce using rule 13 (opciontipo -> ID r_register_variable_name arr arr varciclo PTOCOM tipociclo .)
    MAIN            reduce using rule 13 (opciontipo -> ID r_register_variable_name arr arr varciclo PTOCOM tipociclo .)
    KEYIZQ          reduce using rule 13 (opciontipo -> ID r_register_variable_name arr arr varciclo PTOCOM tipociclo .)


state 325

    (14) opciontipo -> MODULE ID r_update_func_type r_update_curr_function_name_especial PARIZQ r_marcar_funcion opcionvarsimple . r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return
    (136) r_desmarcar_funcion -> .

    PARDER          reduce using rule 136 (r_desmarcar_funcion -> .)

    r_desmarcar_funcion            shift and go to state 335

state 326

    (52) asignacion -> ID r_verifica_variable_existe r_pila_operandos_push_id asignacionarr asignacionarr IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM .

    ID              reduce using rule 52 (asignacion -> ID r_verifica_variable_existe r_pila_operandos_push_id asignacionarr asignacionarr IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM .)
    IF              reduce using rule 52 (asignacion -> ID r_verifica_variable_existe r_pila_operandos_push_id asignacionarr asignacionarr IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM .)
    WRITE           reduce using rule 52 (asignacion -> ID r_verifica_variable_existe r_pila_operandos_push_id asignacionarr asignacionarr IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM .)
    READ            reduce using rule 52 (asignacion -> ID r_verifica_variable_existe r_pila_operandos_push_id asignacionarr asignacionarr IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM .)
    WHILE           reduce using rule 52 (asignacion -> ID r_verifica_variable_existe r_pila_operandos_push_id asignacionarr asignacionarr IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM .)
    FOR             reduce using rule 52 (asignacion -> ID r_verifica_variable_existe r_pila_operandos_push_id asignacionarr asignacionarr IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM .)
    KEYDER          reduce using rule 52 (asignacion -> ID r_verifica_variable_existe r_pila_operandos_push_id asignacionarr asignacionarr IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM .)
    RETURN          reduce using rule 52 (asignacion -> ID r_verifica_variable_existe r_pila_operandos_push_id asignacionarr asignacionarr IGU r_pila_operadores_push_igu expresion r_pop_igu PTOCOM .)


state 327

    (88) cicloparametros -> COMA expresion r_extraer_parametro cicloparametros .

    PARDER          reduce using rule 88 (cicloparametros -> COMA expresion r_extraer_parametro cicloparametros .)


state 328

    (92) decision_else -> ELSE r_if_paso_2 bloque .

    ID              reduce using rule 92 (decision_else -> ELSE r_if_paso_2 bloque .)
    IF              reduce using rule 92 (decision_else -> ELSE r_if_paso_2 bloque .)
    WRITE           reduce using rule 92 (decision_else -> ELSE r_if_paso_2 bloque .)
    READ            reduce using rule 92 (decision_else -> ELSE r_if_paso_2 bloque .)
    WHILE           reduce using rule 92 (decision_else -> ELSE r_if_paso_2 bloque .)
    FOR             reduce using rule 92 (decision_else -> ELSE r_if_paso_2 bloque .)
    KEYDER          reduce using rule 92 (decision_else -> ELSE r_if_paso_2 bloque .)


state 329

    (81) opcionid -> PARIZQ r_era_funcion_retorno parametros r_terminar_parametro PARDER .

    MULT            reduce using rule 81 (opcionid -> PARIZQ r_era_funcion_retorno parametros r_terminar_parametro PARDER .)
    DIV             reduce using rule 81 (opcionid -> PARIZQ r_era_funcion_retorno parametros r_terminar_parametro PARDER .)
    MAS             reduce using rule 81 (opcionid -> PARIZQ r_era_funcion_retorno parametros r_terminar_parametro PARDER .)
    MENOS           reduce using rule 81 (opcionid -> PARIZQ r_era_funcion_retorno parametros r_terminar_parametro PARDER .)
    MAY             reduce using rule 81 (opcionid -> PARIZQ r_era_funcion_retorno parametros r_terminar_parametro PARDER .)
    MEN             reduce using rule 81 (opcionid -> PARIZQ r_era_funcion_retorno parametros r_terminar_parametro PARDER .)
    DIF             reduce using rule 81 (opcionid -> PARIZQ r_era_funcion_retorno parametros r_terminar_parametro PARDER .)
    IGUIGU          reduce using rule 81 (opcionid -> PARIZQ r_era_funcion_retorno parametros r_terminar_parametro PARDER .)
    AND             reduce using rule 81 (opcionid -> PARIZQ r_era_funcion_retorno parametros r_terminar_parametro PARDER .)
    OR              reduce using rule 81 (opcionid -> PARIZQ r_era_funcion_retorno parametros r_terminar_parametro PARDER .)
    MAYIGU          reduce using rule 81 (opcionid -> PARIZQ r_era_funcion_retorno parametros r_terminar_parametro PARDER .)
    MENIGU          reduce using rule 81 (opcionid -> PARIZQ r_era_funcion_retorno parametros r_terminar_parametro PARDER .)
    PARDER          reduce using rule 81 (opcionid -> PARIZQ r_era_funcion_retorno parametros r_terminar_parametro PARDER .)
    COMA            reduce using rule 81 (opcionid -> PARIZQ r_era_funcion_retorno parametros r_terminar_parametro PARDER .)
    CORDER          reduce using rule 81 (opcionid -> PARIZQ r_era_funcion_retorno parametros r_terminar_parametro PARDER .)
    TO              reduce using rule 81 (opcionid -> PARIZQ r_era_funcion_retorno parametros r_terminar_parametro PARDER .)
    PTOCOM          reduce using rule 81 (opcionid -> PARIZQ r_era_funcion_retorno parametros r_terminar_parametro PARDER .)
    DO              reduce using rule 81 (opcionid -> PARIZQ r_era_funcion_retorno parametros r_terminar_parametro PARDER .)


state 330

    (108) nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO . bloque r_for_paso_2
    (33) bloque -> . KEYIZQ bloqueopcion KEYDER

    KEYIZQ          shift and go to state 52

    bloque                         shift and go to state 336

state 331

    (51) estatutofunc -> RETURN PARIZQ expresion . r_return_func PARDER PTOCOM
    (141) r_return_func -> .

    PARDER          reduce using rule 141 (r_return_func -> .)

    r_return_func                  shift and go to state 337

state 332

    (109) decisionfunc -> IF PARIZQ expresion . PARDER r_if_paso_1 THEN bloquefunc decisionfunc_else r_if_paso_3

    PARDER          shift and go to state 338


state 333

    (114) condicionalfunc -> WHILE PARIZQ expresion . PARDER DO bloquefunc

    PARDER          shift and go to state 339


state 334

    (115) nocondicionalfunc -> FOR iddim IGU . expresion TO expresion DO bloquefunc
    (55) expresion -> . exp r_pop_comp expresionsig
    (67) exp -> . termino r_pop_mas expciclo
    (71) termino -> . factor r_pop_mult factorciclo
    (75) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (76) factor -> . masomenos varcte
    (77) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (78) masomenos -> . MAS
    (79) masomenos -> . MENOS
    (80) masomenos -> . empty
    (116) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 107
    ID              shift and go to state 113
    MAS             shift and go to state 114
    MENOS           shift and go to state 115
    CTEI            reduce using rule 116 (empty -> .)
    CTEF            reduce using rule 116 (empty -> .)

  ! ID              [ reduce using rule 116 (empty -> .) ]

    expresion                      shift and go to state 340
    exp                            shift and go to state 109
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    masomenos                      shift and go to state 112
    empty                          shift and go to state 116

state 335

    (14) opciontipo -> MODULE ID r_update_func_type r_update_curr_function_name_especial PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion . PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return

    PARDER          shift and go to state 341


state 336

    (108) nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque . r_for_paso_2
    (149) r_for_paso_2 -> .

    ID              reduce using rule 149 (r_for_paso_2 -> .)
    IF              reduce using rule 149 (r_for_paso_2 -> .)
    WRITE           reduce using rule 149 (r_for_paso_2 -> .)
    READ            reduce using rule 149 (r_for_paso_2 -> .)
    WHILE           reduce using rule 149 (r_for_paso_2 -> .)
    FOR             reduce using rule 149 (r_for_paso_2 -> .)
    KEYDER          reduce using rule 149 (r_for_paso_2 -> .)

    r_for_paso_2                   shift and go to state 342

state 337

    (51) estatutofunc -> RETURN PARIZQ expresion r_return_func . PARDER PTOCOM

    PARDER          shift and go to state 343


state 338

    (109) decisionfunc -> IF PARIZQ expresion PARDER . r_if_paso_1 THEN bloquefunc decisionfunc_else r_if_paso_3
    (138) r_if_paso_1 -> .

    THEN            reduce using rule 138 (r_if_paso_1 -> .)

    r_if_paso_1                    shift and go to state 344

state 339

    (114) condicionalfunc -> WHILE PARIZQ expresion PARDER . DO bloquefunc

    DO              shift and go to state 345


state 340

    (115) nocondicionalfunc -> FOR iddim IGU expresion . TO expresion DO bloquefunc

    TO              shift and go to state 346


state 341

    (14) opciontipo -> MODULE ID r_update_func_type r_update_curr_function_name_especial PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER . r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return
    (124) r_register_param_types -> .

    VARTOKEN        reduce using rule 124 (r_register_param_types -> .)
    KEYIZQ          reduce using rule 124 (r_register_param_types -> .)

    r_register_param_types         shift and go to state 347

state 342

    (108) nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2 .

    ID              reduce using rule 108 (nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2 .)
    IF              reduce using rule 108 (nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2 .)
    WRITE           reduce using rule 108 (nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2 .)
    READ            reduce using rule 108 (nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2 .)
    WHILE           reduce using rule 108 (nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2 .)
    FOR             reduce using rule 108 (nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2 .)
    KEYDER          reduce using rule 108 (nocondicional -> FOR iddim IGU r_pila_operadores_push_igu expresion TO r_pop_igu_for expresion r_for_paso_1 DO bloque r_for_paso_2 .)


state 343

    (51) estatutofunc -> RETURN PARIZQ expresion r_return_func PARDER . PTOCOM

    PTOCOM          shift and go to state 348


state 344

    (109) decisionfunc -> IF PARIZQ expresion PARDER r_if_paso_1 . THEN bloquefunc decisionfunc_else r_if_paso_3

    THEN            shift and go to state 349


state 345

    (114) condicionalfunc -> WHILE PARIZQ expresion PARDER DO . bloquefunc
    (36) bloquefunc -> . KEYIZQ bloqueopcionfunc KEYDER

    KEYIZQ          shift and go to state 273

    bloquefunc                     shift and go to state 350

state 346

    (115) nocondicionalfunc -> FOR iddim IGU expresion TO . expresion DO bloquefunc
    (55) expresion -> . exp r_pop_comp expresionsig
    (67) exp -> . termino r_pop_mas expciclo
    (71) termino -> . factor r_pop_mult factorciclo
    (75) factor -> . PARIZQ r_marcar_fondo_de_pila expresion r_desmarcar_fondo_de_pila PARDER
    (76) factor -> . masomenos varcte
    (77) factor -> . ID r_verifica_variable_existe r_guardar_variable opcionid r_pila_operandos_push
    (78) masomenos -> . MAS
    (79) masomenos -> . MENOS
    (80) masomenos -> . empty
    (116) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 107
    ID              shift and go to state 113
    MAS             shift and go to state 114
    MENOS           shift and go to state 115
    CTEI            reduce using rule 116 (empty -> .)
    CTEF            reduce using rule 116 (empty -> .)

  ! ID              [ reduce using rule 116 (empty -> .) ]

    expresion                      shift and go to state 351
    exp                            shift and go to state 109
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    masomenos                      shift and go to state 112
    empty                          shift and go to state 116

state 347

    (14) opciontipo -> MODULE ID r_update_func_type r_update_curr_function_name_especial PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types . opvars r_register_quad bloquefunc r_endfunc r_asegurar_return
    (2) opvars -> . vars
    (3) opvars -> . empty
    (6) vars -> . VARTOKEN tipo ID r_register_variable_name arr arr varciclo PTOCOM tipociclo
    (116) empty -> .

    VARTOKEN        shift and go to state 10
    KEYIZQ          reduce using rule 116 (empty -> .)

    opvars                         shift and go to state 352
    vars                           shift and go to state 8
    empty                          shift and go to state 9

state 348

    (51) estatutofunc -> RETURN PARIZQ expresion r_return_func PARDER PTOCOM .

    RETURN          reduce using rule 51 (estatutofunc -> RETURN PARIZQ expresion r_return_func PARDER PTOCOM .)
    ID              reduce using rule 51 (estatutofunc -> RETURN PARIZQ expresion r_return_func PARDER PTOCOM .)
    IF              reduce using rule 51 (estatutofunc -> RETURN PARIZQ expresion r_return_func PARDER PTOCOM .)
    WRITE           reduce using rule 51 (estatutofunc -> RETURN PARIZQ expresion r_return_func PARDER PTOCOM .)
    READ            reduce using rule 51 (estatutofunc -> RETURN PARIZQ expresion r_return_func PARDER PTOCOM .)
    WHILE           reduce using rule 51 (estatutofunc -> RETURN PARIZQ expresion r_return_func PARDER PTOCOM .)
    FOR             reduce using rule 51 (estatutofunc -> RETURN PARIZQ expresion r_return_func PARDER PTOCOM .)
    KEYDER          reduce using rule 51 (estatutofunc -> RETURN PARIZQ expresion r_return_func PARDER PTOCOM .)


state 349

    (109) decisionfunc -> IF PARIZQ expresion PARDER r_if_paso_1 THEN . bloquefunc decisionfunc_else r_if_paso_3
    (36) bloquefunc -> . KEYIZQ bloqueopcionfunc KEYDER

    KEYIZQ          shift and go to state 273

    bloquefunc                     shift and go to state 353

state 350

    (114) condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc .

    RETURN          reduce using rule 114 (condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc .)
    ID              reduce using rule 114 (condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc .)
    IF              reduce using rule 114 (condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc .)
    WRITE           reduce using rule 114 (condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc .)
    READ            reduce using rule 114 (condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc .)
    WHILE           reduce using rule 114 (condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc .)
    FOR             reduce using rule 114 (condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc .)
    KEYDER          reduce using rule 114 (condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc .)


state 351

    (115) nocondicionalfunc -> FOR iddim IGU expresion TO expresion . DO bloquefunc

    DO              shift and go to state 354


state 352

    (14) opciontipo -> MODULE ID r_update_func_type r_update_curr_function_name_especial PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars . r_register_quad bloquefunc r_endfunc r_asegurar_return
    (127) r_register_quad -> .

    KEYIZQ          reduce using rule 127 (r_register_quad -> .)

    r_register_quad                shift and go to state 355

state 353

    (109) decisionfunc -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloquefunc . decisionfunc_else r_if_paso_3
    (110) decisionfunc_else -> . ELSE r_if_paso_2 bloquefunc
    (111) decisionfunc_else -> . empty
    (116) empty -> .

    ELSE            shift and go to state 357
    RETURN          reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    IF              reduce using rule 116 (empty -> .)
    WRITE           reduce using rule 116 (empty -> .)
    READ            reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    FOR             reduce using rule 116 (empty -> .)
    KEYDER          reduce using rule 116 (empty -> .)

    decisionfunc_else              shift and go to state 356
    empty                          shift and go to state 358

state 354

    (115) nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO . bloquefunc
    (36) bloquefunc -> . KEYIZQ bloqueopcionfunc KEYDER

    KEYIZQ          shift and go to state 273

    bloquefunc                     shift and go to state 359

state 355

    (14) opciontipo -> MODULE ID r_update_func_type r_update_curr_function_name_especial PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad . bloquefunc r_endfunc r_asegurar_return
    (36) bloquefunc -> . KEYIZQ bloqueopcionfunc KEYDER

    KEYIZQ          shift and go to state 273

    bloquefunc                     shift and go to state 360

state 356

    (109) decisionfunc -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloquefunc decisionfunc_else . r_if_paso_3
    (143) r_if_paso_3 -> .

    RETURN          reduce using rule 143 (r_if_paso_3 -> .)
    ID              reduce using rule 143 (r_if_paso_3 -> .)
    IF              reduce using rule 143 (r_if_paso_3 -> .)
    WRITE           reduce using rule 143 (r_if_paso_3 -> .)
    READ            reduce using rule 143 (r_if_paso_3 -> .)
    WHILE           reduce using rule 143 (r_if_paso_3 -> .)
    FOR             reduce using rule 143 (r_if_paso_3 -> .)
    KEYDER          reduce using rule 143 (r_if_paso_3 -> .)

    r_if_paso_3                    shift and go to state 361

state 357

    (110) decisionfunc_else -> ELSE . r_if_paso_2 bloquefunc
    (142) r_if_paso_2 -> .

    KEYIZQ          reduce using rule 142 (r_if_paso_2 -> .)

    r_if_paso_2                    shift and go to state 362

state 358

    (111) decisionfunc_else -> empty .

    RETURN          reduce using rule 111 (decisionfunc_else -> empty .)
    ID              reduce using rule 111 (decisionfunc_else -> empty .)
    IF              reduce using rule 111 (decisionfunc_else -> empty .)
    WRITE           reduce using rule 111 (decisionfunc_else -> empty .)
    READ            reduce using rule 111 (decisionfunc_else -> empty .)
    WHILE           reduce using rule 111 (decisionfunc_else -> empty .)
    FOR             reduce using rule 111 (decisionfunc_else -> empty .)
    KEYDER          reduce using rule 111 (decisionfunc_else -> empty .)


state 359

    (115) nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc .

    RETURN          reduce using rule 115 (nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc .)
    ID              reduce using rule 115 (nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc .)
    IF              reduce using rule 115 (nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc .)
    WRITE           reduce using rule 115 (nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc .)
    READ            reduce using rule 115 (nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc .)
    WHILE           reduce using rule 115 (nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc .)
    FOR             reduce using rule 115 (nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc .)
    KEYDER          reduce using rule 115 (nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc .)


state 360

    (14) opciontipo -> MODULE ID r_update_func_type r_update_curr_function_name_especial PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc . r_endfunc r_asegurar_return
    (137) r_endfunc -> .

    VOID            reduce using rule 137 (r_endfunc -> .)
    INT             reduce using rule 137 (r_endfunc -> .)
    FLT             reduce using rule 137 (r_endfunc -> .)
    CHAR            reduce using rule 137 (r_endfunc -> .)
    MAIN            reduce using rule 137 (r_endfunc -> .)
    KEYIZQ          reduce using rule 137 (r_endfunc -> .)

    r_endfunc                      shift and go to state 363

state 361

    (109) decisionfunc -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloquefunc decisionfunc_else r_if_paso_3 .

    RETURN          reduce using rule 109 (decisionfunc -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloquefunc decisionfunc_else r_if_paso_3 .)
    ID              reduce using rule 109 (decisionfunc -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloquefunc decisionfunc_else r_if_paso_3 .)
    IF              reduce using rule 109 (decisionfunc -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloquefunc decisionfunc_else r_if_paso_3 .)
    WRITE           reduce using rule 109 (decisionfunc -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloquefunc decisionfunc_else r_if_paso_3 .)
    READ            reduce using rule 109 (decisionfunc -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloquefunc decisionfunc_else r_if_paso_3 .)
    WHILE           reduce using rule 109 (decisionfunc -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloquefunc decisionfunc_else r_if_paso_3 .)
    FOR             reduce using rule 109 (decisionfunc -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloquefunc decisionfunc_else r_if_paso_3 .)
    KEYDER          reduce using rule 109 (decisionfunc -> IF PARIZQ expresion PARDER r_if_paso_1 THEN bloquefunc decisionfunc_else r_if_paso_3 .)


state 362

    (110) decisionfunc_else -> ELSE r_if_paso_2 . bloquefunc
    (36) bloquefunc -> . KEYIZQ bloqueopcionfunc KEYDER

    KEYIZQ          shift and go to state 273

    bloquefunc                     shift and go to state 364

state 363

    (14) opciontipo -> MODULE ID r_update_func_type r_update_curr_function_name_especial PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc . r_asegurar_return
    (130) r_asegurar_return -> .

    VOID            reduce using rule 130 (r_asegurar_return -> .)
    INT             reduce using rule 130 (r_asegurar_return -> .)
    FLT             reduce using rule 130 (r_asegurar_return -> .)
    CHAR            reduce using rule 130 (r_asegurar_return -> .)
    MAIN            reduce using rule 130 (r_asegurar_return -> .)
    KEYIZQ          reduce using rule 130 (r_asegurar_return -> .)

    r_asegurar_return              shift and go to state 365

state 364

    (110) decisionfunc_else -> ELSE r_if_paso_2 bloquefunc .

    RETURN          reduce using rule 110 (decisionfunc_else -> ELSE r_if_paso_2 bloquefunc .)
    ID              reduce using rule 110 (decisionfunc_else -> ELSE r_if_paso_2 bloquefunc .)
    IF              reduce using rule 110 (decisionfunc_else -> ELSE r_if_paso_2 bloquefunc .)
    WRITE           reduce using rule 110 (decisionfunc_else -> ELSE r_if_paso_2 bloquefunc .)
    READ            reduce using rule 110 (decisionfunc_else -> ELSE r_if_paso_2 bloquefunc .)
    WHILE           reduce using rule 110 (decisionfunc_else -> ELSE r_if_paso_2 bloquefunc .)
    FOR             reduce using rule 110 (decisionfunc_else -> ELSE r_if_paso_2 bloquefunc .)
    KEYDER          reduce using rule 110 (decisionfunc_else -> ELSE r_if_paso_2 bloquefunc .)


state 365

    (14) opciontipo -> MODULE ID r_update_func_type r_update_curr_function_name_especial PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return .

    VOID            reduce using rule 14 (opciontipo -> MODULE ID r_update_func_type r_update_curr_function_name_especial PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return .)
    INT             reduce using rule 14 (opciontipo -> MODULE ID r_update_func_type r_update_curr_function_name_especial PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return .)
    FLT             reduce using rule 14 (opciontipo -> MODULE ID r_update_func_type r_update_curr_function_name_especial PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return .)
    CHAR            reduce using rule 14 (opciontipo -> MODULE ID r_update_func_type r_update_curr_function_name_especial PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return .)
    MAIN            reduce using rule 14 (opciontipo -> MODULE ID r_update_func_type r_update_curr_function_name_especial PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return .)
    KEYIZQ          reduce using rule 14 (opciontipo -> MODULE ID r_update_func_type r_update_curr_function_name_especial PARIZQ r_marcar_funcion opcionvarsimple r_desmarcar_funcion PARDER r_register_param_types opvars r_register_quad bloquefunc r_endfunc r_asegurar_return .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for CORIZQ in state 39 resolved as shift
WARNING: shift/reduce conflict for INT in state 81 resolved as shift
WARNING: shift/reduce conflict for FLT in state 81 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 81 resolved as shift
WARNING: shift/reduce conflict for ID in state 88 resolved as shift
WARNING: shift/reduce conflict for ID in state 89 resolved as shift
WARNING: shift/reduce conflict for CORIZQ in state 104 resolved as shift
WARNING: shift/reduce conflict for CORIZQ in state 105 resolved as shift
WARNING: shift/reduce conflict for ID in state 121 resolved as shift
WARNING: shift/reduce conflict for CORIZQ in state 127 resolved as shift
WARNING: shift/reduce conflict for ID in state 133 resolved as shift
WARNING: shift/reduce conflict for ID in state 135 resolved as shift
WARNING: shift/reduce conflict for ID in state 136 resolved as shift
WARNING: shift/reduce conflict for ID in state 147 resolved as shift
WARNING: shift/reduce conflict for ID in state 153 resolved as shift
WARNING: shift/reduce conflict for CORIZQ in state 154 resolved as shift
WARNING: shift/reduce conflict for CORIZQ in state 161 resolved as shift
WARNING: shift/reduce conflict for CORIZQ in state 191 resolved as shift
WARNING: shift/reduce conflict for ID in state 200 resolved as shift
WARNING: shift/reduce conflict for ID in state 217 resolved as shift
WARNING: shift/reduce conflict for ID in state 218 resolved as shift
WARNING: shift/reduce conflict for ID in state 219 resolved as shift
WARNING: shift/reduce conflict for ID in state 220 resolved as shift
WARNING: shift/reduce conflict for ID in state 223 resolved as shift
WARNING: shift/reduce conflict for ID in state 224 resolved as shift
WARNING: shift/reduce conflict for ID in state 225 resolved as shift
WARNING: shift/reduce conflict for ID in state 226 resolved as shift
WARNING: shift/reduce conflict for ID in state 242 resolved as shift
WARNING: shift/reduce conflict for ID in state 245 resolved as shift
WARNING: shift/reduce conflict for ID in state 249 resolved as shift
WARNING: shift/reduce conflict for ID in state 252 resolved as shift
WARNING: shift/reduce conflict for ID in state 257 resolved as shift
WARNING: shift/reduce conflict for ID in state 258 resolved as shift
WARNING: shift/reduce conflict for ID in state 264 resolved as shift
WARNING: shift/reduce conflict for ID in state 269 resolved as shift
WARNING: shift/reduce conflict for INT in state 307 resolved as shift
WARNING: shift/reduce conflict for FLT in state 307 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 307 resolved as shift
WARNING: shift/reduce conflict for ID in state 320 resolved as shift
WARNING: shift/reduce conflict for ID in state 321 resolved as shift
WARNING: shift/reduce conflict for ID in state 322 resolved as shift
WARNING: shift/reduce conflict for ID in state 334 resolved as shift
WARNING: shift/reduce conflict for ID in state 346 resolved as shift
