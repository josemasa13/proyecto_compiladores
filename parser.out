Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DOSPTS

Grammar

Rule 0     S' -> program
Rule 1     program -> PRO ID r_register_global PTOCOM opvars opfunciones MAIN PARIZQ PARDER bloque
Rule 2     opvars -> vars
Rule 3     opvars -> empty
Rule 4     opfunciones -> funciones opfunciones
Rule 5     opfunciones -> empty
Rule 6     vars -> VARTOKEN tipo ID arr arr varciclo PTOCOM tipociclo
Rule 7     varciclo -> COMA ID arr arr varciclo
Rule 8     varciclo -> empty
Rule 9     arr -> CORIZQ CTEI CORDER
Rule 10    arr -> empty
Rule 11    tipociclo -> tipo opciontipo
Rule 12    tipociclo -> empty
Rule 13    opciontipo -> ID arr arr varciclo PTOCOM tipociclo
Rule 14    opciontipo -> MODULE ID PARIZQ opcionvarsimple PARDER opvars bloquefunc
Rule 15    tipo -> INT
Rule 16    tipo -> FLT
Rule 17    tipo -> CHAR
Rule 18    tipo_func -> INT r_register_function
Rule 19    tipo_func -> FLT r_register_function
Rule 20    tipo_func -> CHAR r_register_function
Rule 21    varsimple -> tipo ident
Rule 22    funciones -> funcionvoid
Rule 23    funciones -> funcion
Rule 24    funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloque
Rule 25    opcionvarsimple -> varsimple ciclovarsimple
Rule 26    opcionvarsimple -> empty
Rule 27    ciclovarsimple -> COMA varsimple ciclovarsimple
Rule 28    ciclovarsimple -> empty
Rule 29    funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloquefunc
Rule 30    ident -> ID arrini arrini
Rule 31    arrini -> CORIZQ CORDER
Rule 32    arrini -> empty
Rule 33    bloque -> KEYIZQ bloqueopcion KEYDER
Rule 34    bloqueopcion -> estatuto bloqueopcion
Rule 35    bloqueopcion -> empty
Rule 36    bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER
Rule 37    bloqueopcionfunc -> estatutofunc bloqueopcionfunc
Rule 38    bloqueopcionfunc -> empty
Rule 39    estatuto -> asignacion
Rule 40    estatuto -> decision
Rule 41    estatuto -> escritura
Rule 42    estatuto -> llamadafunc
Rule 43    estatuto -> repeticion
Rule 44    estatuto -> lectura
Rule 45    estatutofunc -> asignacion
Rule 46    estatutofunc -> decisionfunc
Rule 47    estatutofunc -> escritura
Rule 48    estatutofunc -> llamadafunc
Rule 49    estatutofunc -> repeticionfunc
Rule 50    estatutofunc -> lectura
Rule 51    estatutofunc -> RETURN PARIZQ expresion PARDER PTOCOM
Rule 52    asignacion -> ID asignacionarr asignacionarr IGU expresion PTOCOM
Rule 53    asignacionarr -> CORIZQ expresion CORDER
Rule 54    asignacionarr -> empty
Rule 55    expresion -> exp expresionsig
Rule 56    expresionsig -> MAY expresionsigequal exp
Rule 57    expresionsig -> MEN expresionsigequal exp
Rule 58    expresionsig -> DIF exp
Rule 59    expresionsig -> IGUIGU exp
Rule 60    expresionsig -> AND exp
Rule 61    expresionsig -> OR exp
Rule 62    expresionsig -> empty
Rule 63    expresionsigequal -> IGU
Rule 64    expresionsigequal -> empty
Rule 65    exp -> termino expciclo
Rule 66    expciclo -> MAS exp
Rule 67    expciclo -> MENOS exp
Rule 68    expciclo -> empty
Rule 69    termino -> factor factorciclo
Rule 70    factorciclo -> MULT termino
Rule 71    factorciclo -> DIV termino
Rule 72    factorciclo -> empty
Rule 73    factor -> PARIZQ expresion PARDER
Rule 74    factor -> masomenos varcte
Rule 75    factor -> ID opcionid
Rule 76    masomenos -> MAS
Rule 77    masomenos -> MENOS
Rule 78    masomenos -> empty
Rule 79    opcionid -> arrexp arrexp
Rule 80    opcionid -> PARIZQ parametros PARDER
Rule 81    varcte -> iddim
Rule 82    varcte -> CTEI
Rule 83    varcte -> CTEF
Rule 84    parametros -> expresion cicloparametros
Rule 85    parametros -> empty
Rule 86    cicloparametros -> COMA expresion cicloparametros
Rule 87    cicloparametros -> empty
Rule 88    decision -> IF PARIZQ expresion PARDER THEN bloque ELSE bloque
Rule 89    escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM
Rule 90    escrituraciclo -> CTE_STRING
Rule 91    escrituraciclo -> expresion
Rule 92    otro -> COMA escrituraciclo otro
Rule 93    otro -> empty
Rule 94    llamadafunc -> ID PARIZQ parametros PARDER PTOCOM
Rule 95    lectura -> READ PARIZQ iddim ciclodim PARDER PTOCOM
Rule 96    ciclodim -> COMA iddim ciclodim
Rule 97    ciclodim -> empty
Rule 98    iddim -> ID arrexp arrexp
Rule 99    arrexp -> CORIZQ expresion CORDER
Rule 100   arrexp -> empty
Rule 101   repeticion -> condicional
Rule 102   repeticion -> nocondicional
Rule 103   condicional -> WHILE PARIZQ expresion PARDER DO bloque
Rule 104   nocondicional -> FOR iddim IGU expresion TO expresion DO bloque
Rule 105   decisionfunc -> IF PARIZQ expresion PARDER THEN bloquefunc ELSE bloquefunc
Rule 106   repeticionfunc -> condicionalfunc
Rule 107   repeticionfunc -> nocondicionalfunc
Rule 108   condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc
Rule 109   nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc
Rule 110   empty -> <empty>
Rule 111   r_register_global -> <empty>
Rule 112   r_register_function -> <empty>
Rule 113   r_update_curr_function_name -> <empty>

Terminals, with rules where they appear

AND                  : 60
CHAR                 : 17 20
COMA                 : 7 27 86 92 96
CORDER               : 9 31 53 99
CORIZQ               : 9 31 53 99
CTEF                 : 83
CTEI                 : 9 82
CTE_STRING           : 90
DIF                  : 58
DIV                  : 71
DO                   : 103 104 108 109
DOSPTS               : 
ELSE                 : 88 105
FLT                  : 16 19
FOR                  : 104 109
ID                   : 1 6 7 13 14 24 29 30 52 75 94 98
IF                   : 88 105
IGU                  : 52 63 104 109
IGUIGU               : 59
INT                  : 15 18
KEYDER               : 33 36
KEYIZQ               : 33 36
MAIN                 : 1
MAS                  : 66 76
MAY                  : 56
MEN                  : 57
MENOS                : 67 77
MODULE               : 14 24 29
MULT                 : 70
OR                   : 61
PARDER               : 1 14 24 29 51 73 80 88 89 94 95 103 105 108
PARIZQ               : 1 14 24 29 51 73 80 88 89 94 95 103 105 108
PRO                  : 1
PTOCOM               : 1 6 13 51 52 89 94 95
READ                 : 95
RETURN               : 51
THEN                 : 88 105
TO                   : 104 109
VARTOKEN             : 6
VOID                 : 24
WHILE                : 103 108
WRITE                : 89
error                : 

Nonterminals, with rules where they appear

arr                  : 6 6 7 7 13 13
arrexp               : 79 79 98 98
arrini               : 30 30
asignacion           : 39 45
asignacionarr        : 52 52
bloque               : 1 24 88 88 103 104
bloquefunc           : 14 29 105 105 108 109
bloqueopcion         : 33 34
bloqueopcionfunc     : 36 37
ciclodim             : 95 96
cicloparametros      : 84 86
ciclovarsimple       : 25 27
condicional          : 101
condicionalfunc      : 106
decision             : 40
decisionfunc         : 46
empty                : 3 5 8 10 12 26 28 32 35 38 54 62 64 68 72 78 85 87 93 97 100
escritura            : 41 47
escrituraciclo       : 89 92
estatuto             : 34
estatutofunc         : 37
exp                  : 55 56 57 58 59 60 61 66 67
expciclo             : 65
expresion            : 51 52 53 73 84 86 88 91 99 103 104 104 105 108 109 109
expresionsig         : 55
expresionsigequal    : 56 57
factor               : 69
factorciclo          : 69
funcion              : 23
funciones            : 4
funcionvoid          : 22
iddim                : 81 95 96 104 109
ident                : 21
lectura              : 44 50
llamadafunc          : 42 48
masomenos            : 74
nocondicional        : 102
nocondicionalfunc    : 107
opcionid             : 75
opciontipo           : 11
opcionvarsimple      : 14 24 29
opfunciones          : 1 4
opvars               : 1 14 24 29
otro                 : 89 92
parametros           : 80 94
program              : 0
r_register_function  : 18 19 20 24
r_register_global    : 1
r_update_curr_function_name : 24 29
repeticion           : 43
repeticionfunc       : 49
termino              : 65 70 71
tipo                 : 6 11 21
tipo_func            : 29
tipociclo            : 6 13
varciclo             : 6 7 13
varcte               : 74
vars                 : 2
varsimple            : 25 27

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PRO ID r_register_global PTOCOM opvars opfunciones MAIN PARIZQ PARDER bloque

    PRO             shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PRO . ID r_register_global PTOCOM opvars opfunciones MAIN PARIZQ PARDER bloque

    ID              shift and go to state 3


state 3

    (1) program -> PRO ID . r_register_global PTOCOM opvars opfunciones MAIN PARIZQ PARDER bloque
    (111) r_register_global -> .

    PTOCOM          reduce using rule 111 (r_register_global -> .)

    r_register_global              shift and go to state 4

state 4

    (1) program -> PRO ID r_register_global . PTOCOM opvars opfunciones MAIN PARIZQ PARDER bloque

    PTOCOM          shift and go to state 5


state 5

    (1) program -> PRO ID r_register_global PTOCOM . opvars opfunciones MAIN PARIZQ PARDER bloque
    (2) opvars -> . vars
    (3) opvars -> . empty
    (6) vars -> . VARTOKEN tipo ID arr arr varciclo PTOCOM tipociclo
    (110) empty -> .

    VARTOKEN        shift and go to state 9
    VOID            reduce using rule 110 (empty -> .)
    INT             reduce using rule 110 (empty -> .)
    FLT             reduce using rule 110 (empty -> .)
    CHAR            reduce using rule 110 (empty -> .)
    MAIN            reduce using rule 110 (empty -> .)

    opvars                         shift and go to state 6
    vars                           shift and go to state 7
    empty                          shift and go to state 8

state 6

    (1) program -> PRO ID r_register_global PTOCOM opvars . opfunciones MAIN PARIZQ PARDER bloque
    (4) opfunciones -> . funciones opfunciones
    (5) opfunciones -> . empty
    (22) funciones -> . funcionvoid
    (23) funciones -> . funcion
    (110) empty -> .
    (24) funcionvoid -> . VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloque
    (29) funcion -> . tipo_func MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloquefunc
    (18) tipo_func -> . INT r_register_function
    (19) tipo_func -> . FLT r_register_function
    (20) tipo_func -> . CHAR r_register_function

    MAIN            reduce using rule 110 (empty -> .)
    VOID            shift and go to state 15
    INT             shift and go to state 17
    FLT             shift and go to state 18
    CHAR            shift and go to state 19

    opfunciones                    shift and go to state 10
    funciones                      shift and go to state 11
    empty                          shift and go to state 12
    funcionvoid                    shift and go to state 13
    funcion                        shift and go to state 14
    tipo_func                      shift and go to state 16

state 7

    (2) opvars -> vars .

    VOID            reduce using rule 2 (opvars -> vars .)
    INT             reduce using rule 2 (opvars -> vars .)
    FLT             reduce using rule 2 (opvars -> vars .)
    CHAR            reduce using rule 2 (opvars -> vars .)
    MAIN            reduce using rule 2 (opvars -> vars .)
    KEYIZQ          reduce using rule 2 (opvars -> vars .)


state 8

    (3) opvars -> empty .

    VOID            reduce using rule 3 (opvars -> empty .)
    INT             reduce using rule 3 (opvars -> empty .)
    FLT             reduce using rule 3 (opvars -> empty .)
    CHAR            reduce using rule 3 (opvars -> empty .)
    MAIN            reduce using rule 3 (opvars -> empty .)
    KEYIZQ          reduce using rule 3 (opvars -> empty .)


state 9

    (6) vars -> VARTOKEN . tipo ID arr arr varciclo PTOCOM tipociclo
    (15) tipo -> . INT
    (16) tipo -> . FLT
    (17) tipo -> . CHAR

    INT             shift and go to state 21
    FLT             shift and go to state 22
    CHAR            shift and go to state 23

    tipo                           shift and go to state 20

state 10

    (1) program -> PRO ID r_register_global PTOCOM opvars opfunciones . MAIN PARIZQ PARDER bloque

    MAIN            shift and go to state 24


state 11

    (4) opfunciones -> funciones . opfunciones
    (4) opfunciones -> . funciones opfunciones
    (5) opfunciones -> . empty
    (22) funciones -> . funcionvoid
    (23) funciones -> . funcion
    (110) empty -> .
    (24) funcionvoid -> . VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloque
    (29) funcion -> . tipo_func MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloquefunc
    (18) tipo_func -> . INT r_register_function
    (19) tipo_func -> . FLT r_register_function
    (20) tipo_func -> . CHAR r_register_function

    MAIN            reduce using rule 110 (empty -> .)
    VOID            shift and go to state 15
    INT             shift and go to state 17
    FLT             shift and go to state 18
    CHAR            shift and go to state 19

    funciones                      shift and go to state 11
    opfunciones                    shift and go to state 25
    empty                          shift and go to state 12
    funcionvoid                    shift and go to state 13
    funcion                        shift and go to state 14
    tipo_func                      shift and go to state 16

state 12

    (5) opfunciones -> empty .

    MAIN            reduce using rule 5 (opfunciones -> empty .)


state 13

    (22) funciones -> funcionvoid .

    VOID            reduce using rule 22 (funciones -> funcionvoid .)
    INT             reduce using rule 22 (funciones -> funcionvoid .)
    FLT             reduce using rule 22 (funciones -> funcionvoid .)
    CHAR            reduce using rule 22 (funciones -> funcionvoid .)
    MAIN            reduce using rule 22 (funciones -> funcionvoid .)


state 14

    (23) funciones -> funcion .

    VOID            reduce using rule 23 (funciones -> funcion .)
    INT             reduce using rule 23 (funciones -> funcion .)
    FLT             reduce using rule 23 (funciones -> funcion .)
    CHAR            reduce using rule 23 (funciones -> funcion .)
    MAIN            reduce using rule 23 (funciones -> funcion .)


state 15

    (24) funcionvoid -> VOID . r_register_function MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloque
    (112) r_register_function -> .

    MODULE          reduce using rule 112 (r_register_function -> .)

    r_register_function            shift and go to state 26

state 16

    (29) funcion -> tipo_func . MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloquefunc

    MODULE          shift and go to state 27


state 17

    (18) tipo_func -> INT . r_register_function
    (112) r_register_function -> .

    MODULE          reduce using rule 112 (r_register_function -> .)

    r_register_function            shift and go to state 28

state 18

    (19) tipo_func -> FLT . r_register_function
    (112) r_register_function -> .

    MODULE          reduce using rule 112 (r_register_function -> .)

    r_register_function            shift and go to state 29

state 19

    (20) tipo_func -> CHAR . r_register_function
    (112) r_register_function -> .

    MODULE          reduce using rule 112 (r_register_function -> .)

    r_register_function            shift and go to state 30

state 20

    (6) vars -> VARTOKEN tipo . ID arr arr varciclo PTOCOM tipociclo

    ID              shift and go to state 31


state 21

    (15) tipo -> INT .

    ID              reduce using rule 15 (tipo -> INT .)
    MODULE          reduce using rule 15 (tipo -> INT .)


state 22

    (16) tipo -> FLT .

    ID              reduce using rule 16 (tipo -> FLT .)
    MODULE          reduce using rule 16 (tipo -> FLT .)


state 23

    (17) tipo -> CHAR .

    ID              reduce using rule 17 (tipo -> CHAR .)
    MODULE          reduce using rule 17 (tipo -> CHAR .)


state 24

    (1) program -> PRO ID r_register_global PTOCOM opvars opfunciones MAIN . PARIZQ PARDER bloque

    PARIZQ          shift and go to state 32


state 25

    (4) opfunciones -> funciones opfunciones .

    MAIN            reduce using rule 4 (opfunciones -> funciones opfunciones .)


state 26

    (24) funcionvoid -> VOID r_register_function . MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloque

    MODULE          shift and go to state 33


state 27

    (29) funcion -> tipo_func MODULE . ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloquefunc

    ID              shift and go to state 34


state 28

    (18) tipo_func -> INT r_register_function .

    MODULE          reduce using rule 18 (tipo_func -> INT r_register_function .)


state 29

    (19) tipo_func -> FLT r_register_function .

    MODULE          reduce using rule 19 (tipo_func -> FLT r_register_function .)


state 30

    (20) tipo_func -> CHAR r_register_function .

    MODULE          reduce using rule 20 (tipo_func -> CHAR r_register_function .)


state 31

    (6) vars -> VARTOKEN tipo ID . arr arr varciclo PTOCOM tipociclo
    (9) arr -> . CORIZQ CTEI CORDER
    (10) arr -> . empty
    (110) empty -> .

  ! shift/reduce conflict for CORIZQ resolved as shift
    CORIZQ          shift and go to state 36
    COMA            reduce using rule 110 (empty -> .)
    PTOCOM          reduce using rule 110 (empty -> .)

  ! CORIZQ          [ reduce using rule 110 (empty -> .) ]

    arr                            shift and go to state 35
    empty                          shift and go to state 37

state 32

    (1) program -> PRO ID r_register_global PTOCOM opvars opfunciones MAIN PARIZQ . PARDER bloque

    PARDER          shift and go to state 38


state 33

    (24) funcionvoid -> VOID r_register_function MODULE . ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloque

    ID              shift and go to state 39


state 34

    (29) funcion -> tipo_func MODULE ID . r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloquefunc
    (113) r_update_curr_function_name -> .

    PARIZQ          reduce using rule 113 (r_update_curr_function_name -> .)

    r_update_curr_function_name    shift and go to state 40

state 35

    (6) vars -> VARTOKEN tipo ID arr . arr varciclo PTOCOM tipociclo
    (9) arr -> . CORIZQ CTEI CORDER
    (10) arr -> . empty
    (110) empty -> .

    CORIZQ          shift and go to state 36
    COMA            reduce using rule 110 (empty -> .)
    PTOCOM          reduce using rule 110 (empty -> .)

    arr                            shift and go to state 41
    empty                          shift and go to state 37

state 36

    (9) arr -> CORIZQ . CTEI CORDER

    CTEI            shift and go to state 42


state 37

    (10) arr -> empty .

    CORIZQ          reduce using rule 10 (arr -> empty .)
    COMA            reduce using rule 10 (arr -> empty .)
    PTOCOM          reduce using rule 10 (arr -> empty .)


state 38

    (1) program -> PRO ID r_register_global PTOCOM opvars opfunciones MAIN PARIZQ PARDER . bloque
    (33) bloque -> . KEYIZQ bloqueopcion KEYDER

    KEYIZQ          shift and go to state 44

    bloque                         shift and go to state 43

state 39

    (24) funcionvoid -> VOID r_register_function MODULE ID . r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloque
    (113) r_update_curr_function_name -> .

    PARIZQ          reduce using rule 113 (r_update_curr_function_name -> .)

    r_update_curr_function_name    shift and go to state 45

state 40

    (29) funcion -> tipo_func MODULE ID r_update_curr_function_name . PARIZQ opcionvarsimple PARDER opvars bloquefunc

    PARIZQ          shift and go to state 46


state 41

    (6) vars -> VARTOKEN tipo ID arr arr . varciclo PTOCOM tipociclo
    (7) varciclo -> . COMA ID arr arr varciclo
    (8) varciclo -> . empty
    (110) empty -> .

    COMA            shift and go to state 48
    PTOCOM          reduce using rule 110 (empty -> .)

    varciclo                       shift and go to state 47
    empty                          shift and go to state 49

state 42

    (9) arr -> CORIZQ CTEI . CORDER

    CORDER          shift and go to state 50


state 43

    (1) program -> PRO ID r_register_global PTOCOM opvars opfunciones MAIN PARIZQ PARDER bloque .

    $end            reduce using rule 1 (program -> PRO ID r_register_global PTOCOM opvars opfunciones MAIN PARIZQ PARDER bloque .)


state 44

    (33) bloque -> KEYIZQ . bloqueopcion KEYDER
    (34) bloqueopcion -> . estatuto bloqueopcion
    (35) bloqueopcion -> . empty
    (39) estatuto -> . asignacion
    (40) estatuto -> . decision
    (41) estatuto -> . escritura
    (42) estatuto -> . llamadafunc
    (43) estatuto -> . repeticion
    (44) estatuto -> . lectura
    (110) empty -> .
    (52) asignacion -> . ID asignacionarr asignacionarr IGU expresion PTOCOM
    (88) decision -> . IF PARIZQ expresion PARDER THEN bloque ELSE bloque
    (89) escritura -> . WRITE PARIZQ escrituraciclo otro PARDER PTOCOM
    (94) llamadafunc -> . ID PARIZQ parametros PARDER PTOCOM
    (101) repeticion -> . condicional
    (102) repeticion -> . nocondicional
    (95) lectura -> . READ PARIZQ iddim ciclodim PARDER PTOCOM
    (103) condicional -> . WHILE PARIZQ expresion PARDER DO bloque
    (104) nocondicional -> . FOR iddim IGU expresion TO expresion DO bloque

    KEYDER          reduce using rule 110 (empty -> .)
    ID              shift and go to state 60
    IF              shift and go to state 61
    WRITE           shift and go to state 62
    READ            shift and go to state 65
    WHILE           shift and go to state 66
    FOR             shift and go to state 67

    bloqueopcion                   shift and go to state 51
    estatuto                       shift and go to state 52
    empty                          shift and go to state 53
    asignacion                     shift and go to state 54
    decision                       shift and go to state 55
    escritura                      shift and go to state 56
    llamadafunc                    shift and go to state 57
    repeticion                     shift and go to state 58
    lectura                        shift and go to state 59
    condicional                    shift and go to state 63
    nocondicional                  shift and go to state 64

state 45

    (24) funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name . PARIZQ opcionvarsimple PARDER opvars bloque

    PARIZQ          shift and go to state 68


state 46

    (29) funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ . opcionvarsimple PARDER opvars bloquefunc
    (25) opcionvarsimple -> . varsimple ciclovarsimple
    (26) opcionvarsimple -> . empty
    (21) varsimple -> . tipo ident
    (110) empty -> .
    (15) tipo -> . INT
    (16) tipo -> . FLT
    (17) tipo -> . CHAR

    PARDER          reduce using rule 110 (empty -> .)
    INT             shift and go to state 21
    FLT             shift and go to state 22
    CHAR            shift and go to state 23

    opcionvarsimple                shift and go to state 69
    varsimple                      shift and go to state 70
    empty                          shift and go to state 71
    tipo                           shift and go to state 72

state 47

    (6) vars -> VARTOKEN tipo ID arr arr varciclo . PTOCOM tipociclo

    PTOCOM          shift and go to state 73


state 48

    (7) varciclo -> COMA . ID arr arr varciclo

    ID              shift and go to state 74


state 49

    (8) varciclo -> empty .

    PTOCOM          reduce using rule 8 (varciclo -> empty .)


state 50

    (9) arr -> CORIZQ CTEI CORDER .

    CORIZQ          reduce using rule 9 (arr -> CORIZQ CTEI CORDER .)
    COMA            reduce using rule 9 (arr -> CORIZQ CTEI CORDER .)
    PTOCOM          reduce using rule 9 (arr -> CORIZQ CTEI CORDER .)


state 51

    (33) bloque -> KEYIZQ bloqueopcion . KEYDER

    KEYDER          shift and go to state 75


state 52

    (34) bloqueopcion -> estatuto . bloqueopcion
    (34) bloqueopcion -> . estatuto bloqueopcion
    (35) bloqueopcion -> . empty
    (39) estatuto -> . asignacion
    (40) estatuto -> . decision
    (41) estatuto -> . escritura
    (42) estatuto -> . llamadafunc
    (43) estatuto -> . repeticion
    (44) estatuto -> . lectura
    (110) empty -> .
    (52) asignacion -> . ID asignacionarr asignacionarr IGU expresion PTOCOM
    (88) decision -> . IF PARIZQ expresion PARDER THEN bloque ELSE bloque
    (89) escritura -> . WRITE PARIZQ escrituraciclo otro PARDER PTOCOM
    (94) llamadafunc -> . ID PARIZQ parametros PARDER PTOCOM
    (101) repeticion -> . condicional
    (102) repeticion -> . nocondicional
    (95) lectura -> . READ PARIZQ iddim ciclodim PARDER PTOCOM
    (103) condicional -> . WHILE PARIZQ expresion PARDER DO bloque
    (104) nocondicional -> . FOR iddim IGU expresion TO expresion DO bloque

    KEYDER          reduce using rule 110 (empty -> .)
    ID              shift and go to state 60
    IF              shift and go to state 61
    WRITE           shift and go to state 62
    READ            shift and go to state 65
    WHILE           shift and go to state 66
    FOR             shift and go to state 67

    estatuto                       shift and go to state 52
    bloqueopcion                   shift and go to state 76
    empty                          shift and go to state 53
    asignacion                     shift and go to state 54
    decision                       shift and go to state 55
    escritura                      shift and go to state 56
    llamadafunc                    shift and go to state 57
    repeticion                     shift and go to state 58
    lectura                        shift and go to state 59
    condicional                    shift and go to state 63
    nocondicional                  shift and go to state 64

state 53

    (35) bloqueopcion -> empty .

    KEYDER          reduce using rule 35 (bloqueopcion -> empty .)


state 54

    (39) estatuto -> asignacion .

    ID              reduce using rule 39 (estatuto -> asignacion .)
    IF              reduce using rule 39 (estatuto -> asignacion .)
    WRITE           reduce using rule 39 (estatuto -> asignacion .)
    READ            reduce using rule 39 (estatuto -> asignacion .)
    WHILE           reduce using rule 39 (estatuto -> asignacion .)
    FOR             reduce using rule 39 (estatuto -> asignacion .)
    KEYDER          reduce using rule 39 (estatuto -> asignacion .)


state 55

    (40) estatuto -> decision .

    ID              reduce using rule 40 (estatuto -> decision .)
    IF              reduce using rule 40 (estatuto -> decision .)
    WRITE           reduce using rule 40 (estatuto -> decision .)
    READ            reduce using rule 40 (estatuto -> decision .)
    WHILE           reduce using rule 40 (estatuto -> decision .)
    FOR             reduce using rule 40 (estatuto -> decision .)
    KEYDER          reduce using rule 40 (estatuto -> decision .)


state 56

    (41) estatuto -> escritura .

    ID              reduce using rule 41 (estatuto -> escritura .)
    IF              reduce using rule 41 (estatuto -> escritura .)
    WRITE           reduce using rule 41 (estatuto -> escritura .)
    READ            reduce using rule 41 (estatuto -> escritura .)
    WHILE           reduce using rule 41 (estatuto -> escritura .)
    FOR             reduce using rule 41 (estatuto -> escritura .)
    KEYDER          reduce using rule 41 (estatuto -> escritura .)


state 57

    (42) estatuto -> llamadafunc .

    ID              reduce using rule 42 (estatuto -> llamadafunc .)
    IF              reduce using rule 42 (estatuto -> llamadafunc .)
    WRITE           reduce using rule 42 (estatuto -> llamadafunc .)
    READ            reduce using rule 42 (estatuto -> llamadafunc .)
    WHILE           reduce using rule 42 (estatuto -> llamadafunc .)
    FOR             reduce using rule 42 (estatuto -> llamadafunc .)
    KEYDER          reduce using rule 42 (estatuto -> llamadafunc .)


state 58

    (43) estatuto -> repeticion .

    ID              reduce using rule 43 (estatuto -> repeticion .)
    IF              reduce using rule 43 (estatuto -> repeticion .)
    WRITE           reduce using rule 43 (estatuto -> repeticion .)
    READ            reduce using rule 43 (estatuto -> repeticion .)
    WHILE           reduce using rule 43 (estatuto -> repeticion .)
    FOR             reduce using rule 43 (estatuto -> repeticion .)
    KEYDER          reduce using rule 43 (estatuto -> repeticion .)


state 59

    (44) estatuto -> lectura .

    ID              reduce using rule 44 (estatuto -> lectura .)
    IF              reduce using rule 44 (estatuto -> lectura .)
    WRITE           reduce using rule 44 (estatuto -> lectura .)
    READ            reduce using rule 44 (estatuto -> lectura .)
    WHILE           reduce using rule 44 (estatuto -> lectura .)
    FOR             reduce using rule 44 (estatuto -> lectura .)
    KEYDER          reduce using rule 44 (estatuto -> lectura .)


state 60

    (52) asignacion -> ID . asignacionarr asignacionarr IGU expresion PTOCOM
    (94) llamadafunc -> ID . PARIZQ parametros PARDER PTOCOM
    (53) asignacionarr -> . CORIZQ expresion CORDER
    (54) asignacionarr -> . empty
    (110) empty -> .

  ! shift/reduce conflict for CORIZQ resolved as shift
    PARIZQ          shift and go to state 78
    CORIZQ          shift and go to state 79
    IGU             reduce using rule 110 (empty -> .)

  ! CORIZQ          [ reduce using rule 110 (empty -> .) ]

    asignacionarr                  shift and go to state 77
    empty                          shift and go to state 80

state 61

    (88) decision -> IF . PARIZQ expresion PARDER THEN bloque ELSE bloque

    PARIZQ          shift and go to state 81


state 62

    (89) escritura -> WRITE . PARIZQ escrituraciclo otro PARDER PTOCOM

    PARIZQ          shift and go to state 82


state 63

    (101) repeticion -> condicional .

    ID              reduce using rule 101 (repeticion -> condicional .)
    IF              reduce using rule 101 (repeticion -> condicional .)
    WRITE           reduce using rule 101 (repeticion -> condicional .)
    READ            reduce using rule 101 (repeticion -> condicional .)
    WHILE           reduce using rule 101 (repeticion -> condicional .)
    FOR             reduce using rule 101 (repeticion -> condicional .)
    KEYDER          reduce using rule 101 (repeticion -> condicional .)


state 64

    (102) repeticion -> nocondicional .

    ID              reduce using rule 102 (repeticion -> nocondicional .)
    IF              reduce using rule 102 (repeticion -> nocondicional .)
    WRITE           reduce using rule 102 (repeticion -> nocondicional .)
    READ            reduce using rule 102 (repeticion -> nocondicional .)
    WHILE           reduce using rule 102 (repeticion -> nocondicional .)
    FOR             reduce using rule 102 (repeticion -> nocondicional .)
    KEYDER          reduce using rule 102 (repeticion -> nocondicional .)


state 65

    (95) lectura -> READ . PARIZQ iddim ciclodim PARDER PTOCOM

    PARIZQ          shift and go to state 83


state 66

    (103) condicional -> WHILE . PARIZQ expresion PARDER DO bloque

    PARIZQ          shift and go to state 84


state 67

    (104) nocondicional -> FOR . iddim IGU expresion TO expresion DO bloque
    (98) iddim -> . ID arrexp arrexp

    ID              shift and go to state 86

    iddim                          shift and go to state 85

state 68

    (24) funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ . opcionvarsimple PARDER opvars bloque
    (25) opcionvarsimple -> . varsimple ciclovarsimple
    (26) opcionvarsimple -> . empty
    (21) varsimple -> . tipo ident
    (110) empty -> .
    (15) tipo -> . INT
    (16) tipo -> . FLT
    (17) tipo -> . CHAR

    PARDER          reduce using rule 110 (empty -> .)
    INT             shift and go to state 21
    FLT             shift and go to state 22
    CHAR            shift and go to state 23

    opcionvarsimple                shift and go to state 87
    varsimple                      shift and go to state 70
    empty                          shift and go to state 71
    tipo                           shift and go to state 72

state 69

    (29) funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple . PARDER opvars bloquefunc

    PARDER          shift and go to state 88


state 70

    (25) opcionvarsimple -> varsimple . ciclovarsimple
    (27) ciclovarsimple -> . COMA varsimple ciclovarsimple
    (28) ciclovarsimple -> . empty
    (110) empty -> .

    COMA            shift and go to state 90
    PARDER          reduce using rule 110 (empty -> .)

    ciclovarsimple                 shift and go to state 89
    empty                          shift and go to state 91

state 71

    (26) opcionvarsimple -> empty .

    PARDER          reduce using rule 26 (opcionvarsimple -> empty .)


state 72

    (21) varsimple -> tipo . ident
    (30) ident -> . ID arrini arrini

    ID              shift and go to state 93

    ident                          shift and go to state 92

state 73

    (6) vars -> VARTOKEN tipo ID arr arr varciclo PTOCOM . tipociclo
    (11) tipociclo -> . tipo opciontipo
    (12) tipociclo -> . empty
    (15) tipo -> . INT
    (16) tipo -> . FLT
    (17) tipo -> . CHAR
    (110) empty -> .

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    INT             shift and go to state 21
    FLT             shift and go to state 22
    CHAR            shift and go to state 23
    VOID            reduce using rule 110 (empty -> .)
    MAIN            reduce using rule 110 (empty -> .)
    KEYIZQ          reduce using rule 110 (empty -> .)

  ! INT             [ reduce using rule 110 (empty -> .) ]
  ! FLT             [ reduce using rule 110 (empty -> .) ]
  ! CHAR            [ reduce using rule 110 (empty -> .) ]

    tipo                           shift and go to state 94
    tipociclo                      shift and go to state 95
    empty                          shift and go to state 96

state 74

    (7) varciclo -> COMA ID . arr arr varciclo
    (9) arr -> . CORIZQ CTEI CORDER
    (10) arr -> . empty
    (110) empty -> .

  ! shift/reduce conflict for CORIZQ resolved as shift
    CORIZQ          shift and go to state 36
    COMA            reduce using rule 110 (empty -> .)
    PTOCOM          reduce using rule 110 (empty -> .)

  ! CORIZQ          [ reduce using rule 110 (empty -> .) ]

    arr                            shift and go to state 97
    empty                          shift and go to state 37

state 75

    (33) bloque -> KEYIZQ bloqueopcion KEYDER .

    $end            reduce using rule 33 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    VOID            reduce using rule 33 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    INT             reduce using rule 33 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    FLT             reduce using rule 33 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    CHAR            reduce using rule 33 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    MAIN            reduce using rule 33 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    ELSE            reduce using rule 33 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    ID              reduce using rule 33 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    IF              reduce using rule 33 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    WRITE           reduce using rule 33 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    READ            reduce using rule 33 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    WHILE           reduce using rule 33 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    FOR             reduce using rule 33 (bloque -> KEYIZQ bloqueopcion KEYDER .)
    KEYDER          reduce using rule 33 (bloque -> KEYIZQ bloqueopcion KEYDER .)


state 76

    (34) bloqueopcion -> estatuto bloqueopcion .

    KEYDER          reduce using rule 34 (bloqueopcion -> estatuto bloqueopcion .)


state 77

    (52) asignacion -> ID asignacionarr . asignacionarr IGU expresion PTOCOM
    (53) asignacionarr -> . CORIZQ expresion CORDER
    (54) asignacionarr -> . empty
    (110) empty -> .

    CORIZQ          shift and go to state 79
    IGU             reduce using rule 110 (empty -> .)

    asignacionarr                  shift and go to state 98
    empty                          shift and go to state 80

state 78

    (94) llamadafunc -> ID PARIZQ . parametros PARDER PTOCOM
    (84) parametros -> . expresion cicloparametros
    (85) parametros -> . empty
    (55) expresion -> . exp expresionsig
    (110) empty -> .
    (65) exp -> . termino expciclo
    (69) termino -> . factor factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty

  ! shift/reduce conflict for ID resolved as shift
    PARDER          reduce using rule 110 (empty -> .)
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)
    PARIZQ          shift and go to state 100
    ID              shift and go to state 99
    MAS             shift and go to state 108
    MENOS           shift and go to state 109

  ! ID              [ reduce using rule 110 (empty -> .) ]

    parametros                     shift and go to state 101
    expresion                      shift and go to state 102
    empty                          shift and go to state 103
    exp                            shift and go to state 104
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    masomenos                      shift and go to state 107

state 79

    (53) asignacionarr -> CORIZQ . expresion CORDER
    (55) expresion -> . exp expresionsig
    (65) exp -> . termino expciclo
    (69) termino -> . factor factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 100
    ID              shift and go to state 99
    MAS             shift and go to state 108
    MENOS           shift and go to state 109
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    expresion                      shift and go to state 110
    exp                            shift and go to state 104
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    masomenos                      shift and go to state 107
    empty                          shift and go to state 111

state 80

    (54) asignacionarr -> empty .

    CORIZQ          reduce using rule 54 (asignacionarr -> empty .)
    IGU             reduce using rule 54 (asignacionarr -> empty .)


state 81

    (88) decision -> IF PARIZQ . expresion PARDER THEN bloque ELSE bloque
    (55) expresion -> . exp expresionsig
    (65) exp -> . termino expciclo
    (69) termino -> . factor factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 100
    ID              shift and go to state 99
    MAS             shift and go to state 108
    MENOS           shift and go to state 109
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    expresion                      shift and go to state 112
    exp                            shift and go to state 104
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    masomenos                      shift and go to state 107
    empty                          shift and go to state 111

state 82

    (89) escritura -> WRITE PARIZQ . escrituraciclo otro PARDER PTOCOM
    (90) escrituraciclo -> . CTE_STRING
    (91) escrituraciclo -> . expresion
    (55) expresion -> . exp expresionsig
    (65) exp -> . termino expciclo
    (69) termino -> . factor factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    CTE_STRING      shift and go to state 114
    PARIZQ          shift and go to state 100
    ID              shift and go to state 99
    MAS             shift and go to state 108
    MENOS           shift and go to state 109
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    escrituraciclo                 shift and go to state 113
    expresion                      shift and go to state 115
    exp                            shift and go to state 104
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    masomenos                      shift and go to state 107
    empty                          shift and go to state 111

state 83

    (95) lectura -> READ PARIZQ . iddim ciclodim PARDER PTOCOM
    (98) iddim -> . ID arrexp arrexp

    ID              shift and go to state 86

    iddim                          shift and go to state 116

state 84

    (103) condicional -> WHILE PARIZQ . expresion PARDER DO bloque
    (55) expresion -> . exp expresionsig
    (65) exp -> . termino expciclo
    (69) termino -> . factor factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 100
    ID              shift and go to state 99
    MAS             shift and go to state 108
    MENOS           shift and go to state 109
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    expresion                      shift and go to state 117
    exp                            shift and go to state 104
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    masomenos                      shift and go to state 107
    empty                          shift and go to state 111

state 85

    (104) nocondicional -> FOR iddim . IGU expresion TO expresion DO bloque

    IGU             shift and go to state 118


state 86

    (98) iddim -> ID . arrexp arrexp
    (99) arrexp -> . CORIZQ expresion CORDER
    (100) arrexp -> . empty
    (110) empty -> .

  ! shift/reduce conflict for CORIZQ resolved as shift
    CORIZQ          shift and go to state 120
    IGU             reduce using rule 110 (empty -> .)
    COMA            reduce using rule 110 (empty -> .)
    PARDER          reduce using rule 110 (empty -> .)
    MULT            reduce using rule 110 (empty -> .)
    DIV             reduce using rule 110 (empty -> .)
    MAS             reduce using rule 110 (empty -> .)
    MENOS           reduce using rule 110 (empty -> .)
    MAY             reduce using rule 110 (empty -> .)
    MEN             reduce using rule 110 (empty -> .)
    DIF             reduce using rule 110 (empty -> .)
    IGUIGU          reduce using rule 110 (empty -> .)
    AND             reduce using rule 110 (empty -> .)
    OR              reduce using rule 110 (empty -> .)
    CORDER          reduce using rule 110 (empty -> .)
    TO              reduce using rule 110 (empty -> .)
    PTOCOM          reduce using rule 110 (empty -> .)
    DO              reduce using rule 110 (empty -> .)

  ! CORIZQ          [ reduce using rule 110 (empty -> .) ]

    arrexp                         shift and go to state 119
    empty                          shift and go to state 121

state 87

    (24) funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple . PARDER opvars bloque

    PARDER          shift and go to state 122


state 88

    (29) funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER . opvars bloquefunc
    (2) opvars -> . vars
    (3) opvars -> . empty
    (6) vars -> . VARTOKEN tipo ID arr arr varciclo PTOCOM tipociclo
    (110) empty -> .

    VARTOKEN        shift and go to state 9
    KEYIZQ          reduce using rule 110 (empty -> .)

    opvars                         shift and go to state 123
    vars                           shift and go to state 7
    empty                          shift and go to state 8

state 89

    (25) opcionvarsimple -> varsimple ciclovarsimple .

    PARDER          reduce using rule 25 (opcionvarsimple -> varsimple ciclovarsimple .)


state 90

    (27) ciclovarsimple -> COMA . varsimple ciclovarsimple
    (21) varsimple -> . tipo ident
    (15) tipo -> . INT
    (16) tipo -> . FLT
    (17) tipo -> . CHAR

    INT             shift and go to state 21
    FLT             shift and go to state 22
    CHAR            shift and go to state 23

    varsimple                      shift and go to state 124
    tipo                           shift and go to state 72

state 91

    (28) ciclovarsimple -> empty .

    PARDER          reduce using rule 28 (ciclovarsimple -> empty .)


state 92

    (21) varsimple -> tipo ident .

    COMA            reduce using rule 21 (varsimple -> tipo ident .)
    PARDER          reduce using rule 21 (varsimple -> tipo ident .)


state 93

    (30) ident -> ID . arrini arrini
    (31) arrini -> . CORIZQ CORDER
    (32) arrini -> . empty
    (110) empty -> .

  ! shift/reduce conflict for CORIZQ resolved as shift
    CORIZQ          shift and go to state 126
    COMA            reduce using rule 110 (empty -> .)
    PARDER          reduce using rule 110 (empty -> .)

  ! CORIZQ          [ reduce using rule 110 (empty -> .) ]

    arrini                         shift and go to state 125
    empty                          shift and go to state 127

state 94

    (11) tipociclo -> tipo . opciontipo
    (13) opciontipo -> . ID arr arr varciclo PTOCOM tipociclo
    (14) opciontipo -> . MODULE ID PARIZQ opcionvarsimple PARDER opvars bloquefunc

    ID              shift and go to state 129
    MODULE          shift and go to state 130

    opciontipo                     shift and go to state 128

state 95

    (6) vars -> VARTOKEN tipo ID arr arr varciclo PTOCOM tipociclo .

    VOID            reduce using rule 6 (vars -> VARTOKEN tipo ID arr arr varciclo PTOCOM tipociclo .)
    INT             reduce using rule 6 (vars -> VARTOKEN tipo ID arr arr varciclo PTOCOM tipociclo .)
    FLT             reduce using rule 6 (vars -> VARTOKEN tipo ID arr arr varciclo PTOCOM tipociclo .)
    CHAR            reduce using rule 6 (vars -> VARTOKEN tipo ID arr arr varciclo PTOCOM tipociclo .)
    MAIN            reduce using rule 6 (vars -> VARTOKEN tipo ID arr arr varciclo PTOCOM tipociclo .)
    KEYIZQ          reduce using rule 6 (vars -> VARTOKEN tipo ID arr arr varciclo PTOCOM tipociclo .)


state 96

    (12) tipociclo -> empty .

    VOID            reduce using rule 12 (tipociclo -> empty .)
    INT             reduce using rule 12 (tipociclo -> empty .)
    FLT             reduce using rule 12 (tipociclo -> empty .)
    CHAR            reduce using rule 12 (tipociclo -> empty .)
    MAIN            reduce using rule 12 (tipociclo -> empty .)
    KEYIZQ          reduce using rule 12 (tipociclo -> empty .)


state 97

    (7) varciclo -> COMA ID arr . arr varciclo
    (9) arr -> . CORIZQ CTEI CORDER
    (10) arr -> . empty
    (110) empty -> .

    CORIZQ          shift and go to state 36
    COMA            reduce using rule 110 (empty -> .)
    PTOCOM          reduce using rule 110 (empty -> .)

    arr                            shift and go to state 131
    empty                          shift and go to state 37

state 98

    (52) asignacion -> ID asignacionarr asignacionarr . IGU expresion PTOCOM

    IGU             shift and go to state 132


state 99

    (75) factor -> ID . opcionid
    (79) opcionid -> . arrexp arrexp
    (80) opcionid -> . PARIZQ parametros PARDER
    (99) arrexp -> . CORIZQ expresion CORDER
    (100) arrexp -> . empty
    (110) empty -> .

  ! shift/reduce conflict for CORIZQ resolved as shift
    PARIZQ          shift and go to state 135
    CORIZQ          shift and go to state 120
    MULT            reduce using rule 110 (empty -> .)
    DIV             reduce using rule 110 (empty -> .)
    MAS             reduce using rule 110 (empty -> .)
    MENOS           reduce using rule 110 (empty -> .)
    MAY             reduce using rule 110 (empty -> .)
    MEN             reduce using rule 110 (empty -> .)
    DIF             reduce using rule 110 (empty -> .)
    IGUIGU          reduce using rule 110 (empty -> .)
    AND             reduce using rule 110 (empty -> .)
    OR              reduce using rule 110 (empty -> .)
    COMA            reduce using rule 110 (empty -> .)
    PARDER          reduce using rule 110 (empty -> .)
    CORDER          reduce using rule 110 (empty -> .)
    TO              reduce using rule 110 (empty -> .)
    PTOCOM          reduce using rule 110 (empty -> .)
    DO              reduce using rule 110 (empty -> .)

  ! CORIZQ          [ reduce using rule 110 (empty -> .) ]

    opcionid                       shift and go to state 133
    arrexp                         shift and go to state 134
    empty                          shift and go to state 121

state 100

    (73) factor -> PARIZQ . expresion PARDER
    (55) expresion -> . exp expresionsig
    (65) exp -> . termino expciclo
    (69) termino -> . factor factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 100
    ID              shift and go to state 99
    MAS             shift and go to state 108
    MENOS           shift and go to state 109
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    expresion                      shift and go to state 136
    exp                            shift and go to state 104
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    masomenos                      shift and go to state 107
    empty                          shift and go to state 111

state 101

    (94) llamadafunc -> ID PARIZQ parametros . PARDER PTOCOM

    PARDER          shift and go to state 137


state 102

    (84) parametros -> expresion . cicloparametros
    (86) cicloparametros -> . COMA expresion cicloparametros
    (87) cicloparametros -> . empty
    (110) empty -> .

    COMA            shift and go to state 139
    PARDER          reduce using rule 110 (empty -> .)

    cicloparametros                shift and go to state 138
    empty                          shift and go to state 140

state 103

    (85) parametros -> empty .
    (78) masomenos -> empty .

    PARDER          reduce using rule 85 (parametros -> empty .)
    CTEI            reduce using rule 78 (masomenos -> empty .)
    CTEF            reduce using rule 78 (masomenos -> empty .)
    ID              reduce using rule 78 (masomenos -> empty .)


state 104

    (55) expresion -> exp . expresionsig
    (56) expresionsig -> . MAY expresionsigequal exp
    (57) expresionsig -> . MEN expresionsigequal exp
    (58) expresionsig -> . DIF exp
    (59) expresionsig -> . IGUIGU exp
    (60) expresionsig -> . AND exp
    (61) expresionsig -> . OR exp
    (62) expresionsig -> . empty
    (110) empty -> .

    MAY             shift and go to state 142
    MEN             shift and go to state 143
    DIF             shift and go to state 144
    IGUIGU          shift and go to state 145
    AND             shift and go to state 146
    OR              shift and go to state 147
    COMA            reduce using rule 110 (empty -> .)
    PARDER          reduce using rule 110 (empty -> .)
    CORDER          reduce using rule 110 (empty -> .)
    TO              reduce using rule 110 (empty -> .)
    PTOCOM          reduce using rule 110 (empty -> .)
    DO              reduce using rule 110 (empty -> .)

    expresionsig                   shift and go to state 141
    empty                          shift and go to state 148

state 105

    (65) exp -> termino . expciclo
    (66) expciclo -> . MAS exp
    (67) expciclo -> . MENOS exp
    (68) expciclo -> . empty
    (110) empty -> .

    MAS             shift and go to state 150
    MENOS           shift and go to state 151
    MAY             reduce using rule 110 (empty -> .)
    MEN             reduce using rule 110 (empty -> .)
    DIF             reduce using rule 110 (empty -> .)
    IGUIGU          reduce using rule 110 (empty -> .)
    AND             reduce using rule 110 (empty -> .)
    OR              reduce using rule 110 (empty -> .)
    COMA            reduce using rule 110 (empty -> .)
    PARDER          reduce using rule 110 (empty -> .)
    CORDER          reduce using rule 110 (empty -> .)
    TO              reduce using rule 110 (empty -> .)
    PTOCOM          reduce using rule 110 (empty -> .)
    DO              reduce using rule 110 (empty -> .)

    expciclo                       shift and go to state 149
    empty                          shift and go to state 152

state 106

    (69) termino -> factor . factorciclo
    (70) factorciclo -> . MULT termino
    (71) factorciclo -> . DIV termino
    (72) factorciclo -> . empty
    (110) empty -> .

    MULT            shift and go to state 154
    DIV             shift and go to state 155
    MAS             reduce using rule 110 (empty -> .)
    MENOS           reduce using rule 110 (empty -> .)
    MAY             reduce using rule 110 (empty -> .)
    MEN             reduce using rule 110 (empty -> .)
    DIF             reduce using rule 110 (empty -> .)
    IGUIGU          reduce using rule 110 (empty -> .)
    AND             reduce using rule 110 (empty -> .)
    OR              reduce using rule 110 (empty -> .)
    COMA            reduce using rule 110 (empty -> .)
    PARDER          reduce using rule 110 (empty -> .)
    CORDER          reduce using rule 110 (empty -> .)
    TO              reduce using rule 110 (empty -> .)
    PTOCOM          reduce using rule 110 (empty -> .)
    DO              reduce using rule 110 (empty -> .)

    factorciclo                    shift and go to state 153
    empty                          shift and go to state 156

state 107

    (74) factor -> masomenos . varcte
    (81) varcte -> . iddim
    (82) varcte -> . CTEI
    (83) varcte -> . CTEF
    (98) iddim -> . ID arrexp arrexp

    CTEI            shift and go to state 159
    CTEF            shift and go to state 160
    ID              shift and go to state 86

    varcte                         shift and go to state 157
    iddim                          shift and go to state 158

state 108

    (76) masomenos -> MAS .

    CTEI            reduce using rule 76 (masomenos -> MAS .)
    CTEF            reduce using rule 76 (masomenos -> MAS .)
    ID              reduce using rule 76 (masomenos -> MAS .)


state 109

    (77) masomenos -> MENOS .

    CTEI            reduce using rule 77 (masomenos -> MENOS .)
    CTEF            reduce using rule 77 (masomenos -> MENOS .)
    ID              reduce using rule 77 (masomenos -> MENOS .)


state 110

    (53) asignacionarr -> CORIZQ expresion . CORDER

    CORDER          shift and go to state 161


state 111

    (78) masomenos -> empty .

    CTEI            reduce using rule 78 (masomenos -> empty .)
    CTEF            reduce using rule 78 (masomenos -> empty .)
    ID              reduce using rule 78 (masomenos -> empty .)


state 112

    (88) decision -> IF PARIZQ expresion . PARDER THEN bloque ELSE bloque

    PARDER          shift and go to state 162


state 113

    (89) escritura -> WRITE PARIZQ escrituraciclo . otro PARDER PTOCOM
    (92) otro -> . COMA escrituraciclo otro
    (93) otro -> . empty
    (110) empty -> .

    COMA            shift and go to state 164
    PARDER          reduce using rule 110 (empty -> .)

    otro                           shift and go to state 163
    empty                          shift and go to state 165

state 114

    (90) escrituraciclo -> CTE_STRING .

    COMA            reduce using rule 90 (escrituraciclo -> CTE_STRING .)
    PARDER          reduce using rule 90 (escrituraciclo -> CTE_STRING .)


state 115

    (91) escrituraciclo -> expresion .

    COMA            reduce using rule 91 (escrituraciclo -> expresion .)
    PARDER          reduce using rule 91 (escrituraciclo -> expresion .)


state 116

    (95) lectura -> READ PARIZQ iddim . ciclodim PARDER PTOCOM
    (96) ciclodim -> . COMA iddim ciclodim
    (97) ciclodim -> . empty
    (110) empty -> .

    COMA            shift and go to state 167
    PARDER          reduce using rule 110 (empty -> .)

    ciclodim                       shift and go to state 166
    empty                          shift and go to state 168

state 117

    (103) condicional -> WHILE PARIZQ expresion . PARDER DO bloque

    PARDER          shift and go to state 169


state 118

    (104) nocondicional -> FOR iddim IGU . expresion TO expresion DO bloque
    (55) expresion -> . exp expresionsig
    (65) exp -> . termino expciclo
    (69) termino -> . factor factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 100
    ID              shift and go to state 99
    MAS             shift and go to state 108
    MENOS           shift and go to state 109
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    expresion                      shift and go to state 170
    exp                            shift and go to state 104
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    masomenos                      shift and go to state 107
    empty                          shift and go to state 111

state 119

    (98) iddim -> ID arrexp . arrexp
    (99) arrexp -> . CORIZQ expresion CORDER
    (100) arrexp -> . empty
    (110) empty -> .

    CORIZQ          shift and go to state 120
    IGU             reduce using rule 110 (empty -> .)
    COMA            reduce using rule 110 (empty -> .)
    PARDER          reduce using rule 110 (empty -> .)
    MULT            reduce using rule 110 (empty -> .)
    DIV             reduce using rule 110 (empty -> .)
    MAS             reduce using rule 110 (empty -> .)
    MENOS           reduce using rule 110 (empty -> .)
    MAY             reduce using rule 110 (empty -> .)
    MEN             reduce using rule 110 (empty -> .)
    DIF             reduce using rule 110 (empty -> .)
    IGUIGU          reduce using rule 110 (empty -> .)
    AND             reduce using rule 110 (empty -> .)
    OR              reduce using rule 110 (empty -> .)
    CORDER          reduce using rule 110 (empty -> .)
    TO              reduce using rule 110 (empty -> .)
    PTOCOM          reduce using rule 110 (empty -> .)
    DO              reduce using rule 110 (empty -> .)

    arrexp                         shift and go to state 171
    empty                          shift and go to state 121

state 120

    (99) arrexp -> CORIZQ . expresion CORDER
    (55) expresion -> . exp expresionsig
    (65) exp -> . termino expciclo
    (69) termino -> . factor factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 100
    ID              shift and go to state 99
    MAS             shift and go to state 108
    MENOS           shift and go to state 109
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    expresion                      shift and go to state 172
    exp                            shift and go to state 104
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    masomenos                      shift and go to state 107
    empty                          shift and go to state 111

state 121

    (100) arrexp -> empty .

    CORIZQ          reduce using rule 100 (arrexp -> empty .)
    IGU             reduce using rule 100 (arrexp -> empty .)
    COMA            reduce using rule 100 (arrexp -> empty .)
    PARDER          reduce using rule 100 (arrexp -> empty .)
    MULT            reduce using rule 100 (arrexp -> empty .)
    DIV             reduce using rule 100 (arrexp -> empty .)
    MAS             reduce using rule 100 (arrexp -> empty .)
    MENOS           reduce using rule 100 (arrexp -> empty .)
    MAY             reduce using rule 100 (arrexp -> empty .)
    MEN             reduce using rule 100 (arrexp -> empty .)
    DIF             reduce using rule 100 (arrexp -> empty .)
    IGUIGU          reduce using rule 100 (arrexp -> empty .)
    AND             reduce using rule 100 (arrexp -> empty .)
    OR              reduce using rule 100 (arrexp -> empty .)
    CORDER          reduce using rule 100 (arrexp -> empty .)
    TO              reduce using rule 100 (arrexp -> empty .)
    PTOCOM          reduce using rule 100 (arrexp -> empty .)
    DO              reduce using rule 100 (arrexp -> empty .)


state 122

    (24) funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER . opvars bloque
    (2) opvars -> . vars
    (3) opvars -> . empty
    (6) vars -> . VARTOKEN tipo ID arr arr varciclo PTOCOM tipociclo
    (110) empty -> .

    VARTOKEN        shift and go to state 9
    KEYIZQ          reduce using rule 110 (empty -> .)

    opvars                         shift and go to state 173
    vars                           shift and go to state 7
    empty                          shift and go to state 8

state 123

    (29) funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars . bloquefunc
    (36) bloquefunc -> . KEYIZQ bloqueopcionfunc KEYDER

    KEYIZQ          shift and go to state 175

    bloquefunc                     shift and go to state 174

state 124

    (27) ciclovarsimple -> COMA varsimple . ciclovarsimple
    (27) ciclovarsimple -> . COMA varsimple ciclovarsimple
    (28) ciclovarsimple -> . empty
    (110) empty -> .

    COMA            shift and go to state 90
    PARDER          reduce using rule 110 (empty -> .)

    ciclovarsimple                 shift and go to state 176
    empty                          shift and go to state 91

state 125

    (30) ident -> ID arrini . arrini
    (31) arrini -> . CORIZQ CORDER
    (32) arrini -> . empty
    (110) empty -> .

    CORIZQ          shift and go to state 126
    COMA            reduce using rule 110 (empty -> .)
    PARDER          reduce using rule 110 (empty -> .)

    arrini                         shift and go to state 177
    empty                          shift and go to state 127

state 126

    (31) arrini -> CORIZQ . CORDER

    CORDER          shift and go to state 178


state 127

    (32) arrini -> empty .

    CORIZQ          reduce using rule 32 (arrini -> empty .)
    COMA            reduce using rule 32 (arrini -> empty .)
    PARDER          reduce using rule 32 (arrini -> empty .)


state 128

    (11) tipociclo -> tipo opciontipo .

    VOID            reduce using rule 11 (tipociclo -> tipo opciontipo .)
    INT             reduce using rule 11 (tipociclo -> tipo opciontipo .)
    FLT             reduce using rule 11 (tipociclo -> tipo opciontipo .)
    CHAR            reduce using rule 11 (tipociclo -> tipo opciontipo .)
    MAIN            reduce using rule 11 (tipociclo -> tipo opciontipo .)
    KEYIZQ          reduce using rule 11 (tipociclo -> tipo opciontipo .)


state 129

    (13) opciontipo -> ID . arr arr varciclo PTOCOM tipociclo
    (9) arr -> . CORIZQ CTEI CORDER
    (10) arr -> . empty
    (110) empty -> .

  ! shift/reduce conflict for CORIZQ resolved as shift
    CORIZQ          shift and go to state 36
    COMA            reduce using rule 110 (empty -> .)
    PTOCOM          reduce using rule 110 (empty -> .)

  ! CORIZQ          [ reduce using rule 110 (empty -> .) ]

    arr                            shift and go to state 179
    empty                          shift and go to state 37

state 130

    (14) opciontipo -> MODULE . ID PARIZQ opcionvarsimple PARDER opvars bloquefunc

    ID              shift and go to state 180


state 131

    (7) varciclo -> COMA ID arr arr . varciclo
    (7) varciclo -> . COMA ID arr arr varciclo
    (8) varciclo -> . empty
    (110) empty -> .

    COMA            shift and go to state 48
    PTOCOM          reduce using rule 110 (empty -> .)

    varciclo                       shift and go to state 181
    empty                          shift and go to state 49

state 132

    (52) asignacion -> ID asignacionarr asignacionarr IGU . expresion PTOCOM
    (55) expresion -> . exp expresionsig
    (65) exp -> . termino expciclo
    (69) termino -> . factor factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 100
    ID              shift and go to state 99
    MAS             shift and go to state 108
    MENOS           shift and go to state 109
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    expresion                      shift and go to state 182
    exp                            shift and go to state 104
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    masomenos                      shift and go to state 107
    empty                          shift and go to state 111

state 133

    (75) factor -> ID opcionid .

    MULT            reduce using rule 75 (factor -> ID opcionid .)
    DIV             reduce using rule 75 (factor -> ID opcionid .)
    MAS             reduce using rule 75 (factor -> ID opcionid .)
    MENOS           reduce using rule 75 (factor -> ID opcionid .)
    MAY             reduce using rule 75 (factor -> ID opcionid .)
    MEN             reduce using rule 75 (factor -> ID opcionid .)
    DIF             reduce using rule 75 (factor -> ID opcionid .)
    IGUIGU          reduce using rule 75 (factor -> ID opcionid .)
    AND             reduce using rule 75 (factor -> ID opcionid .)
    OR              reduce using rule 75 (factor -> ID opcionid .)
    COMA            reduce using rule 75 (factor -> ID opcionid .)
    PARDER          reduce using rule 75 (factor -> ID opcionid .)
    CORDER          reduce using rule 75 (factor -> ID opcionid .)
    TO              reduce using rule 75 (factor -> ID opcionid .)
    PTOCOM          reduce using rule 75 (factor -> ID opcionid .)
    DO              reduce using rule 75 (factor -> ID opcionid .)


state 134

    (79) opcionid -> arrexp . arrexp
    (99) arrexp -> . CORIZQ expresion CORDER
    (100) arrexp -> . empty
    (110) empty -> .

    CORIZQ          shift and go to state 120
    MULT            reduce using rule 110 (empty -> .)
    DIV             reduce using rule 110 (empty -> .)
    MAS             reduce using rule 110 (empty -> .)
    MENOS           reduce using rule 110 (empty -> .)
    MAY             reduce using rule 110 (empty -> .)
    MEN             reduce using rule 110 (empty -> .)
    DIF             reduce using rule 110 (empty -> .)
    IGUIGU          reduce using rule 110 (empty -> .)
    AND             reduce using rule 110 (empty -> .)
    OR              reduce using rule 110 (empty -> .)
    COMA            reduce using rule 110 (empty -> .)
    PARDER          reduce using rule 110 (empty -> .)
    CORDER          reduce using rule 110 (empty -> .)
    TO              reduce using rule 110 (empty -> .)
    PTOCOM          reduce using rule 110 (empty -> .)
    DO              reduce using rule 110 (empty -> .)

    arrexp                         shift and go to state 183
    empty                          shift and go to state 121

state 135

    (80) opcionid -> PARIZQ . parametros PARDER
    (84) parametros -> . expresion cicloparametros
    (85) parametros -> . empty
    (55) expresion -> . exp expresionsig
    (110) empty -> .
    (65) exp -> . termino expciclo
    (69) termino -> . factor factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty

  ! shift/reduce conflict for ID resolved as shift
    PARDER          reduce using rule 110 (empty -> .)
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)
    PARIZQ          shift and go to state 100
    ID              shift and go to state 99
    MAS             shift and go to state 108
    MENOS           shift and go to state 109

  ! ID              [ reduce using rule 110 (empty -> .) ]

    parametros                     shift and go to state 184
    expresion                      shift and go to state 102
    empty                          shift and go to state 103
    exp                            shift and go to state 104
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    masomenos                      shift and go to state 107

state 136

    (73) factor -> PARIZQ expresion . PARDER

    PARDER          shift and go to state 185


state 137

    (94) llamadafunc -> ID PARIZQ parametros PARDER . PTOCOM

    PTOCOM          shift and go to state 186


state 138

    (84) parametros -> expresion cicloparametros .

    PARDER          reduce using rule 84 (parametros -> expresion cicloparametros .)


state 139

    (86) cicloparametros -> COMA . expresion cicloparametros
    (55) expresion -> . exp expresionsig
    (65) exp -> . termino expciclo
    (69) termino -> . factor factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 100
    ID              shift and go to state 99
    MAS             shift and go to state 108
    MENOS           shift and go to state 109
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    expresion                      shift and go to state 187
    exp                            shift and go to state 104
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    masomenos                      shift and go to state 107
    empty                          shift and go to state 111

state 140

    (87) cicloparametros -> empty .

    PARDER          reduce using rule 87 (cicloparametros -> empty .)


state 141

    (55) expresion -> exp expresionsig .

    COMA            reduce using rule 55 (expresion -> exp expresionsig .)
    PARDER          reduce using rule 55 (expresion -> exp expresionsig .)
    CORDER          reduce using rule 55 (expresion -> exp expresionsig .)
    TO              reduce using rule 55 (expresion -> exp expresionsig .)
    PTOCOM          reduce using rule 55 (expresion -> exp expresionsig .)
    DO              reduce using rule 55 (expresion -> exp expresionsig .)


state 142

    (56) expresionsig -> MAY . expresionsigequal exp
    (63) expresionsigequal -> . IGU
    (64) expresionsigequal -> . empty
    (110) empty -> .

    IGU             shift and go to state 189
    PARIZQ          reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    MAS             reduce using rule 110 (empty -> .)
    MENOS           reduce using rule 110 (empty -> .)
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

    expresionsigequal              shift and go to state 188
    empty                          shift and go to state 190

state 143

    (57) expresionsig -> MEN . expresionsigequal exp
    (63) expresionsigequal -> . IGU
    (64) expresionsigequal -> . empty
    (110) empty -> .

    IGU             shift and go to state 189
    PARIZQ          reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    MAS             reduce using rule 110 (empty -> .)
    MENOS           reduce using rule 110 (empty -> .)
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

    expresionsigequal              shift and go to state 191
    empty                          shift and go to state 190

state 144

    (58) expresionsig -> DIF . exp
    (65) exp -> . termino expciclo
    (69) termino -> . factor factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 100
    ID              shift and go to state 99
    MAS             shift and go to state 108
    MENOS           shift and go to state 109
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    exp                            shift and go to state 192
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    masomenos                      shift and go to state 107
    empty                          shift and go to state 111

state 145

    (59) expresionsig -> IGUIGU . exp
    (65) exp -> . termino expciclo
    (69) termino -> . factor factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 100
    ID              shift and go to state 99
    MAS             shift and go to state 108
    MENOS           shift and go to state 109
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    exp                            shift and go to state 193
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    masomenos                      shift and go to state 107
    empty                          shift and go to state 111

state 146

    (60) expresionsig -> AND . exp
    (65) exp -> . termino expciclo
    (69) termino -> . factor factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 100
    ID              shift and go to state 99
    MAS             shift and go to state 108
    MENOS           shift and go to state 109
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    exp                            shift and go to state 194
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    masomenos                      shift and go to state 107
    empty                          shift and go to state 111

state 147

    (61) expresionsig -> OR . exp
    (65) exp -> . termino expciclo
    (69) termino -> . factor factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 100
    ID              shift and go to state 99
    MAS             shift and go to state 108
    MENOS           shift and go to state 109
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    exp                            shift and go to state 195
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    masomenos                      shift and go to state 107
    empty                          shift and go to state 111

state 148

    (62) expresionsig -> empty .

    COMA            reduce using rule 62 (expresionsig -> empty .)
    PARDER          reduce using rule 62 (expresionsig -> empty .)
    CORDER          reduce using rule 62 (expresionsig -> empty .)
    TO              reduce using rule 62 (expresionsig -> empty .)
    PTOCOM          reduce using rule 62 (expresionsig -> empty .)
    DO              reduce using rule 62 (expresionsig -> empty .)


state 149

    (65) exp -> termino expciclo .

    MAY             reduce using rule 65 (exp -> termino expciclo .)
    MEN             reduce using rule 65 (exp -> termino expciclo .)
    DIF             reduce using rule 65 (exp -> termino expciclo .)
    IGUIGU          reduce using rule 65 (exp -> termino expciclo .)
    AND             reduce using rule 65 (exp -> termino expciclo .)
    OR              reduce using rule 65 (exp -> termino expciclo .)
    COMA            reduce using rule 65 (exp -> termino expciclo .)
    PARDER          reduce using rule 65 (exp -> termino expciclo .)
    CORDER          reduce using rule 65 (exp -> termino expciclo .)
    TO              reduce using rule 65 (exp -> termino expciclo .)
    PTOCOM          reduce using rule 65 (exp -> termino expciclo .)
    DO              reduce using rule 65 (exp -> termino expciclo .)


state 150

    (66) expciclo -> MAS . exp
    (65) exp -> . termino expciclo
    (69) termino -> . factor factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 100
    ID              shift and go to state 99
    MAS             shift and go to state 108
    MENOS           shift and go to state 109
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    exp                            shift and go to state 196
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    masomenos                      shift and go to state 107
    empty                          shift and go to state 111

state 151

    (67) expciclo -> MENOS . exp
    (65) exp -> . termino expciclo
    (69) termino -> . factor factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 100
    ID              shift and go to state 99
    MAS             shift and go to state 108
    MENOS           shift and go to state 109
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    exp                            shift and go to state 197
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    masomenos                      shift and go to state 107
    empty                          shift and go to state 111

state 152

    (68) expciclo -> empty .

    MAY             reduce using rule 68 (expciclo -> empty .)
    MEN             reduce using rule 68 (expciclo -> empty .)
    DIF             reduce using rule 68 (expciclo -> empty .)
    IGUIGU          reduce using rule 68 (expciclo -> empty .)
    AND             reduce using rule 68 (expciclo -> empty .)
    OR              reduce using rule 68 (expciclo -> empty .)
    COMA            reduce using rule 68 (expciclo -> empty .)
    PARDER          reduce using rule 68 (expciclo -> empty .)
    CORDER          reduce using rule 68 (expciclo -> empty .)
    TO              reduce using rule 68 (expciclo -> empty .)
    PTOCOM          reduce using rule 68 (expciclo -> empty .)
    DO              reduce using rule 68 (expciclo -> empty .)


state 153

    (69) termino -> factor factorciclo .

    MAS             reduce using rule 69 (termino -> factor factorciclo .)
    MENOS           reduce using rule 69 (termino -> factor factorciclo .)
    MAY             reduce using rule 69 (termino -> factor factorciclo .)
    MEN             reduce using rule 69 (termino -> factor factorciclo .)
    DIF             reduce using rule 69 (termino -> factor factorciclo .)
    IGUIGU          reduce using rule 69 (termino -> factor factorciclo .)
    AND             reduce using rule 69 (termino -> factor factorciclo .)
    OR              reduce using rule 69 (termino -> factor factorciclo .)
    COMA            reduce using rule 69 (termino -> factor factorciclo .)
    PARDER          reduce using rule 69 (termino -> factor factorciclo .)
    CORDER          reduce using rule 69 (termino -> factor factorciclo .)
    TO              reduce using rule 69 (termino -> factor factorciclo .)
    PTOCOM          reduce using rule 69 (termino -> factor factorciclo .)
    DO              reduce using rule 69 (termino -> factor factorciclo .)


state 154

    (70) factorciclo -> MULT . termino
    (69) termino -> . factor factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 100
    ID              shift and go to state 99
    MAS             shift and go to state 108
    MENOS           shift and go to state 109
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    termino                        shift and go to state 198
    factor                         shift and go to state 106
    masomenos                      shift and go to state 107
    empty                          shift and go to state 111

state 155

    (71) factorciclo -> DIV . termino
    (69) termino -> . factor factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 100
    ID              shift and go to state 99
    MAS             shift and go to state 108
    MENOS           shift and go to state 109
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    termino                        shift and go to state 199
    factor                         shift and go to state 106
    masomenos                      shift and go to state 107
    empty                          shift and go to state 111

state 156

    (72) factorciclo -> empty .

    MAS             reduce using rule 72 (factorciclo -> empty .)
    MENOS           reduce using rule 72 (factorciclo -> empty .)
    MAY             reduce using rule 72 (factorciclo -> empty .)
    MEN             reduce using rule 72 (factorciclo -> empty .)
    DIF             reduce using rule 72 (factorciclo -> empty .)
    IGUIGU          reduce using rule 72 (factorciclo -> empty .)
    AND             reduce using rule 72 (factorciclo -> empty .)
    OR              reduce using rule 72 (factorciclo -> empty .)
    COMA            reduce using rule 72 (factorciclo -> empty .)
    PARDER          reduce using rule 72 (factorciclo -> empty .)
    CORDER          reduce using rule 72 (factorciclo -> empty .)
    TO              reduce using rule 72 (factorciclo -> empty .)
    PTOCOM          reduce using rule 72 (factorciclo -> empty .)
    DO              reduce using rule 72 (factorciclo -> empty .)


state 157

    (74) factor -> masomenos varcte .

    MULT            reduce using rule 74 (factor -> masomenos varcte .)
    DIV             reduce using rule 74 (factor -> masomenos varcte .)
    MAS             reduce using rule 74 (factor -> masomenos varcte .)
    MENOS           reduce using rule 74 (factor -> masomenos varcte .)
    MAY             reduce using rule 74 (factor -> masomenos varcte .)
    MEN             reduce using rule 74 (factor -> masomenos varcte .)
    DIF             reduce using rule 74 (factor -> masomenos varcte .)
    IGUIGU          reduce using rule 74 (factor -> masomenos varcte .)
    AND             reduce using rule 74 (factor -> masomenos varcte .)
    OR              reduce using rule 74 (factor -> masomenos varcte .)
    COMA            reduce using rule 74 (factor -> masomenos varcte .)
    PARDER          reduce using rule 74 (factor -> masomenos varcte .)
    CORDER          reduce using rule 74 (factor -> masomenos varcte .)
    TO              reduce using rule 74 (factor -> masomenos varcte .)
    PTOCOM          reduce using rule 74 (factor -> masomenos varcte .)
    DO              reduce using rule 74 (factor -> masomenos varcte .)


state 158

    (81) varcte -> iddim .

    MULT            reduce using rule 81 (varcte -> iddim .)
    DIV             reduce using rule 81 (varcte -> iddim .)
    MAS             reduce using rule 81 (varcte -> iddim .)
    MENOS           reduce using rule 81 (varcte -> iddim .)
    MAY             reduce using rule 81 (varcte -> iddim .)
    MEN             reduce using rule 81 (varcte -> iddim .)
    DIF             reduce using rule 81 (varcte -> iddim .)
    IGUIGU          reduce using rule 81 (varcte -> iddim .)
    AND             reduce using rule 81 (varcte -> iddim .)
    OR              reduce using rule 81 (varcte -> iddim .)
    COMA            reduce using rule 81 (varcte -> iddim .)
    PARDER          reduce using rule 81 (varcte -> iddim .)
    CORDER          reduce using rule 81 (varcte -> iddim .)
    TO              reduce using rule 81 (varcte -> iddim .)
    PTOCOM          reduce using rule 81 (varcte -> iddim .)
    DO              reduce using rule 81 (varcte -> iddim .)


state 159

    (82) varcte -> CTEI .

    MULT            reduce using rule 82 (varcte -> CTEI .)
    DIV             reduce using rule 82 (varcte -> CTEI .)
    MAS             reduce using rule 82 (varcte -> CTEI .)
    MENOS           reduce using rule 82 (varcte -> CTEI .)
    MAY             reduce using rule 82 (varcte -> CTEI .)
    MEN             reduce using rule 82 (varcte -> CTEI .)
    DIF             reduce using rule 82 (varcte -> CTEI .)
    IGUIGU          reduce using rule 82 (varcte -> CTEI .)
    AND             reduce using rule 82 (varcte -> CTEI .)
    OR              reduce using rule 82 (varcte -> CTEI .)
    COMA            reduce using rule 82 (varcte -> CTEI .)
    PARDER          reduce using rule 82 (varcte -> CTEI .)
    CORDER          reduce using rule 82 (varcte -> CTEI .)
    TO              reduce using rule 82 (varcte -> CTEI .)
    PTOCOM          reduce using rule 82 (varcte -> CTEI .)
    DO              reduce using rule 82 (varcte -> CTEI .)


state 160

    (83) varcte -> CTEF .

    MULT            reduce using rule 83 (varcte -> CTEF .)
    DIV             reduce using rule 83 (varcte -> CTEF .)
    MAS             reduce using rule 83 (varcte -> CTEF .)
    MENOS           reduce using rule 83 (varcte -> CTEF .)
    MAY             reduce using rule 83 (varcte -> CTEF .)
    MEN             reduce using rule 83 (varcte -> CTEF .)
    DIF             reduce using rule 83 (varcte -> CTEF .)
    IGUIGU          reduce using rule 83 (varcte -> CTEF .)
    AND             reduce using rule 83 (varcte -> CTEF .)
    OR              reduce using rule 83 (varcte -> CTEF .)
    COMA            reduce using rule 83 (varcte -> CTEF .)
    PARDER          reduce using rule 83 (varcte -> CTEF .)
    CORDER          reduce using rule 83 (varcte -> CTEF .)
    TO              reduce using rule 83 (varcte -> CTEF .)
    PTOCOM          reduce using rule 83 (varcte -> CTEF .)
    DO              reduce using rule 83 (varcte -> CTEF .)


state 161

    (53) asignacionarr -> CORIZQ expresion CORDER .

    CORIZQ          reduce using rule 53 (asignacionarr -> CORIZQ expresion CORDER .)
    IGU             reduce using rule 53 (asignacionarr -> CORIZQ expresion CORDER .)


state 162

    (88) decision -> IF PARIZQ expresion PARDER . THEN bloque ELSE bloque

    THEN            shift and go to state 200


state 163

    (89) escritura -> WRITE PARIZQ escrituraciclo otro . PARDER PTOCOM

    PARDER          shift and go to state 201


state 164

    (92) otro -> COMA . escrituraciclo otro
    (90) escrituraciclo -> . CTE_STRING
    (91) escrituraciclo -> . expresion
    (55) expresion -> . exp expresionsig
    (65) exp -> . termino expciclo
    (69) termino -> . factor factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    CTE_STRING      shift and go to state 114
    PARIZQ          shift and go to state 100
    ID              shift and go to state 99
    MAS             shift and go to state 108
    MENOS           shift and go to state 109
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    escrituraciclo                 shift and go to state 202
    expresion                      shift and go to state 115
    exp                            shift and go to state 104
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    masomenos                      shift and go to state 107
    empty                          shift and go to state 111

state 165

    (93) otro -> empty .

    PARDER          reduce using rule 93 (otro -> empty .)


state 166

    (95) lectura -> READ PARIZQ iddim ciclodim . PARDER PTOCOM

    PARDER          shift and go to state 203


state 167

    (96) ciclodim -> COMA . iddim ciclodim
    (98) iddim -> . ID arrexp arrexp

    ID              shift and go to state 86

    iddim                          shift and go to state 204

state 168

    (97) ciclodim -> empty .

    PARDER          reduce using rule 97 (ciclodim -> empty .)


state 169

    (103) condicional -> WHILE PARIZQ expresion PARDER . DO bloque

    DO              shift and go to state 205


state 170

    (104) nocondicional -> FOR iddim IGU expresion . TO expresion DO bloque

    TO              shift and go to state 206


state 171

    (98) iddim -> ID arrexp arrexp .

    IGU             reduce using rule 98 (iddim -> ID arrexp arrexp .)
    COMA            reduce using rule 98 (iddim -> ID arrexp arrexp .)
    PARDER          reduce using rule 98 (iddim -> ID arrexp arrexp .)
    MULT            reduce using rule 98 (iddim -> ID arrexp arrexp .)
    DIV             reduce using rule 98 (iddim -> ID arrexp arrexp .)
    MAS             reduce using rule 98 (iddim -> ID arrexp arrexp .)
    MENOS           reduce using rule 98 (iddim -> ID arrexp arrexp .)
    MAY             reduce using rule 98 (iddim -> ID arrexp arrexp .)
    MEN             reduce using rule 98 (iddim -> ID arrexp arrexp .)
    DIF             reduce using rule 98 (iddim -> ID arrexp arrexp .)
    IGUIGU          reduce using rule 98 (iddim -> ID arrexp arrexp .)
    AND             reduce using rule 98 (iddim -> ID arrexp arrexp .)
    OR              reduce using rule 98 (iddim -> ID arrexp arrexp .)
    CORDER          reduce using rule 98 (iddim -> ID arrexp arrexp .)
    TO              reduce using rule 98 (iddim -> ID arrexp arrexp .)
    PTOCOM          reduce using rule 98 (iddim -> ID arrexp arrexp .)
    DO              reduce using rule 98 (iddim -> ID arrexp arrexp .)


state 172

    (99) arrexp -> CORIZQ expresion . CORDER

    CORDER          shift and go to state 207


state 173

    (24) funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars . bloque
    (33) bloque -> . KEYIZQ bloqueopcion KEYDER

    KEYIZQ          shift and go to state 44

    bloque                         shift and go to state 208

state 174

    (29) funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloquefunc .

    VOID            reduce using rule 29 (funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloquefunc .)
    INT             reduce using rule 29 (funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloquefunc .)
    FLT             reduce using rule 29 (funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloquefunc .)
    CHAR            reduce using rule 29 (funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloquefunc .)
    MAIN            reduce using rule 29 (funcion -> tipo_func MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloquefunc .)


state 175

    (36) bloquefunc -> KEYIZQ . bloqueopcionfunc KEYDER
    (37) bloqueopcionfunc -> . estatutofunc bloqueopcionfunc
    (38) bloqueopcionfunc -> . empty
    (45) estatutofunc -> . asignacion
    (46) estatutofunc -> . decisionfunc
    (47) estatutofunc -> . escritura
    (48) estatutofunc -> . llamadafunc
    (49) estatutofunc -> . repeticionfunc
    (50) estatutofunc -> . lectura
    (51) estatutofunc -> . RETURN PARIZQ expresion PARDER PTOCOM
    (110) empty -> .
    (52) asignacion -> . ID asignacionarr asignacionarr IGU expresion PTOCOM
    (105) decisionfunc -> . IF PARIZQ expresion PARDER THEN bloquefunc ELSE bloquefunc
    (89) escritura -> . WRITE PARIZQ escrituraciclo otro PARDER PTOCOM
    (94) llamadafunc -> . ID PARIZQ parametros PARDER PTOCOM
    (106) repeticionfunc -> . condicionalfunc
    (107) repeticionfunc -> . nocondicionalfunc
    (95) lectura -> . READ PARIZQ iddim ciclodim PARDER PTOCOM
    (108) condicionalfunc -> . WHILE PARIZQ expresion PARDER DO bloquefunc
    (109) nocondicionalfunc -> . FOR iddim IGU expresion TO expresion DO bloquefunc

    RETURN          shift and go to state 218
    KEYDER          reduce using rule 110 (empty -> .)
    ID              shift and go to state 60
    IF              shift and go to state 219
    WRITE           shift and go to state 62
    READ            shift and go to state 65
    WHILE           shift and go to state 222
    FOR             shift and go to state 223

    bloqueopcionfunc               shift and go to state 209
    estatutofunc                   shift and go to state 210
    empty                          shift and go to state 211
    asignacion                     shift and go to state 212
    decisionfunc                   shift and go to state 213
    escritura                      shift and go to state 214
    llamadafunc                    shift and go to state 215
    repeticionfunc                 shift and go to state 216
    lectura                        shift and go to state 217
    condicionalfunc                shift and go to state 220
    nocondicionalfunc              shift and go to state 221

state 176

    (27) ciclovarsimple -> COMA varsimple ciclovarsimple .

    PARDER          reduce using rule 27 (ciclovarsimple -> COMA varsimple ciclovarsimple .)


state 177

    (30) ident -> ID arrini arrini .

    COMA            reduce using rule 30 (ident -> ID arrini arrini .)
    PARDER          reduce using rule 30 (ident -> ID arrini arrini .)


state 178

    (31) arrini -> CORIZQ CORDER .

    CORIZQ          reduce using rule 31 (arrini -> CORIZQ CORDER .)
    COMA            reduce using rule 31 (arrini -> CORIZQ CORDER .)
    PARDER          reduce using rule 31 (arrini -> CORIZQ CORDER .)


state 179

    (13) opciontipo -> ID arr . arr varciclo PTOCOM tipociclo
    (9) arr -> . CORIZQ CTEI CORDER
    (10) arr -> . empty
    (110) empty -> .

    CORIZQ          shift and go to state 36
    COMA            reduce using rule 110 (empty -> .)
    PTOCOM          reduce using rule 110 (empty -> .)

    arr                            shift and go to state 224
    empty                          shift and go to state 37

state 180

    (14) opciontipo -> MODULE ID . PARIZQ opcionvarsimple PARDER opvars bloquefunc

    PARIZQ          shift and go to state 225


state 181

    (7) varciclo -> COMA ID arr arr varciclo .

    PTOCOM          reduce using rule 7 (varciclo -> COMA ID arr arr varciclo .)


state 182

    (52) asignacion -> ID asignacionarr asignacionarr IGU expresion . PTOCOM

    PTOCOM          shift and go to state 226


state 183

    (79) opcionid -> arrexp arrexp .

    MULT            reduce using rule 79 (opcionid -> arrexp arrexp .)
    DIV             reduce using rule 79 (opcionid -> arrexp arrexp .)
    MAS             reduce using rule 79 (opcionid -> arrexp arrexp .)
    MENOS           reduce using rule 79 (opcionid -> arrexp arrexp .)
    MAY             reduce using rule 79 (opcionid -> arrexp arrexp .)
    MEN             reduce using rule 79 (opcionid -> arrexp arrexp .)
    DIF             reduce using rule 79 (opcionid -> arrexp arrexp .)
    IGUIGU          reduce using rule 79 (opcionid -> arrexp arrexp .)
    AND             reduce using rule 79 (opcionid -> arrexp arrexp .)
    OR              reduce using rule 79 (opcionid -> arrexp arrexp .)
    COMA            reduce using rule 79 (opcionid -> arrexp arrexp .)
    PARDER          reduce using rule 79 (opcionid -> arrexp arrexp .)
    CORDER          reduce using rule 79 (opcionid -> arrexp arrexp .)
    TO              reduce using rule 79 (opcionid -> arrexp arrexp .)
    PTOCOM          reduce using rule 79 (opcionid -> arrexp arrexp .)
    DO              reduce using rule 79 (opcionid -> arrexp arrexp .)


state 184

    (80) opcionid -> PARIZQ parametros . PARDER

    PARDER          shift and go to state 227


state 185

    (73) factor -> PARIZQ expresion PARDER .

    MULT            reduce using rule 73 (factor -> PARIZQ expresion PARDER .)
    DIV             reduce using rule 73 (factor -> PARIZQ expresion PARDER .)
    MAS             reduce using rule 73 (factor -> PARIZQ expresion PARDER .)
    MENOS           reduce using rule 73 (factor -> PARIZQ expresion PARDER .)
    MAY             reduce using rule 73 (factor -> PARIZQ expresion PARDER .)
    MEN             reduce using rule 73 (factor -> PARIZQ expresion PARDER .)
    DIF             reduce using rule 73 (factor -> PARIZQ expresion PARDER .)
    IGUIGU          reduce using rule 73 (factor -> PARIZQ expresion PARDER .)
    AND             reduce using rule 73 (factor -> PARIZQ expresion PARDER .)
    OR              reduce using rule 73 (factor -> PARIZQ expresion PARDER .)
    COMA            reduce using rule 73 (factor -> PARIZQ expresion PARDER .)
    PARDER          reduce using rule 73 (factor -> PARIZQ expresion PARDER .)
    CORDER          reduce using rule 73 (factor -> PARIZQ expresion PARDER .)
    TO              reduce using rule 73 (factor -> PARIZQ expresion PARDER .)
    PTOCOM          reduce using rule 73 (factor -> PARIZQ expresion PARDER .)
    DO              reduce using rule 73 (factor -> PARIZQ expresion PARDER .)


state 186

    (94) llamadafunc -> ID PARIZQ parametros PARDER PTOCOM .

    ID              reduce using rule 94 (llamadafunc -> ID PARIZQ parametros PARDER PTOCOM .)
    IF              reduce using rule 94 (llamadafunc -> ID PARIZQ parametros PARDER PTOCOM .)
    WRITE           reduce using rule 94 (llamadafunc -> ID PARIZQ parametros PARDER PTOCOM .)
    READ            reduce using rule 94 (llamadafunc -> ID PARIZQ parametros PARDER PTOCOM .)
    WHILE           reduce using rule 94 (llamadafunc -> ID PARIZQ parametros PARDER PTOCOM .)
    FOR             reduce using rule 94 (llamadafunc -> ID PARIZQ parametros PARDER PTOCOM .)
    KEYDER          reduce using rule 94 (llamadafunc -> ID PARIZQ parametros PARDER PTOCOM .)
    RETURN          reduce using rule 94 (llamadafunc -> ID PARIZQ parametros PARDER PTOCOM .)


state 187

    (86) cicloparametros -> COMA expresion . cicloparametros
    (86) cicloparametros -> . COMA expresion cicloparametros
    (87) cicloparametros -> . empty
    (110) empty -> .

    COMA            shift and go to state 139
    PARDER          reduce using rule 110 (empty -> .)

    cicloparametros                shift and go to state 228
    empty                          shift and go to state 140

state 188

    (56) expresionsig -> MAY expresionsigequal . exp
    (65) exp -> . termino expciclo
    (69) termino -> . factor factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 100
    ID              shift and go to state 99
    MAS             shift and go to state 108
    MENOS           shift and go to state 109
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    exp                            shift and go to state 229
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    masomenos                      shift and go to state 107
    empty                          shift and go to state 111

state 189

    (63) expresionsigequal -> IGU .

    PARIZQ          reduce using rule 63 (expresionsigequal -> IGU .)
    ID              reduce using rule 63 (expresionsigequal -> IGU .)
    MAS             reduce using rule 63 (expresionsigequal -> IGU .)
    MENOS           reduce using rule 63 (expresionsigequal -> IGU .)
    CTEI            reduce using rule 63 (expresionsigequal -> IGU .)
    CTEF            reduce using rule 63 (expresionsigequal -> IGU .)


state 190

    (64) expresionsigequal -> empty .

    PARIZQ          reduce using rule 64 (expresionsigequal -> empty .)
    ID              reduce using rule 64 (expresionsigequal -> empty .)
    MAS             reduce using rule 64 (expresionsigequal -> empty .)
    MENOS           reduce using rule 64 (expresionsigequal -> empty .)
    CTEI            reduce using rule 64 (expresionsigequal -> empty .)
    CTEF            reduce using rule 64 (expresionsigequal -> empty .)


state 191

    (57) expresionsig -> MEN expresionsigequal . exp
    (65) exp -> . termino expciclo
    (69) termino -> . factor factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 100
    ID              shift and go to state 99
    MAS             shift and go to state 108
    MENOS           shift and go to state 109
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    exp                            shift and go to state 230
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    masomenos                      shift and go to state 107
    empty                          shift and go to state 111

state 192

    (58) expresionsig -> DIF exp .

    COMA            reduce using rule 58 (expresionsig -> DIF exp .)
    PARDER          reduce using rule 58 (expresionsig -> DIF exp .)
    CORDER          reduce using rule 58 (expresionsig -> DIF exp .)
    TO              reduce using rule 58 (expresionsig -> DIF exp .)
    PTOCOM          reduce using rule 58 (expresionsig -> DIF exp .)
    DO              reduce using rule 58 (expresionsig -> DIF exp .)


state 193

    (59) expresionsig -> IGUIGU exp .

    COMA            reduce using rule 59 (expresionsig -> IGUIGU exp .)
    PARDER          reduce using rule 59 (expresionsig -> IGUIGU exp .)
    CORDER          reduce using rule 59 (expresionsig -> IGUIGU exp .)
    TO              reduce using rule 59 (expresionsig -> IGUIGU exp .)
    PTOCOM          reduce using rule 59 (expresionsig -> IGUIGU exp .)
    DO              reduce using rule 59 (expresionsig -> IGUIGU exp .)


state 194

    (60) expresionsig -> AND exp .

    COMA            reduce using rule 60 (expresionsig -> AND exp .)
    PARDER          reduce using rule 60 (expresionsig -> AND exp .)
    CORDER          reduce using rule 60 (expresionsig -> AND exp .)
    TO              reduce using rule 60 (expresionsig -> AND exp .)
    PTOCOM          reduce using rule 60 (expresionsig -> AND exp .)
    DO              reduce using rule 60 (expresionsig -> AND exp .)


state 195

    (61) expresionsig -> OR exp .

    COMA            reduce using rule 61 (expresionsig -> OR exp .)
    PARDER          reduce using rule 61 (expresionsig -> OR exp .)
    CORDER          reduce using rule 61 (expresionsig -> OR exp .)
    TO              reduce using rule 61 (expresionsig -> OR exp .)
    PTOCOM          reduce using rule 61 (expresionsig -> OR exp .)
    DO              reduce using rule 61 (expresionsig -> OR exp .)


state 196

    (66) expciclo -> MAS exp .

    MAY             reduce using rule 66 (expciclo -> MAS exp .)
    MEN             reduce using rule 66 (expciclo -> MAS exp .)
    DIF             reduce using rule 66 (expciclo -> MAS exp .)
    IGUIGU          reduce using rule 66 (expciclo -> MAS exp .)
    AND             reduce using rule 66 (expciclo -> MAS exp .)
    OR              reduce using rule 66 (expciclo -> MAS exp .)
    COMA            reduce using rule 66 (expciclo -> MAS exp .)
    PARDER          reduce using rule 66 (expciclo -> MAS exp .)
    CORDER          reduce using rule 66 (expciclo -> MAS exp .)
    TO              reduce using rule 66 (expciclo -> MAS exp .)
    PTOCOM          reduce using rule 66 (expciclo -> MAS exp .)
    DO              reduce using rule 66 (expciclo -> MAS exp .)


state 197

    (67) expciclo -> MENOS exp .

    MAY             reduce using rule 67 (expciclo -> MENOS exp .)
    MEN             reduce using rule 67 (expciclo -> MENOS exp .)
    DIF             reduce using rule 67 (expciclo -> MENOS exp .)
    IGUIGU          reduce using rule 67 (expciclo -> MENOS exp .)
    AND             reduce using rule 67 (expciclo -> MENOS exp .)
    OR              reduce using rule 67 (expciclo -> MENOS exp .)
    COMA            reduce using rule 67 (expciclo -> MENOS exp .)
    PARDER          reduce using rule 67 (expciclo -> MENOS exp .)
    CORDER          reduce using rule 67 (expciclo -> MENOS exp .)
    TO              reduce using rule 67 (expciclo -> MENOS exp .)
    PTOCOM          reduce using rule 67 (expciclo -> MENOS exp .)
    DO              reduce using rule 67 (expciclo -> MENOS exp .)


state 198

    (70) factorciclo -> MULT termino .

    MAS             reduce using rule 70 (factorciclo -> MULT termino .)
    MENOS           reduce using rule 70 (factorciclo -> MULT termino .)
    MAY             reduce using rule 70 (factorciclo -> MULT termino .)
    MEN             reduce using rule 70 (factorciclo -> MULT termino .)
    DIF             reduce using rule 70 (factorciclo -> MULT termino .)
    IGUIGU          reduce using rule 70 (factorciclo -> MULT termino .)
    AND             reduce using rule 70 (factorciclo -> MULT termino .)
    OR              reduce using rule 70 (factorciclo -> MULT termino .)
    COMA            reduce using rule 70 (factorciclo -> MULT termino .)
    PARDER          reduce using rule 70 (factorciclo -> MULT termino .)
    CORDER          reduce using rule 70 (factorciclo -> MULT termino .)
    TO              reduce using rule 70 (factorciclo -> MULT termino .)
    PTOCOM          reduce using rule 70 (factorciclo -> MULT termino .)
    DO              reduce using rule 70 (factorciclo -> MULT termino .)


state 199

    (71) factorciclo -> DIV termino .

    MAS             reduce using rule 71 (factorciclo -> DIV termino .)
    MENOS           reduce using rule 71 (factorciclo -> DIV termino .)
    MAY             reduce using rule 71 (factorciclo -> DIV termino .)
    MEN             reduce using rule 71 (factorciclo -> DIV termino .)
    DIF             reduce using rule 71 (factorciclo -> DIV termino .)
    IGUIGU          reduce using rule 71 (factorciclo -> DIV termino .)
    AND             reduce using rule 71 (factorciclo -> DIV termino .)
    OR              reduce using rule 71 (factorciclo -> DIV termino .)
    COMA            reduce using rule 71 (factorciclo -> DIV termino .)
    PARDER          reduce using rule 71 (factorciclo -> DIV termino .)
    CORDER          reduce using rule 71 (factorciclo -> DIV termino .)
    TO              reduce using rule 71 (factorciclo -> DIV termino .)
    PTOCOM          reduce using rule 71 (factorciclo -> DIV termino .)
    DO              reduce using rule 71 (factorciclo -> DIV termino .)


state 200

    (88) decision -> IF PARIZQ expresion PARDER THEN . bloque ELSE bloque
    (33) bloque -> . KEYIZQ bloqueopcion KEYDER

    KEYIZQ          shift and go to state 44

    bloque                         shift and go to state 231

state 201

    (89) escritura -> WRITE PARIZQ escrituraciclo otro PARDER . PTOCOM

    PTOCOM          shift and go to state 232


state 202

    (92) otro -> COMA escrituraciclo . otro
    (92) otro -> . COMA escrituraciclo otro
    (93) otro -> . empty
    (110) empty -> .

    COMA            shift and go to state 164
    PARDER          reduce using rule 110 (empty -> .)

    otro                           shift and go to state 233
    empty                          shift and go to state 165

state 203

    (95) lectura -> READ PARIZQ iddim ciclodim PARDER . PTOCOM

    PTOCOM          shift and go to state 234


state 204

    (96) ciclodim -> COMA iddim . ciclodim
    (96) ciclodim -> . COMA iddim ciclodim
    (97) ciclodim -> . empty
    (110) empty -> .

    COMA            shift and go to state 167
    PARDER          reduce using rule 110 (empty -> .)

    ciclodim                       shift and go to state 235
    empty                          shift and go to state 168

state 205

    (103) condicional -> WHILE PARIZQ expresion PARDER DO . bloque
    (33) bloque -> . KEYIZQ bloqueopcion KEYDER

    KEYIZQ          shift and go to state 44

    bloque                         shift and go to state 236

state 206

    (104) nocondicional -> FOR iddim IGU expresion TO . expresion DO bloque
    (55) expresion -> . exp expresionsig
    (65) exp -> . termino expciclo
    (69) termino -> . factor factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 100
    ID              shift and go to state 99
    MAS             shift and go to state 108
    MENOS           shift and go to state 109
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    expresion                      shift and go to state 237
    exp                            shift and go to state 104
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    masomenos                      shift and go to state 107
    empty                          shift and go to state 111

state 207

    (99) arrexp -> CORIZQ expresion CORDER .

    CORIZQ          reduce using rule 99 (arrexp -> CORIZQ expresion CORDER .)
    IGU             reduce using rule 99 (arrexp -> CORIZQ expresion CORDER .)
    COMA            reduce using rule 99 (arrexp -> CORIZQ expresion CORDER .)
    PARDER          reduce using rule 99 (arrexp -> CORIZQ expresion CORDER .)
    MULT            reduce using rule 99 (arrexp -> CORIZQ expresion CORDER .)
    DIV             reduce using rule 99 (arrexp -> CORIZQ expresion CORDER .)
    MAS             reduce using rule 99 (arrexp -> CORIZQ expresion CORDER .)
    MENOS           reduce using rule 99 (arrexp -> CORIZQ expresion CORDER .)
    MAY             reduce using rule 99 (arrexp -> CORIZQ expresion CORDER .)
    MEN             reduce using rule 99 (arrexp -> CORIZQ expresion CORDER .)
    DIF             reduce using rule 99 (arrexp -> CORIZQ expresion CORDER .)
    IGUIGU          reduce using rule 99 (arrexp -> CORIZQ expresion CORDER .)
    AND             reduce using rule 99 (arrexp -> CORIZQ expresion CORDER .)
    OR              reduce using rule 99 (arrexp -> CORIZQ expresion CORDER .)
    CORDER          reduce using rule 99 (arrexp -> CORIZQ expresion CORDER .)
    TO              reduce using rule 99 (arrexp -> CORIZQ expresion CORDER .)
    PTOCOM          reduce using rule 99 (arrexp -> CORIZQ expresion CORDER .)
    DO              reduce using rule 99 (arrexp -> CORIZQ expresion CORDER .)


state 208

    (24) funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloque .

    VOID            reduce using rule 24 (funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloque .)
    INT             reduce using rule 24 (funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloque .)
    FLT             reduce using rule 24 (funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloque .)
    CHAR            reduce using rule 24 (funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloque .)
    MAIN            reduce using rule 24 (funcionvoid -> VOID r_register_function MODULE ID r_update_curr_function_name PARIZQ opcionvarsimple PARDER opvars bloque .)


state 209

    (36) bloquefunc -> KEYIZQ bloqueopcionfunc . KEYDER

    KEYDER          shift and go to state 238


state 210

    (37) bloqueopcionfunc -> estatutofunc . bloqueopcionfunc
    (37) bloqueopcionfunc -> . estatutofunc bloqueopcionfunc
    (38) bloqueopcionfunc -> . empty
    (45) estatutofunc -> . asignacion
    (46) estatutofunc -> . decisionfunc
    (47) estatutofunc -> . escritura
    (48) estatutofunc -> . llamadafunc
    (49) estatutofunc -> . repeticionfunc
    (50) estatutofunc -> . lectura
    (51) estatutofunc -> . RETURN PARIZQ expresion PARDER PTOCOM
    (110) empty -> .
    (52) asignacion -> . ID asignacionarr asignacionarr IGU expresion PTOCOM
    (105) decisionfunc -> . IF PARIZQ expresion PARDER THEN bloquefunc ELSE bloquefunc
    (89) escritura -> . WRITE PARIZQ escrituraciclo otro PARDER PTOCOM
    (94) llamadafunc -> . ID PARIZQ parametros PARDER PTOCOM
    (106) repeticionfunc -> . condicionalfunc
    (107) repeticionfunc -> . nocondicionalfunc
    (95) lectura -> . READ PARIZQ iddim ciclodim PARDER PTOCOM
    (108) condicionalfunc -> . WHILE PARIZQ expresion PARDER DO bloquefunc
    (109) nocondicionalfunc -> . FOR iddim IGU expresion TO expresion DO bloquefunc

    RETURN          shift and go to state 218
    KEYDER          reduce using rule 110 (empty -> .)
    ID              shift and go to state 60
    IF              shift and go to state 219
    WRITE           shift and go to state 62
    READ            shift and go to state 65
    WHILE           shift and go to state 222
    FOR             shift and go to state 223

    estatutofunc                   shift and go to state 210
    bloqueopcionfunc               shift and go to state 239
    empty                          shift and go to state 211
    asignacion                     shift and go to state 212
    decisionfunc                   shift and go to state 213
    escritura                      shift and go to state 214
    llamadafunc                    shift and go to state 215
    repeticionfunc                 shift and go to state 216
    lectura                        shift and go to state 217
    condicionalfunc                shift and go to state 220
    nocondicionalfunc              shift and go to state 221

state 211

    (38) bloqueopcionfunc -> empty .

    KEYDER          reduce using rule 38 (bloqueopcionfunc -> empty .)


state 212

    (45) estatutofunc -> asignacion .

    RETURN          reduce using rule 45 (estatutofunc -> asignacion .)
    ID              reduce using rule 45 (estatutofunc -> asignacion .)
    IF              reduce using rule 45 (estatutofunc -> asignacion .)
    WRITE           reduce using rule 45 (estatutofunc -> asignacion .)
    READ            reduce using rule 45 (estatutofunc -> asignacion .)
    WHILE           reduce using rule 45 (estatutofunc -> asignacion .)
    FOR             reduce using rule 45 (estatutofunc -> asignacion .)
    KEYDER          reduce using rule 45 (estatutofunc -> asignacion .)


state 213

    (46) estatutofunc -> decisionfunc .

    RETURN          reduce using rule 46 (estatutofunc -> decisionfunc .)
    ID              reduce using rule 46 (estatutofunc -> decisionfunc .)
    IF              reduce using rule 46 (estatutofunc -> decisionfunc .)
    WRITE           reduce using rule 46 (estatutofunc -> decisionfunc .)
    READ            reduce using rule 46 (estatutofunc -> decisionfunc .)
    WHILE           reduce using rule 46 (estatutofunc -> decisionfunc .)
    FOR             reduce using rule 46 (estatutofunc -> decisionfunc .)
    KEYDER          reduce using rule 46 (estatutofunc -> decisionfunc .)


state 214

    (47) estatutofunc -> escritura .

    RETURN          reduce using rule 47 (estatutofunc -> escritura .)
    ID              reduce using rule 47 (estatutofunc -> escritura .)
    IF              reduce using rule 47 (estatutofunc -> escritura .)
    WRITE           reduce using rule 47 (estatutofunc -> escritura .)
    READ            reduce using rule 47 (estatutofunc -> escritura .)
    WHILE           reduce using rule 47 (estatutofunc -> escritura .)
    FOR             reduce using rule 47 (estatutofunc -> escritura .)
    KEYDER          reduce using rule 47 (estatutofunc -> escritura .)


state 215

    (48) estatutofunc -> llamadafunc .

    RETURN          reduce using rule 48 (estatutofunc -> llamadafunc .)
    ID              reduce using rule 48 (estatutofunc -> llamadafunc .)
    IF              reduce using rule 48 (estatutofunc -> llamadafunc .)
    WRITE           reduce using rule 48 (estatutofunc -> llamadafunc .)
    READ            reduce using rule 48 (estatutofunc -> llamadafunc .)
    WHILE           reduce using rule 48 (estatutofunc -> llamadafunc .)
    FOR             reduce using rule 48 (estatutofunc -> llamadafunc .)
    KEYDER          reduce using rule 48 (estatutofunc -> llamadafunc .)


state 216

    (49) estatutofunc -> repeticionfunc .

    RETURN          reduce using rule 49 (estatutofunc -> repeticionfunc .)
    ID              reduce using rule 49 (estatutofunc -> repeticionfunc .)
    IF              reduce using rule 49 (estatutofunc -> repeticionfunc .)
    WRITE           reduce using rule 49 (estatutofunc -> repeticionfunc .)
    READ            reduce using rule 49 (estatutofunc -> repeticionfunc .)
    WHILE           reduce using rule 49 (estatutofunc -> repeticionfunc .)
    FOR             reduce using rule 49 (estatutofunc -> repeticionfunc .)
    KEYDER          reduce using rule 49 (estatutofunc -> repeticionfunc .)


state 217

    (50) estatutofunc -> lectura .

    RETURN          reduce using rule 50 (estatutofunc -> lectura .)
    ID              reduce using rule 50 (estatutofunc -> lectura .)
    IF              reduce using rule 50 (estatutofunc -> lectura .)
    WRITE           reduce using rule 50 (estatutofunc -> lectura .)
    READ            reduce using rule 50 (estatutofunc -> lectura .)
    WHILE           reduce using rule 50 (estatutofunc -> lectura .)
    FOR             reduce using rule 50 (estatutofunc -> lectura .)
    KEYDER          reduce using rule 50 (estatutofunc -> lectura .)


state 218

    (51) estatutofunc -> RETURN . PARIZQ expresion PARDER PTOCOM

    PARIZQ          shift and go to state 240


state 219

    (105) decisionfunc -> IF . PARIZQ expresion PARDER THEN bloquefunc ELSE bloquefunc

    PARIZQ          shift and go to state 241


state 220

    (106) repeticionfunc -> condicionalfunc .

    RETURN          reduce using rule 106 (repeticionfunc -> condicionalfunc .)
    ID              reduce using rule 106 (repeticionfunc -> condicionalfunc .)
    IF              reduce using rule 106 (repeticionfunc -> condicionalfunc .)
    WRITE           reduce using rule 106 (repeticionfunc -> condicionalfunc .)
    READ            reduce using rule 106 (repeticionfunc -> condicionalfunc .)
    WHILE           reduce using rule 106 (repeticionfunc -> condicionalfunc .)
    FOR             reduce using rule 106 (repeticionfunc -> condicionalfunc .)
    KEYDER          reduce using rule 106 (repeticionfunc -> condicionalfunc .)


state 221

    (107) repeticionfunc -> nocondicionalfunc .

    RETURN          reduce using rule 107 (repeticionfunc -> nocondicionalfunc .)
    ID              reduce using rule 107 (repeticionfunc -> nocondicionalfunc .)
    IF              reduce using rule 107 (repeticionfunc -> nocondicionalfunc .)
    WRITE           reduce using rule 107 (repeticionfunc -> nocondicionalfunc .)
    READ            reduce using rule 107 (repeticionfunc -> nocondicionalfunc .)
    WHILE           reduce using rule 107 (repeticionfunc -> nocondicionalfunc .)
    FOR             reduce using rule 107 (repeticionfunc -> nocondicionalfunc .)
    KEYDER          reduce using rule 107 (repeticionfunc -> nocondicionalfunc .)


state 222

    (108) condicionalfunc -> WHILE . PARIZQ expresion PARDER DO bloquefunc

    PARIZQ          shift and go to state 242


state 223

    (109) nocondicionalfunc -> FOR . iddim IGU expresion TO expresion DO bloquefunc
    (98) iddim -> . ID arrexp arrexp

    ID              shift and go to state 86

    iddim                          shift and go to state 243

state 224

    (13) opciontipo -> ID arr arr . varciclo PTOCOM tipociclo
    (7) varciclo -> . COMA ID arr arr varciclo
    (8) varciclo -> . empty
    (110) empty -> .

    COMA            shift and go to state 48
    PTOCOM          reduce using rule 110 (empty -> .)

    varciclo                       shift and go to state 244
    empty                          shift and go to state 49

state 225

    (14) opciontipo -> MODULE ID PARIZQ . opcionvarsimple PARDER opvars bloquefunc
    (25) opcionvarsimple -> . varsimple ciclovarsimple
    (26) opcionvarsimple -> . empty
    (21) varsimple -> . tipo ident
    (110) empty -> .
    (15) tipo -> . INT
    (16) tipo -> . FLT
    (17) tipo -> . CHAR

    PARDER          reduce using rule 110 (empty -> .)
    INT             shift and go to state 21
    FLT             shift and go to state 22
    CHAR            shift and go to state 23

    opcionvarsimple                shift and go to state 245
    varsimple                      shift and go to state 70
    empty                          shift and go to state 71
    tipo                           shift and go to state 72

state 226

    (52) asignacion -> ID asignacionarr asignacionarr IGU expresion PTOCOM .

    ID              reduce using rule 52 (asignacion -> ID asignacionarr asignacionarr IGU expresion PTOCOM .)
    IF              reduce using rule 52 (asignacion -> ID asignacionarr asignacionarr IGU expresion PTOCOM .)
    WRITE           reduce using rule 52 (asignacion -> ID asignacionarr asignacionarr IGU expresion PTOCOM .)
    READ            reduce using rule 52 (asignacion -> ID asignacionarr asignacionarr IGU expresion PTOCOM .)
    WHILE           reduce using rule 52 (asignacion -> ID asignacionarr asignacionarr IGU expresion PTOCOM .)
    FOR             reduce using rule 52 (asignacion -> ID asignacionarr asignacionarr IGU expresion PTOCOM .)
    KEYDER          reduce using rule 52 (asignacion -> ID asignacionarr asignacionarr IGU expresion PTOCOM .)
    RETURN          reduce using rule 52 (asignacion -> ID asignacionarr asignacionarr IGU expresion PTOCOM .)


state 227

    (80) opcionid -> PARIZQ parametros PARDER .

    MULT            reduce using rule 80 (opcionid -> PARIZQ parametros PARDER .)
    DIV             reduce using rule 80 (opcionid -> PARIZQ parametros PARDER .)
    MAS             reduce using rule 80 (opcionid -> PARIZQ parametros PARDER .)
    MENOS           reduce using rule 80 (opcionid -> PARIZQ parametros PARDER .)
    MAY             reduce using rule 80 (opcionid -> PARIZQ parametros PARDER .)
    MEN             reduce using rule 80 (opcionid -> PARIZQ parametros PARDER .)
    DIF             reduce using rule 80 (opcionid -> PARIZQ parametros PARDER .)
    IGUIGU          reduce using rule 80 (opcionid -> PARIZQ parametros PARDER .)
    AND             reduce using rule 80 (opcionid -> PARIZQ parametros PARDER .)
    OR              reduce using rule 80 (opcionid -> PARIZQ parametros PARDER .)
    COMA            reduce using rule 80 (opcionid -> PARIZQ parametros PARDER .)
    PARDER          reduce using rule 80 (opcionid -> PARIZQ parametros PARDER .)
    CORDER          reduce using rule 80 (opcionid -> PARIZQ parametros PARDER .)
    TO              reduce using rule 80 (opcionid -> PARIZQ parametros PARDER .)
    PTOCOM          reduce using rule 80 (opcionid -> PARIZQ parametros PARDER .)
    DO              reduce using rule 80 (opcionid -> PARIZQ parametros PARDER .)


state 228

    (86) cicloparametros -> COMA expresion cicloparametros .

    PARDER          reduce using rule 86 (cicloparametros -> COMA expresion cicloparametros .)


state 229

    (56) expresionsig -> MAY expresionsigequal exp .

    COMA            reduce using rule 56 (expresionsig -> MAY expresionsigequal exp .)
    PARDER          reduce using rule 56 (expresionsig -> MAY expresionsigequal exp .)
    CORDER          reduce using rule 56 (expresionsig -> MAY expresionsigequal exp .)
    TO              reduce using rule 56 (expresionsig -> MAY expresionsigequal exp .)
    PTOCOM          reduce using rule 56 (expresionsig -> MAY expresionsigequal exp .)
    DO              reduce using rule 56 (expresionsig -> MAY expresionsigequal exp .)


state 230

    (57) expresionsig -> MEN expresionsigequal exp .

    COMA            reduce using rule 57 (expresionsig -> MEN expresionsigequal exp .)
    PARDER          reduce using rule 57 (expresionsig -> MEN expresionsigequal exp .)
    CORDER          reduce using rule 57 (expresionsig -> MEN expresionsigequal exp .)
    TO              reduce using rule 57 (expresionsig -> MEN expresionsigequal exp .)
    PTOCOM          reduce using rule 57 (expresionsig -> MEN expresionsigequal exp .)
    DO              reduce using rule 57 (expresionsig -> MEN expresionsigequal exp .)


state 231

    (88) decision -> IF PARIZQ expresion PARDER THEN bloque . ELSE bloque

    ELSE            shift and go to state 246


state 232

    (89) escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM .

    ID              reduce using rule 89 (escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM .)
    IF              reduce using rule 89 (escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM .)
    WRITE           reduce using rule 89 (escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM .)
    READ            reduce using rule 89 (escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM .)
    WHILE           reduce using rule 89 (escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM .)
    FOR             reduce using rule 89 (escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM .)
    KEYDER          reduce using rule 89 (escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM .)
    RETURN          reduce using rule 89 (escritura -> WRITE PARIZQ escrituraciclo otro PARDER PTOCOM .)


state 233

    (92) otro -> COMA escrituraciclo otro .

    PARDER          reduce using rule 92 (otro -> COMA escrituraciclo otro .)


state 234

    (95) lectura -> READ PARIZQ iddim ciclodim PARDER PTOCOM .

    ID              reduce using rule 95 (lectura -> READ PARIZQ iddim ciclodim PARDER PTOCOM .)
    IF              reduce using rule 95 (lectura -> READ PARIZQ iddim ciclodim PARDER PTOCOM .)
    WRITE           reduce using rule 95 (lectura -> READ PARIZQ iddim ciclodim PARDER PTOCOM .)
    READ            reduce using rule 95 (lectura -> READ PARIZQ iddim ciclodim PARDER PTOCOM .)
    WHILE           reduce using rule 95 (lectura -> READ PARIZQ iddim ciclodim PARDER PTOCOM .)
    FOR             reduce using rule 95 (lectura -> READ PARIZQ iddim ciclodim PARDER PTOCOM .)
    KEYDER          reduce using rule 95 (lectura -> READ PARIZQ iddim ciclodim PARDER PTOCOM .)
    RETURN          reduce using rule 95 (lectura -> READ PARIZQ iddim ciclodim PARDER PTOCOM .)


state 235

    (96) ciclodim -> COMA iddim ciclodim .

    PARDER          reduce using rule 96 (ciclodim -> COMA iddim ciclodim .)


state 236

    (103) condicional -> WHILE PARIZQ expresion PARDER DO bloque .

    ID              reduce using rule 103 (condicional -> WHILE PARIZQ expresion PARDER DO bloque .)
    IF              reduce using rule 103 (condicional -> WHILE PARIZQ expresion PARDER DO bloque .)
    WRITE           reduce using rule 103 (condicional -> WHILE PARIZQ expresion PARDER DO bloque .)
    READ            reduce using rule 103 (condicional -> WHILE PARIZQ expresion PARDER DO bloque .)
    WHILE           reduce using rule 103 (condicional -> WHILE PARIZQ expresion PARDER DO bloque .)
    FOR             reduce using rule 103 (condicional -> WHILE PARIZQ expresion PARDER DO bloque .)
    KEYDER          reduce using rule 103 (condicional -> WHILE PARIZQ expresion PARDER DO bloque .)


state 237

    (104) nocondicional -> FOR iddim IGU expresion TO expresion . DO bloque

    DO              shift and go to state 247


state 238

    (36) bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .

    VOID            reduce using rule 36 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    INT             reduce using rule 36 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    FLT             reduce using rule 36 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    CHAR            reduce using rule 36 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    MAIN            reduce using rule 36 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    KEYIZQ          reduce using rule 36 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    ELSE            reduce using rule 36 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    RETURN          reduce using rule 36 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    ID              reduce using rule 36 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    IF              reduce using rule 36 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    WRITE           reduce using rule 36 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    READ            reduce using rule 36 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    WHILE           reduce using rule 36 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    FOR             reduce using rule 36 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)
    KEYDER          reduce using rule 36 (bloquefunc -> KEYIZQ bloqueopcionfunc KEYDER .)


state 239

    (37) bloqueopcionfunc -> estatutofunc bloqueopcionfunc .

    KEYDER          reduce using rule 37 (bloqueopcionfunc -> estatutofunc bloqueopcionfunc .)


state 240

    (51) estatutofunc -> RETURN PARIZQ . expresion PARDER PTOCOM
    (55) expresion -> . exp expresionsig
    (65) exp -> . termino expciclo
    (69) termino -> . factor factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 100
    ID              shift and go to state 99
    MAS             shift and go to state 108
    MENOS           shift and go to state 109
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    expresion                      shift and go to state 248
    exp                            shift and go to state 104
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    masomenos                      shift and go to state 107
    empty                          shift and go to state 111

state 241

    (105) decisionfunc -> IF PARIZQ . expresion PARDER THEN bloquefunc ELSE bloquefunc
    (55) expresion -> . exp expresionsig
    (65) exp -> . termino expciclo
    (69) termino -> . factor factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 100
    ID              shift and go to state 99
    MAS             shift and go to state 108
    MENOS           shift and go to state 109
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    expresion                      shift and go to state 249
    exp                            shift and go to state 104
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    masomenos                      shift and go to state 107
    empty                          shift and go to state 111

state 242

    (108) condicionalfunc -> WHILE PARIZQ . expresion PARDER DO bloquefunc
    (55) expresion -> . exp expresionsig
    (65) exp -> . termino expciclo
    (69) termino -> . factor factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 100
    ID              shift and go to state 99
    MAS             shift and go to state 108
    MENOS           shift and go to state 109
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    expresion                      shift and go to state 250
    exp                            shift and go to state 104
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    masomenos                      shift and go to state 107
    empty                          shift and go to state 111

state 243

    (109) nocondicionalfunc -> FOR iddim . IGU expresion TO expresion DO bloquefunc

    IGU             shift and go to state 251


state 244

    (13) opciontipo -> ID arr arr varciclo . PTOCOM tipociclo

    PTOCOM          shift and go to state 252


state 245

    (14) opciontipo -> MODULE ID PARIZQ opcionvarsimple . PARDER opvars bloquefunc

    PARDER          shift and go to state 253


state 246

    (88) decision -> IF PARIZQ expresion PARDER THEN bloque ELSE . bloque
    (33) bloque -> . KEYIZQ bloqueopcion KEYDER

    KEYIZQ          shift and go to state 44

    bloque                         shift and go to state 254

state 247

    (104) nocondicional -> FOR iddim IGU expresion TO expresion DO . bloque
    (33) bloque -> . KEYIZQ bloqueopcion KEYDER

    KEYIZQ          shift and go to state 44

    bloque                         shift and go to state 255

state 248

    (51) estatutofunc -> RETURN PARIZQ expresion . PARDER PTOCOM

    PARDER          shift and go to state 256


state 249

    (105) decisionfunc -> IF PARIZQ expresion . PARDER THEN bloquefunc ELSE bloquefunc

    PARDER          shift and go to state 257


state 250

    (108) condicionalfunc -> WHILE PARIZQ expresion . PARDER DO bloquefunc

    PARDER          shift and go to state 258


state 251

    (109) nocondicionalfunc -> FOR iddim IGU . expresion TO expresion DO bloquefunc
    (55) expresion -> . exp expresionsig
    (65) exp -> . termino expciclo
    (69) termino -> . factor factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 100
    ID              shift and go to state 99
    MAS             shift and go to state 108
    MENOS           shift and go to state 109
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    expresion                      shift and go to state 259
    exp                            shift and go to state 104
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    masomenos                      shift and go to state 107
    empty                          shift and go to state 111

state 252

    (13) opciontipo -> ID arr arr varciclo PTOCOM . tipociclo
    (11) tipociclo -> . tipo opciontipo
    (12) tipociclo -> . empty
    (15) tipo -> . INT
    (16) tipo -> . FLT
    (17) tipo -> . CHAR
    (110) empty -> .

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    INT             shift and go to state 21
    FLT             shift and go to state 22
    CHAR            shift and go to state 23
    VOID            reduce using rule 110 (empty -> .)
    MAIN            reduce using rule 110 (empty -> .)
    KEYIZQ          reduce using rule 110 (empty -> .)

  ! INT             [ reduce using rule 110 (empty -> .) ]
  ! FLT             [ reduce using rule 110 (empty -> .) ]
  ! CHAR            [ reduce using rule 110 (empty -> .) ]

    tipociclo                      shift and go to state 260
    tipo                           shift and go to state 94
    empty                          shift and go to state 96

state 253

    (14) opciontipo -> MODULE ID PARIZQ opcionvarsimple PARDER . opvars bloquefunc
    (2) opvars -> . vars
    (3) opvars -> . empty
    (6) vars -> . VARTOKEN tipo ID arr arr varciclo PTOCOM tipociclo
    (110) empty -> .

    VARTOKEN        shift and go to state 9
    KEYIZQ          reduce using rule 110 (empty -> .)

    opvars                         shift and go to state 261
    vars                           shift and go to state 7
    empty                          shift and go to state 8

state 254

    (88) decision -> IF PARIZQ expresion PARDER THEN bloque ELSE bloque .

    ID              reduce using rule 88 (decision -> IF PARIZQ expresion PARDER THEN bloque ELSE bloque .)
    IF              reduce using rule 88 (decision -> IF PARIZQ expresion PARDER THEN bloque ELSE bloque .)
    WRITE           reduce using rule 88 (decision -> IF PARIZQ expresion PARDER THEN bloque ELSE bloque .)
    READ            reduce using rule 88 (decision -> IF PARIZQ expresion PARDER THEN bloque ELSE bloque .)
    WHILE           reduce using rule 88 (decision -> IF PARIZQ expresion PARDER THEN bloque ELSE bloque .)
    FOR             reduce using rule 88 (decision -> IF PARIZQ expresion PARDER THEN bloque ELSE bloque .)
    KEYDER          reduce using rule 88 (decision -> IF PARIZQ expresion PARDER THEN bloque ELSE bloque .)


state 255

    (104) nocondicional -> FOR iddim IGU expresion TO expresion DO bloque .

    ID              reduce using rule 104 (nocondicional -> FOR iddim IGU expresion TO expresion DO bloque .)
    IF              reduce using rule 104 (nocondicional -> FOR iddim IGU expresion TO expresion DO bloque .)
    WRITE           reduce using rule 104 (nocondicional -> FOR iddim IGU expresion TO expresion DO bloque .)
    READ            reduce using rule 104 (nocondicional -> FOR iddim IGU expresion TO expresion DO bloque .)
    WHILE           reduce using rule 104 (nocondicional -> FOR iddim IGU expresion TO expresion DO bloque .)
    FOR             reduce using rule 104 (nocondicional -> FOR iddim IGU expresion TO expresion DO bloque .)
    KEYDER          reduce using rule 104 (nocondicional -> FOR iddim IGU expresion TO expresion DO bloque .)


state 256

    (51) estatutofunc -> RETURN PARIZQ expresion PARDER . PTOCOM

    PTOCOM          shift and go to state 262


state 257

    (105) decisionfunc -> IF PARIZQ expresion PARDER . THEN bloquefunc ELSE bloquefunc

    THEN            shift and go to state 263


state 258

    (108) condicionalfunc -> WHILE PARIZQ expresion PARDER . DO bloquefunc

    DO              shift and go to state 264


state 259

    (109) nocondicionalfunc -> FOR iddim IGU expresion . TO expresion DO bloquefunc

    TO              shift and go to state 265


state 260

    (13) opciontipo -> ID arr arr varciclo PTOCOM tipociclo .

    VOID            reduce using rule 13 (opciontipo -> ID arr arr varciclo PTOCOM tipociclo .)
    INT             reduce using rule 13 (opciontipo -> ID arr arr varciclo PTOCOM tipociclo .)
    FLT             reduce using rule 13 (opciontipo -> ID arr arr varciclo PTOCOM tipociclo .)
    CHAR            reduce using rule 13 (opciontipo -> ID arr arr varciclo PTOCOM tipociclo .)
    MAIN            reduce using rule 13 (opciontipo -> ID arr arr varciclo PTOCOM tipociclo .)
    KEYIZQ          reduce using rule 13 (opciontipo -> ID arr arr varciclo PTOCOM tipociclo .)


state 261

    (14) opciontipo -> MODULE ID PARIZQ opcionvarsimple PARDER opvars . bloquefunc
    (36) bloquefunc -> . KEYIZQ bloqueopcionfunc KEYDER

    KEYIZQ          shift and go to state 175

    bloquefunc                     shift and go to state 266

state 262

    (51) estatutofunc -> RETURN PARIZQ expresion PARDER PTOCOM .

    RETURN          reduce using rule 51 (estatutofunc -> RETURN PARIZQ expresion PARDER PTOCOM .)
    ID              reduce using rule 51 (estatutofunc -> RETURN PARIZQ expresion PARDER PTOCOM .)
    IF              reduce using rule 51 (estatutofunc -> RETURN PARIZQ expresion PARDER PTOCOM .)
    WRITE           reduce using rule 51 (estatutofunc -> RETURN PARIZQ expresion PARDER PTOCOM .)
    READ            reduce using rule 51 (estatutofunc -> RETURN PARIZQ expresion PARDER PTOCOM .)
    WHILE           reduce using rule 51 (estatutofunc -> RETURN PARIZQ expresion PARDER PTOCOM .)
    FOR             reduce using rule 51 (estatutofunc -> RETURN PARIZQ expresion PARDER PTOCOM .)
    KEYDER          reduce using rule 51 (estatutofunc -> RETURN PARIZQ expresion PARDER PTOCOM .)


state 263

    (105) decisionfunc -> IF PARIZQ expresion PARDER THEN . bloquefunc ELSE bloquefunc
    (36) bloquefunc -> . KEYIZQ bloqueopcionfunc KEYDER

    KEYIZQ          shift and go to state 175

    bloquefunc                     shift and go to state 267

state 264

    (108) condicionalfunc -> WHILE PARIZQ expresion PARDER DO . bloquefunc
    (36) bloquefunc -> . KEYIZQ bloqueopcionfunc KEYDER

    KEYIZQ          shift and go to state 175

    bloquefunc                     shift and go to state 268

state 265

    (109) nocondicionalfunc -> FOR iddim IGU expresion TO . expresion DO bloquefunc
    (55) expresion -> . exp expresionsig
    (65) exp -> . termino expciclo
    (69) termino -> . factor factorciclo
    (73) factor -> . PARIZQ expresion PARDER
    (74) factor -> . masomenos varcte
    (75) factor -> . ID opcionid
    (76) masomenos -> . MAS
    (77) masomenos -> . MENOS
    (78) masomenos -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    PARIZQ          shift and go to state 100
    ID              shift and go to state 99
    MAS             shift and go to state 108
    MENOS           shift and go to state 109
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]

    expresion                      shift and go to state 269
    exp                            shift and go to state 104
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    masomenos                      shift and go to state 107
    empty                          shift and go to state 111

state 266

    (14) opciontipo -> MODULE ID PARIZQ opcionvarsimple PARDER opvars bloquefunc .

    VOID            reduce using rule 14 (opciontipo -> MODULE ID PARIZQ opcionvarsimple PARDER opvars bloquefunc .)
    INT             reduce using rule 14 (opciontipo -> MODULE ID PARIZQ opcionvarsimple PARDER opvars bloquefunc .)
    FLT             reduce using rule 14 (opciontipo -> MODULE ID PARIZQ opcionvarsimple PARDER opvars bloquefunc .)
    CHAR            reduce using rule 14 (opciontipo -> MODULE ID PARIZQ opcionvarsimple PARDER opvars bloquefunc .)
    MAIN            reduce using rule 14 (opciontipo -> MODULE ID PARIZQ opcionvarsimple PARDER opvars bloquefunc .)
    KEYIZQ          reduce using rule 14 (opciontipo -> MODULE ID PARIZQ opcionvarsimple PARDER opvars bloquefunc .)


state 267

    (105) decisionfunc -> IF PARIZQ expresion PARDER THEN bloquefunc . ELSE bloquefunc

    ELSE            shift and go to state 270


state 268

    (108) condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc .

    RETURN          reduce using rule 108 (condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc .)
    ID              reduce using rule 108 (condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc .)
    IF              reduce using rule 108 (condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc .)
    WRITE           reduce using rule 108 (condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc .)
    READ            reduce using rule 108 (condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc .)
    WHILE           reduce using rule 108 (condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc .)
    FOR             reduce using rule 108 (condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc .)
    KEYDER          reduce using rule 108 (condicionalfunc -> WHILE PARIZQ expresion PARDER DO bloquefunc .)


state 269

    (109) nocondicionalfunc -> FOR iddim IGU expresion TO expresion . DO bloquefunc

    DO              shift and go to state 271


state 270

    (105) decisionfunc -> IF PARIZQ expresion PARDER THEN bloquefunc ELSE . bloquefunc
    (36) bloquefunc -> . KEYIZQ bloqueopcionfunc KEYDER

    KEYIZQ          shift and go to state 175

    bloquefunc                     shift and go to state 272

state 271

    (109) nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO . bloquefunc
    (36) bloquefunc -> . KEYIZQ bloqueopcionfunc KEYDER

    KEYIZQ          shift and go to state 175

    bloquefunc                     shift and go to state 273

state 272

    (105) decisionfunc -> IF PARIZQ expresion PARDER THEN bloquefunc ELSE bloquefunc .

    RETURN          reduce using rule 105 (decisionfunc -> IF PARIZQ expresion PARDER THEN bloquefunc ELSE bloquefunc .)
    ID              reduce using rule 105 (decisionfunc -> IF PARIZQ expresion PARDER THEN bloquefunc ELSE bloquefunc .)
    IF              reduce using rule 105 (decisionfunc -> IF PARIZQ expresion PARDER THEN bloquefunc ELSE bloquefunc .)
    WRITE           reduce using rule 105 (decisionfunc -> IF PARIZQ expresion PARDER THEN bloquefunc ELSE bloquefunc .)
    READ            reduce using rule 105 (decisionfunc -> IF PARIZQ expresion PARDER THEN bloquefunc ELSE bloquefunc .)
    WHILE           reduce using rule 105 (decisionfunc -> IF PARIZQ expresion PARDER THEN bloquefunc ELSE bloquefunc .)
    FOR             reduce using rule 105 (decisionfunc -> IF PARIZQ expresion PARDER THEN bloquefunc ELSE bloquefunc .)
    KEYDER          reduce using rule 105 (decisionfunc -> IF PARIZQ expresion PARDER THEN bloquefunc ELSE bloquefunc .)


state 273

    (109) nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc .

    RETURN          reduce using rule 109 (nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc .)
    ID              reduce using rule 109 (nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc .)
    IF              reduce using rule 109 (nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc .)
    WRITE           reduce using rule 109 (nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc .)
    READ            reduce using rule 109 (nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc .)
    WHILE           reduce using rule 109 (nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc .)
    FOR             reduce using rule 109 (nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc .)
    KEYDER          reduce using rule 109 (nocondicionalfunc -> FOR iddim IGU expresion TO expresion DO bloquefunc .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for CORIZQ in state 31 resolved as shift
WARNING: shift/reduce conflict for CORIZQ in state 60 resolved as shift
WARNING: shift/reduce conflict for INT in state 73 resolved as shift
WARNING: shift/reduce conflict for FLT in state 73 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 73 resolved as shift
WARNING: shift/reduce conflict for CORIZQ in state 74 resolved as shift
WARNING: shift/reduce conflict for ID in state 78 resolved as shift
WARNING: shift/reduce conflict for ID in state 79 resolved as shift
WARNING: shift/reduce conflict for ID in state 81 resolved as shift
WARNING: shift/reduce conflict for ID in state 82 resolved as shift
WARNING: shift/reduce conflict for ID in state 84 resolved as shift
WARNING: shift/reduce conflict for CORIZQ in state 86 resolved as shift
WARNING: shift/reduce conflict for CORIZQ in state 93 resolved as shift
WARNING: shift/reduce conflict for CORIZQ in state 99 resolved as shift
WARNING: shift/reduce conflict for ID in state 100 resolved as shift
WARNING: shift/reduce conflict for ID in state 118 resolved as shift
WARNING: shift/reduce conflict for ID in state 120 resolved as shift
WARNING: shift/reduce conflict for CORIZQ in state 129 resolved as shift
WARNING: shift/reduce conflict for ID in state 132 resolved as shift
WARNING: shift/reduce conflict for ID in state 135 resolved as shift
WARNING: shift/reduce conflict for ID in state 139 resolved as shift
WARNING: shift/reduce conflict for ID in state 144 resolved as shift
WARNING: shift/reduce conflict for ID in state 145 resolved as shift
WARNING: shift/reduce conflict for ID in state 146 resolved as shift
WARNING: shift/reduce conflict for ID in state 147 resolved as shift
WARNING: shift/reduce conflict for ID in state 150 resolved as shift
WARNING: shift/reduce conflict for ID in state 151 resolved as shift
WARNING: shift/reduce conflict for ID in state 154 resolved as shift
WARNING: shift/reduce conflict for ID in state 155 resolved as shift
WARNING: shift/reduce conflict for ID in state 164 resolved as shift
WARNING: shift/reduce conflict for ID in state 188 resolved as shift
WARNING: shift/reduce conflict for ID in state 191 resolved as shift
WARNING: shift/reduce conflict for ID in state 206 resolved as shift
WARNING: shift/reduce conflict for ID in state 240 resolved as shift
WARNING: shift/reduce conflict for ID in state 241 resolved as shift
WARNING: shift/reduce conflict for ID in state 242 resolved as shift
WARNING: shift/reduce conflict for ID in state 251 resolved as shift
WARNING: shift/reduce conflict for INT in state 252 resolved as shift
WARNING: shift/reduce conflict for FLT in state 252 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 252 resolved as shift
WARNING: shift/reduce conflict for ID in state 265 resolved as shift
